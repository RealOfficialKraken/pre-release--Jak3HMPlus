(in-package goal)

(defskelgroup skel-darkworldtower mhcity-eco-dark-tower mhcity-eco-dark-tower-lod0-jg mhcity-eco-dark-tower-idle-ja
              ((mhcity-eco-dark-tower-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 10 0 9999999)
              )

(defskelgroup skel-dark-world-orb mhcity-de-tower-egg mhcity-de-tower-egg-lod0-jg mhcity-de-tower-egg-idle-ja
              ((mhcity-de-tower-egg-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 999999)
              )


(deftype dark-world-orb (dark-eco-orb)
    ()
)

(defstate active (dark-world-orb)
  :virtual #t
  :event dark-eco-orb-event-handler
  :enter (behavior ()
    (+! (-> self root trans y) (meters 7))
  )
  :exit (behavior ()
    (sound-stop (-> self shock-sound))
    (sound-stop (-> self plasma-sound))
    )
  :trans (behavior ()
    ;(spawn (-> self part) (-> self root trans))
    (when (not *dark-forest*)
        (process-deactivate)
      )
    (start-rift-particle (-> self root trans))
    (if (>= 0.0 (-> self hit-points))
        (go-virtual die)
        )
    (when (and ;(< (vector-vector-xz-distance (-> self root trans) (camera-pos)) (meters 9999))
               (time-elapsed? (-> self shock-spawn-time) (seconds 0.0017))
               )
      (new 'stack-no-clear 'vector)
      (let ((gp-1 (new 'stack-no-clear 'vector)))
        (cond ((rand-vu-percent? 0.5)
            (set-vector!
              gp-1
              (rand-vu-float-range -8192.0 8192.0)
              (rand-vu-float-range 0.0 0.0)
              (rand-vu-float-range -8192.0 8192.0)
              1.0
            )
          )
          (else
            (set-vector!
              gp-1
              (rand-vu-float-range -8192.0 8192.0)
              (rand-vu-float-range -1146880.0 0.0)
              (rand-vu-float-range -8192.0 8192.0)
              1.0
            )
          )
        )
        (set-time! (-> self shock-spawn-time))
        (spawn-shock-effect
          self
          (vector+! (new 'stack-no-clear 'vector) (-> self root trans) gp-1)
          (-> *lightning-spec-id-table* 46)
          lightning-probe-callback
          (the-as sparticle-launcher #f)
          0
          (meters 300)
          )
        )
      (sound-play "de-tower-zap" :id (-> self plasma-sound) :position (-> self root trans))
      (let ((s3-0 (new 'stack-no-clear 'vector)))
        (set! (-> s3-0 quad) (-> self root trans quad))
        (let ((s4-0 (new 'stack-no-clear 'collide-query))
              (s5-2 (new 'stack-no-clear 'vector))
              (gp-2 (new 'stack-no-clear 'vector))
              )
          (let ((f0-6 -28672.0)
                (f1-3 (* 70.0 (the float (current-time))))
                (f2-3 (- -40960.0 (-> self root trans y)))
                )
            (set! (-> s3-0 y) (+ f0-6 (- f1-3 (* (the float (the int (/ f1-3 f2-3))) f2-3))))
            )
          (set! (-> gp-2 quad) (-> s3-0 quad))
          (sound-play "tree-shocker" :id (-> self shock-sound) :position gp-2)
          (+! (-> s3-0 x) 28672.0)
          (set! (-> s4-0 start-pos quad) (-> s3-0 quad))
          (vector-float*! (-> s4-0 move-dist) *x-vector* -40960.0)
          (let ((v1-39 s4-0))
            (set! (-> v1-39 radius) 6144.0)
            (set! (-> v1-39 collide-with) (collide-spec crate obstacle hit-by-others-list pusher))
            (set! (-> v1-39 ignore-process0) self)
            (set! (-> v1-39 ignore-process1) #f)
            (set! (-> v1-39 ignore-pat)
                  (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                  )
            (set! (-> v1-39 action-mask) (collide-action solid))
            )
          (let ((f0-12 (fill-and-probe-using-line-sphere *collide-cache* s4-0))
                (s3-1 (-> self discs))
                )
            (when (>= f0-12 0.0)
              (set! (-> s5-2 quad) (-> s4-0 best-other-tri intersect quad))
              (let ((s4-1 *x-vector*)
                    (f30-0 9362.286)
                    (s2-0 (vector-y-quaternion! (new 'stack-no-clear 'vector) (-> s3-1 0 orient)))
                    (s1-0 (new 'stack-no-clear 'vector))
                    (f28-0 0.0)
                    (f26-0 (vector-vector-distance gp-2 s5-2))
                    )
                (dotimes (s5-3 8)
                  (vector-rotate-around-axis! s1-0 (the-as quaternion s4-1) f28-0 s2-0)
                  (vector-float*! s1-0 s1-0 f26-0)
                  (vector+! (-> s3-1 0 pts s5-3) gp-2 s1-0)
                  (+! f28-0 f30-0)
                  )
                )
              )
            )
          )
        )
      (let* ((a0-27 0)
             (v1-55 (-> self discs a0-27))
             (gp-3 (-> self discs a0-27 bolt))
             )
        (set! (-> gp-3 base-color) (new 'static 'rgba :r #x78 :g #x78 :b #xff :a #xff))
        (set! (-> gp-3 inner-point-travel-time) (seconds 1))
        (set! (-> gp-3 snap-inner-points?) #t)
        (set! (-> gp-3 fractal-reduction) 0.4)
        (set! (-> gp-3 generate-mode) (the-as uint 1))
        (set! (-> gp-3 appearance) *dark-tower-lightning*)
        (set! (-> gp-3 num-active-spans) 7)
        (dotimes (a0-37 8)
          (set! (-> gp-3 spans data a0-37 random-offset-size-start) 4096.0)
          (set! (-> gp-3 spans-internal data a0-37 num-inner-points) 2)
          (set! (-> gp-3 spans data a0-37 inner-random-offset-size) 4096.0)
          (set! (-> gp-3 span-pts-start data a0-37 quad) (-> v1-55 pts a0-37 quad))
          )
        (set! (-> gp-3 spans data 0 random-offset-size-start) 0.0)
        (set! (-> gp-3 spans data 7 random-offset-size-start) 0.0)
        (set! (-> gp-3 spans-internal data 7 num-inner-points) 0)
        (case (-> v1-55 cur-state)
          (('inactive)
           (if (zero? (lightning-bolt-method-14 gp-3))
               (lightning-bolt-method-13 gp-3 2)
               )
           )
          (('active)
           (if (and (!= (lightning-bolt-method-14 gp-3) 0) (!= (lightning-bolt-method-14 gp-3) 1))
               (lightning-bolt-method-13 gp-3 1)
               )
           )
          )
        (lightning-bolt-method-11 gp-3)
        (lightning-bolt-method-12 gp-3)
        )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (until #f
      (let* ((f30-0 0.15)
             (f28-0 0.19999999)
             (v1-3 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-4 (the-as number (logior #x3f800000 v1-3)))
             (f30-1 (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-4)))))
             )
        (ja-no-eval :group! (-> self draw art-group data 2) :num! (seek! max f30-1) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek! max f30-1))
          )
        )
      )
    #f
    )
  :post (behavior ()
    (transform-post)
    )
  )

(defbehavior dark-world-orb-init-by-other dark-world-orb ((vec vector))
  (let ((scale-vec (new-stack-vector0)))
    (let ((s5-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-8 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec))
      (set! (-> v1-8 prim-core collide-with) (collide-spec))
      (set! (-> v1-8 prim-core action) (collide-action solid rideable))
      (set! (-> v1-8 transform-index) 3)
      (set-vector! (-> v1-8 local-sphere) 0.0 0.0 0.0 81920.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-8)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> self root) s5-0)
    )
  (set! (-> self shock-sound) (new-sound-id))
  (set! (-> self plasma-sound) (new-sound-id))
  (set! (-> self root trans quad) (-> vec quad))
  (quaternion-identity! (-> self root quat))
  (set-vector! scale-vec 4.0 4.0 4.0 1.0)
  (set! (-> self root scale quad) (-> scale-vec quad))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-dark-world-orb" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> self last-attack-id) (the-as uint 0))
  (set! (-> self hit-points) 1.0)
  (set! (-> self movie?) #f)
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1449) self))
  (dotimes (gp-1 2)
    (quaternion-identity! (the-as quaternion (+ (the-as uint (-> self discs 0 orient)) (* 192 gp-1))))
    (set! (-> self discs gp-1 bolt) (new 'process 'lightning-bolt-tower))
    (set! (-> self discs gp-1 cur-state) 'active)
    (init! (-> self discs gp-1 bolt) 8 4 *dark-tower-lightning*)
    )
  (logior! (-> self draw status) (draw-control-status no-draw))
  (go-virtual active)
  )
  )

(deftype darkworld-tower (process-drawable)
  ((puffer?      symbol)
   (puffer-h     handle)
   (jump-y       float)
   (jump-z       float)
   (creak-sound  ambient-sound)
   )
  (:state-methods
    idle
    )
  )


(defstate idle (darkworld-tower)
  :virtual #t
  :trans (behavior ()
    ;(update-trans! (-> self creak-sound) (-> self root trans))
    ;(set-falloff-far! (-> self creak-sound) 163840.0)
    ;(update! (-> self creak-sound))
    )
  :code (behavior ()
    (until #f
      (when (not *dark-forest*)
        (process-deactivate)
      )
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  )

(defbehavior darkworld-tower-init-by-other darkworld-tower ((vec vector))
   (stack-size-set! (-> self main-thread) 128)
   (let ((scale-vec (new-stack-vector0)))
  (let ((s5-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-8 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec crate camera-blocker))
      (set! (-> v1-8 prim-core collide-with) (collide-spec jak enemy player-list tobot))
      (set! (-> v1-8 prim-core action) (collide-action solid rideable))
      (set! (-> v1-8 transform-index) 3)
      (set-vector! (-> v1-8 local-sphere) 0.0 0.0 0.0 245760.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-8)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> self root) s5-0)
    )
  (set! (-> self root trans quad) (-> vec quad))
  (quaternion-identity! (-> self root quat))
  (set-vector! scale-vec 3.0 3.0 3.0 1.0)
  (set! (-> self root scale quad) (-> scale-vec quad))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-darkworldtower" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (ja-no-eval :group! (-> self draw art-group data 2) :num! zero)
  (transform-post)
  (set! (-> self draw light-index) (the-as uint 10))
  (go-virtual idle)
   )
    (none)
)

(deftype dark-tree (darkworld-tower)
  ((amount                    int)
   (gen-i                     int)
   (stored-target-vector   vector :inline)
  )
  (:state-methods
    generate
  )
  (:methods
    (tower-method-1 (_type_) none)
  )
)

(defmethod tower-method-1 ((this dark-tree))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-8 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec crate camera-blocker))
      (set! (-> v1-8 prim-core collide-with) (collide-spec jak player-list tobot))
      (set! (-> v1-8 prim-core action) (collide-action solid rideable))
      (set! (-> v1-8 transform-index) 3)
      (set-vector! (-> v1-8 local-sphere) 0.0 0.0 0.0 245760.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-8)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  (none)
)

(defbehavior dark-tree-init-by-other dark-tree ((vec vector) (amnt int))
  (let ((scale-vec (new-stack-vector0)))
    (set! (-> self amount) amnt)
    (set! (-> self gen-i) 0)
    (set! (-> self stored-target-vector quad) (-> vec quad))
    (tower-method-1 self)
    (set! (-> self root trans quad) (-> vec quad))
    (quaternion-identity! (-> self root quat))
    (set-vector! scale-vec 3.0 3.0 3.0 1.0)
    (set! (-> self root scale quad) (-> scale-vec quad))
    (initialize-skeleton
      self
      (the-as skeleton-group (art-group-get-by-name *level* "skel-darkworldtower" (the-as (pointer level) #f)))
      (the-as pair 0)
      )
    (ja-no-eval :group! (-> self draw art-group data 2) :num! zero)
    (transform-post)
    (set! (-> self draw light-index) (the-as uint 10))
    (go-virtual generate)
  )
  (none)
)

(defstate generate (dark-tree)
  :virtual #t
  :code (behavior ()
    (loop
      (cond
        ((<= (-> self gen-i) (-> self amount))
          (process-spawn darkworld-tower (-> self stored-target-vector) :name "darkworld-tower" *16k-dead-pool*)
          (+! (-> self stored-target-vector y) (meters 47.2400))
          (+! (-> self gen-i) 1)
        )
        (else 
          (go-virtual idle)
        )
      )
      (suspend)
    )
  )
)



(defun spawn-dark-world-forest ()
    (let ((base-1 (new-stack-vector0))
          (towa (new-stack-vector0))
          (towb (new-stack-vector0))
          (towc (new-stack-vector0))
          (towd (new-stack-vector0))
          (towe (new-stack-vector0))
          (towf (new-stack-vector0))
          (towg (new-stack-vector0))
          (towh (new-stack-vector0))
          (towi (new-stack-vector0))
          (towj (new-stack-vector0))
          (towk (new-stack-vector0))
          (towl (new-stack-vector0))
          (towm (new-stack-vector0))
          (town (new-stack-vector0))
          (towo (new-stack-vector0))
          (towp (new-stack-vector0))
          (towq (new-stack-vector0))
          (towr (new-stack-vector0))
          (tows (new-stack-vector0))
          (towt (new-stack-vector0))
          (towu (new-stack-vector0))
          (towv (new-stack-vector0))
          (toww (new-stack-vector0))
          (towx (new-stack-vector0))
          (towy (new-stack-vector0))
          (towz (new-stack-vector0))
          (orb-1 (new-stack-vector0))
         )
         ;base height changes are around 47.2500 meters
        ;;;;MAIN TOWER;;;;
        (set! *dark-forest* #t)
        (set-vector! base-1 (meters 3496.1220) (meters 26.1725) (meters 880.4041) 1.0)
        (process-spawn dark-tree base-1 7 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! orb-1 (meters 3496.1220) (meters 408.105) (meters 880.4041) 1.0)
        (process-spawn dark-world-orb orb-1 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towa (meters 3441.7148) (meters 28.1163) (meters 950.3592) 1.0)
        (process-spawn dark-tree towa 1 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towb (meters 3593.2971) (meters 13.00) (meters 1009.4945) 1.0)
        (process-spawn dark-tree towb 3 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towc (meters 3562.2385) (meters 19.0) (meters 1061.2204) 1.0)
        (process-spawn dark-tree towc 2 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towd (meters 3426.6699) (meters 21.0) (meters 1143.5417) 1.0)
        (process-spawn dark-tree towd 2 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towe (meters 3593.4494) (meters -24.0) (meters 1129.7529) 1.0)
        (process-spawn dark-tree towe 4 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towf (meters 3675.4748) (meters -18) (meters 929.5039) 1.0)
        (process-spawn dark-tree towf 2 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towg (meters 3616.3137) (meters 4) (meters 961.9123) 1.0)
        (process-spawn dark-tree towg 2 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towh (meters 3486.6979) (meters 9) (meters 1035.7639) 1.0)
        (process-spawn dark-tree towh 4 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towi (meters 3527.8188) (meters 19) (meters 1205.6293) 1.0)
        (process-spawn dark-tree towi 2 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towj (meters 3653.7846) (meters -4) (meters 1173.4753) 1.0)
        (process-spawn dark-tree towj 3 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towk (meters 3591.0900) (meters 28.0) (meters 826.3735) 1.0)
        (process-spawn dark-tree towk 2 *16k-dead-pool* :name "darkworld-tower")
        #|(process-spawn dark-tree towk 5 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towl (meters 3630.4025) (meters 29) (meters 811.8972) 1.0)
        (process-spawn dark-tree towl 3 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towm (meters 3544.1823) (meters 24) (meters 769.3019) 1.0)
        (process-spawn dark-tree towm 4 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! town (meters 3754.1186) (meters 32) (meters 760.4947) 1.0)
        (process-spawn dark-tree town 4 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towo (meters 3823.6457) (meters 0) (meters 796.8311) 1.0)
        (process-spawn dark-tree towo 3 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towp (meters 3802.0192) (meters -12) (meters 892.0111) 1.0)
        (process-spawn dark-tree towp 4 *16k-dead-pool* :name "darkworld-tower")
        (set-vector! towq (meters 3691.2065) (meters 10) (meters 1005.6785) 1.0)
        (process-spawn dark-tree towq 5 *16k-dead-pool* :name "darkworld-tower")|#
    )
    (none)
)

;test
; (process-spawn dark-world-orb (target-pos 0) *16k-dead-pool* :name "darkworld-tower")