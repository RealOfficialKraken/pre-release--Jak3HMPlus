;;-*-Lisp-*-
(in-package goal)

;; name: jak3-custom-code.gc

#|IDEAS TO IMPLEMENT

----------------------------------------
GUN MOD - RANDOM OBJECT
----------------------------------------
All projectiles from Jak fire manipys on top, and each
time Jak collects ammunition, it switches the manipy to something else
----------------------------------------
GUN MOD - Alpha Hit
Jak can crit from his projectiles. When this happens, blast a
non-white-screen nuke with a huge radius, but the damage isnt that big
----------------------------------------
----------------------------------------
GUN MOD - CHAIN REACTION
----------------------------------------
Jak's gun shooting has a chance to pop out a gyro burst, but it's different projectiles.
For example, one roll may have it shoot out grenades, or dark blasts, or fireballs. On
the other hand, it could also fire out all nukes in an off chance
----------------------------------------
dark-world objectives
----------------------------------------
gives the player things to do in the dark world.
Like encounter bosses, fight satellites, and to farm
in wascity. Some quests go here, that entail to accessing
areas like the palace or the arena with process-platforms spawned

(GUN MODS TOTAL)
Gun mods can be accessed in the mod-menu, and selected via dpad for the color.
Then, you can choose the gun mods for that specific color, and each of them are different.
Saving the gunmods to the save file might require different fanagling with tasks somehow
|YELLOW|
gunmod-fireball - (chance to spawn raining fireballs on hit location)
gunmod-nukeonly - IMPLEMENTED
gunmod-freeze IMPLEMENTED
|RED|
gunmod-bigshot - IMPLEMENTED
gunmod-sheild - IMPLEMENTED
gunmod-missles - IMPLEMENTED
|BLUE|
gunmod-ammo IMPLEMENTED
gunmod-disperser (chance to spawn a BUNCH of blue shots from the target on hit)
gunmod-minigun (turns blue shots into purple turret shots)
|DARK|
gunmod-morpher (rains peacemaker shots downward)
gunmod-randomshot (spawns a random projectile)
gunmod-reaper (chance to spawn a mini dark maker ship that fires dark-grenades everywhere)

TODO:
- (optional) add to title screen, like a dark ship or enemies in the background, or the rage ghost
- (CRITICAL) Add vin-hints at the wascity-doors, also provide a shop and an extra hidden option for TP-FB, once you take out all of it's legs. Try to make it an actual process that summons a menu
- Add TP-FB. Once you take out terraformer's legs in dark-world, get a dialogue from Vin to do a cloned final boss task, with extra events, without dying. Prize is a guaranteed weapon, sometimes a gun mod
- (CRITICAL) Finish the warp gate level backtracks, with custom entities and minibosses
- (CRITICAL) Add the sounds to the rage-ghost, and the anchor event
- (CRITICAL) Finish making the missions hard
- (CRITICAL) Add more gun mods, it's unknown what variable they'll be attached to
- (CRITICAL) Add a NG+ to continue levelling with your current stats, higher level enemies, and extremely hard story missions
- (CRITICAL) Make TP-FB with the terraformer in dark-world
- (optional) Add a secret code from those who know, to unlock a gun mod
- (optional) Rewrite group-drop!
- (optional) Maybe port the nest worms over to desert and add a worm boss, too

After all of these, the mod will be at a v1.0 state. Mod releasing is determined by Jak 3's open release

BUGS:
- dropped boss/group crates dont reset their vectors
- Bipedal Boss' shield isnt strength 999
- Crystal in hud has no texture
- Blocking plane at course-race doesn't spawn

:CRASHES
- levelup explosion runs out of memory, or happens outside of goal code
- terraformer in dark-world makes auto-saving fail, probably easy fix
|#

(defun-extern freeze-enemies-in-menu! (none))
(defun-extern level-up! int none)
(defun-extern level-up-guns! int none)
(defun-extern level-up-cars! int none)
(defun-extern wasseem-attack-check none)
(defun-extern spawn-brute-artifact none)
(defun-extern pick-random-anchor none)
(defun-extern spawn-rage-ghost none)
(defun-extern boss-leaper! vector none)

(define in-picture-mode? #f)

(defun toggle-picture-mode ()
    (cond
        ((= in-picture-mode? #f)
            (process-grab? *target* #f)
            (set-master-mode 'freeze)
            (kill-by-type hud-map *active-pool*)
            (set! *external-cam-mode* 'pad-0)
            (set! in-picture-mode? #t)
        )
        (else
            (process-release? *target*)
            (when (not (search-process-tree *active-pool* (lambda ((p process)) (type? p hud-map))))
                (process-spawn hud-map :init hud-init-by-other :name "hud-map" :to *target*)
            )
            (set-master-mode 'game)
            (set! *external-cam-mode* #f)
            (set! in-picture-mode? #f)
        )
    )
    (none)
)

(define warp-s1 "???")
(define warp-s2 "???")
(define warp-s3 "???")
(define warp-s4 "???")
(define warp-s5 "???")

(define paused-custom-music? #f)
(define global-volume-level (-> *setting-control* user-default music-volume))

(defun auto-save-delayed ()
    (set! auto-i 0)
    (set! autosave-delayed #t)
    (none)
)

(define short-delay #f)
(define stored-string "")
(define delay-i 0)

(defun delayed-play-continue ((arg0 string))
    (cond
        ((= short-delay #f)
            (set! stored-string arg0)
            (set! short-delay #t)
            (set! delay-i 0)
        )
        (else
            (send-event *target* 'continue (get-continue-by-name *game-info* arg0))
            (set! short-delay #f)
            (set! delay-i 0)
        )
    )
    (none)
)

(define spider-1-vec (new 'static 'vector 
                        :x (meters -34.6815)
                        :y (meters 2.3782)
                        :z (meters -164.6925)
                        :w 1.0))
(define spider-2-vec (new 'static 'vector 
                        :x (meters -50.4494)
                        :y (meters 2.1483)
                        :z (meters -180.6845)
                        :w 1.0))
(define spider-3-vec (new 'static 'vector 
                        :x (meters 42.3747)
                        :y (meters 16.1467)
                        :z (meters -296.8571)
                        :w 1.0))
(define sat-volcano (new 'static 'vector 
                        :x (meters -2.9549)
                        :y (meters 2.7735)
                        :z (meters -134.4601)
                        :w 1.0))

(defun spawn-vin-circle ((vec vector))
    (let ((vin (the manipy 
                (ppointer->process
                    (process-spawn manipy
                    :init
                    manipy-init
                    vec
                    #f
                    (art-group-get-by-name *level* "skel-vin-effect" (the (pointer level) #f))
                    #f
                    0
                    #f
                    :name "vin-effect"))
                    )
                )
            (vscale (new 'static 'vector))
            (qscale (new 'static 'quaternion))
            )
            (set! (-> vscale x) 20.0)
            (set! (-> vscale y) 20.0)
            (set! (-> vscale z) 20.0)
            (send-event vin 'scale vscale)
        )
    (set! spawned-vin-circle? #t)
    (none)
)

(define menu-unlocked? #f)

(define *force-stop-pilot* #f)

(defun km-current-continue ((arg0 string) (arg1 debug-menu-msg))
  (if (= arg1 (debug-menu-msg press))
      (start 'play (get-continue-by-name *game-info* arg0))
      )
  (string= (-> (get-current-continue-forced *game-info*) name) arg0)
  )

(defun camera-locked ((draw? symbol) (cameye? symbol) (grab? symbol))
  (send-event *target* 'draw draw?)
  (when (= cameye? #t)
    (set-setting-by-param *setting-control* 'mode-name 'cam-eye 0 0)
  )
  (when (= grab? #t)
    (set! (-> *target* cam-user-mode) 'fixed)
    (set-setting-by-param *setting-control* 'mode-name 'cam-fixed 0 0)
  )
  (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
  (process-grab? *target* #f)
  (set! camera-locked? #t)
(none)
)

(defun camera-unlocked ()
  (remove-setting-by-arg0 *setting-control* 'mode-name)
  (send-event *target* 'draw #t)
  (process-release? *target*)
  (set! camera-locked? #f)
(none)
)

(defun turn-to-scene-camera ((vec vector) (tpos vector) (lockedup? symbol))
    (send-event *camera* 'teleport-to-vector-start-string vec)
    (set-vector! (-> *target* control trans) (-> tpos x) (-> tpos y) (-> tpos z) 1.0)
    (when lockedup?
        (camera-locked #f #f #t)
    )
)

(defun disable-hudmap ()
  (kill-by-type hud-map *active-pool*)
  (none)
  )

(defun enable-hudmap ()
  (process-spawn hud-map :init hud-init-by-other :name "hud-map" :to *target*)
  (none)
  )

(defun roll-modifierg ()
(let ((rnd (rand-vu-int-range 1 max-modg)))
(when (= rnd 1)
    (set! (-> *game-info* continue-deaths) 1)
)
(when (= rnd 2)
    (set! (-> *game-info* continue-deaths) 2)
)
(when (= rnd 3)
    (set! (-> *game-info* continue-deaths) 3)
)
(when (= rnd 4)
    (set! (-> *game-info* continue-deaths) 4)
)
(when (= rnd 5)
    (set! (-> *game-info* continue-deaths) 5)
)
(when (= rnd 6)
    (set! (-> *game-info* continue-deaths) 6)
)
(when (= rnd 7)
    (set! (-> *game-info* continue-deaths) 7)
)
(when (= rnd 8)
    (set! (-> *game-info* continue-deaths) 8)
)
(when (= rnd 9)
    (set! (-> *game-info* continue-deaths) 9)
)
(when (= rnd 10)
    (set! (-> *game-info* continue-deaths) 10)
)
(when (= rnd 11)
    (set! (-> *game-info* continue-deaths) 11)
)
(when (= rnd 12)
    (set! (-> *game-info* continue-deaths) 12)
)
(when (= rnd 13)
    (set! (-> *game-info* continue-deaths) 13)
)
(when (= rnd 14)
    (set! (-> *game-info* continue-deaths) 14)
)
(when (= rnd 15)
    (set! (-> *game-info* continue-deaths) 15)
)

)
(none)
)

(defun roll-modifierb ()
(let ((rnd (rand-vu-int-range 1 max-modb)))
(when (= rnd 1)
    (set! (-> *game-info* task-deaths) 1)
)
(when (= rnd 2)
    (set! (-> *game-info* task-deaths) 2)
)
(when (= rnd 3)
    (set! (-> *game-info* task-deaths) 3)
)
(when (= rnd 4)
    (set! (-> *game-info* task-deaths) 4)
)
(when (= rnd 5)
    (set! (-> *game-info* task-deaths) 5)
)
(when (= rnd 6)
    (set! (-> *game-info* task-deaths) 6)
)
(when (= rnd 7)
    (set! (-> *game-info* task-deaths) 7)
)
(when (= rnd 8)
    (set! (-> *game-info* task-deaths) 8)
)
(when (= rnd 9)
    (set! (-> *game-info* task-deaths) 9)
)
(when (= rnd 10)
    (set! (-> *game-info* task-deaths) 10)
)
(when (= rnd 11)
    (set! (-> *game-info* task-deaths) 11)
)
(when (= rnd 12)
    (set! (-> *game-info* task-deaths) 12)
)
(when (= rnd 13)
    (set! (-> *game-info* task-deaths) 13)
)
(when (= rnd 14)
    (set! (-> *game-info* task-deaths) 14)
)
(when (= rnd 15)
    (set! (-> *game-info* task-deaths) 15)
)

)
(none)
)

(defun runs-jak3-every-frame () ;;START RUNNING EVERY FRAME
(when ;autosave-delayed
    (and
        *target*
        (not *scene-player*)
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (= in-arena-fight? #f)
        (= in-menu? #f)
        (= autosave-delayed #t)
    )
        (+! auto-i 1)
        (when (= auto-i 600)
            (auto-save-user)
            (set! auto-i 0)
            (set! autosave-delayed #f)
        )
    )


(when (and
        (= camera-locked? #t)
        (= (pause-allowed?) #t)
        (= (paused?) #f)
        *target*
        (not *scene-player*)
        (not mainmenu-camera)
      )
    (set-master-mode 'game)
)

(when *scene-player*
    (when (and (= mushroom-movies-start #f)(rand-vu-percent? 0.03)(= mushroom-movies #t)
      (set! mushroom-movies-start #t)
      (set! mushroom-var (rand-vu-int-range 1 6))
    )
  )
)

(when (and (= menu-unlocked? #f) (task-node-closed? (game-task-node arena-fight-1-resolution)))
    (set! menu-unlocked? #t)
)

(when (= uni-count1 #t)
    (+! uni 1)
    (when (= uni 30)
        (set! uni 0)
        (set! uni-count1 #f)
    )
)

    (when (and 
    (or
    (not (logtest? (-> *game-info* features) (game-feature board)))
    )
    )
    (logior! (-> *game-info* features) (game-feature 
                                                    gun
                                                    board
                                                    board-launch
                                                    board-zap
    ))
    )

(when
    (and
        *target*
        (not *scene-player*)
        (= (paused?) #t)
        *debug-segment*
    )
    (when (= in-picture-mode? #f)
        #|(clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>Press <COLOR_BLUE>X<COLOR_WHITE>+<COLOR_PINK>Square<COLOR_RED> to go into Picture mode~%<COLOR_GREEN>Triangle<COLOR_RED> to exit"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 255 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))|#
    )
    (when
        (and
            (cpad-pressed? 0 triangle)
            (= in-picture-mode? #t)
        )
        (toggle-picture-mode)
        (set-master-mode 'game)
        (process-release? *target*)
        )
    (when
        (and
            (cpad-pressed? 0 x)
            (cpad-pressed? 0 square)
        )
        (toggle-picture-mode)
    )
)


(when 
(and 
(cpad-pressed? 0 r3) ;enter virtual menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #f)
(= in-vin-shop? #f)
(= menu-unlocked? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= on-vehicle? #f)
(= in-dialogue? #f)
(= draw-arena-select #f)
(= in-arena-fight? #f)
(= in-satbattle? #f)
(> (-> *target* fact health) 0.0)
(task-node-closed? (game-task-node arena-fight-1-resolution))
(not (task-node-open? (game-task-node city-blow-barricade-resolution)))
(not (focus-test? *target* pilot))
)
(freeze-enemies-in-menu!)
(set! in-menu? #t)
(camera-locked #f #t #f)
(set! menu-slot 1)
(set! menu-type 0)
)

(when 
(and 
(cpad-pressed? 0 triangle) ;exit virtual menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
)
(set! in-menu? #f)
(kill-by-name "proc-mask-enemyfreeze" *active-pool*)
(camera-unlocked)
(when (= (-> *game-info* total-deaths) 0)
    (level-up-cars! 1)
)
)

(when 
(and 
(cpad-pressed? 0 triangle) ;exit modifiers menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #t)
(= in-gunmods? #f)
(= in-superpowers? #f)
)
(set! menu-slot 0)
(set! in-modifiers? #f)
)

(when 
(and 
(cpad-pressed? 0 triangle) ;exit gunmods menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #t)
(= in-superpowers? #f)
(= in-skill? #f)
)
(set! menu-slot 0)
(set! in-gunmods? #f)
(set! sq-string "")
)

(when 
(and 
(cpad-pressed? 0 triangle) ;exit superpowers menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #t)
(= in-skill? #f)
)
(set! menu-slot 0)
(set! in-superpowers? #f)
(set! in-skill? #f)
)
(when 
(and 
(cpad-pressed? 0 triangle) ;exit skill to superpower menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #t)
)
(set! in-superpowers? #t)
(set! in-skill? #f)
)

;controls

(when 
(and 
(cpad-pressed? 0 x) ;select modifiers
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
(= menu-select 3)
)
(set! in-modifiers? #t)
(set! menu-slot 0)
(set! sq-string "Warp to location!")
)


(when 
(and 
(cpad-pressed? 0 x) ;select gunmods
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
(= menu-select 1)
)
(set! in-gunmods? #t)
(set! menu-slot 0)
(set! sq-string "Attach Gun Mod")
(when (= (-> *game-info* total-deaths) 0)
    (level-up-cars! 1)
)
)

(when 
(and 
(cpad-pressed? 0 x) ;select superpowers
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
(= menu-select 2)
)
(set! in-superpowers? #t)
(set! in-skill? #f)
(set! menu-slot 0)
(set! sq-string "Skill Info")
(when (= (-> *game-info* total-deaths) 0)
    (level-up-cars! 1)
)
)
(when 
(and 
(cpad-pressed? 0 square) ;select skillset inside superpowers
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #t)
(= in-skill? #f)
(= menu-select 2)
)
(set! in-superpowers? #f)
(set! in-skill? #t)
(when (= (-> *game-info* total-deaths) 0)
    (level-up-cars! 1)
)
)


(when ;main select
(and 
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (when ;main-down
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 down)
        )
    (+! menu-select 1)
    (when (> menu-select 3)
        (set! menu-select 1)
    )
    )

    (when ;main-up
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 up)
        )
    (-! menu-select 1)
    (when (< menu-select 1)
        (set! menu-select 3)
    )
    )
)

(when ;modifiers select
(and 
(= in-modifiers? #t)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (when ;modifiers-down
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 down)
        )
    (+! menu-slot 1)
    (when (> menu-slot 4)
        (set! menu-slot 0)
    )
    )

    (when ;modifiers-up
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 up)
        )
    (-! menu-slot 1)
    (when (< menu-slot 0)
        (set! menu-slot 4)
    )
    )
)

(when 
(and
*target*
(not *scene-player*)
(= (paused?) #f)
(= (pause-allowed?) #t)
(= short-delay #t)
)
    (+! delay-i 1)
    (when (= delay-i 30)
        (delayed-play-continue stored-string)
    )
)

(when ;modifiers selection square
(and 
(= in-modifiers? #t)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (cond
        ((and (not (string= warp-s1 "Desert Warp Room")) (task-node-closed? (game-task-node desert-course-race-resolution)))
            (set! warp-s1 "Desert Warp Room")
        )
        ((and (not (string= warp-s2 "Desert Temple")) (task-node-closed? (game-task-node temple-oracle-resolution)))
            (set! warp-s2 "Desert Temple")
        )
        ((and (not (string= warp-s3 "The Naughty Ottsel")) (task-node-closed? (game-task-node city-port-fight-resolution)))
            (set! warp-s3 "The Naughty Ottsel")
        )
        ((and (not (string= warp-s4 "Freedom HQ")) (task-node-closed? (game-task-node city-protect-hq-resolution)))
            (set! warp-s4 "Freedom HQ")
        )
        ((and (not (string= warp-s5 "Infested Tower")) (task-node-closed? (game-task-node city-blow-tower-resolution)))
            (set! warp-s5 "Infested Tower")
        )
    )
    (when (cpad-pressed? 0 square)
        (cond
            ((and (= menu-slot 0) (task-node-closed? (game-task-node desert-course-race-resolution)))
                (set! (-> *run-attack-mods* align-speed) 2.0)
                (set! (-> *run-attack-mods* impact-fric) 0.0)
                (lightjak-get-off-part (target-pos 0))
                (send-event *target* 'draw #f)
                (remove-setting-by-arg0 *setting-control* 'mode-name)
                (set! camera-locked? #f)
                (delayed-play-continue "wasdoors-city")
                (set! in-menu? #f)
                (set! in-modifiers? #f)
                (when (= (-> *game-info* total-deaths) 0)
                    (level-up-cars! 1)
                )
            )
            ((and (= menu-slot 1) (task-node-closed? (game-task-node temple-oracle-resolution)))
                (set! (-> *run-attack-mods* align-speed) 2.0)
                (set! (-> *run-attack-mods* impact-fric) 0.0)
                (lightjak-get-off-part (target-pos 0))
                (send-event *target* 'draw #f)
                (remove-setting-by-arg0 *setting-control* 'mode-name)
                (set! camera-locked? #f)
                (delayed-play-continue "templex-start")
                (set! in-menu? #f)
                (set! in-modifiers? #f)
                (when (= (-> *game-info* total-deaths) 0)
                    (level-up-cars! 1)
                )
            )
            ((and (= menu-slot 2) (task-node-closed? (game-task-node city-port-fight-resolution)))
                (set! (-> *run-attack-mods* align-speed) 2.0)
                (set! (-> *run-attack-mods* impact-fric) 0.0)
                (lightjak-get-off-part (target-pos 0))
                (send-event *target* 'draw #f)
                (remove-setting-by-arg0 *setting-control* 'mode-name)
                (set! camera-locked? #f)
                (delayed-play-continue "ctyport-hiphog-no-hiphog")
                (set! in-menu? #f)
                (set! in-modifiers? #f)
                (when (= (-> *game-info* total-deaths) 0)
                    (level-up-cars! 1)
                )
            )
            ((and (= menu-slot 3) (task-node-closed? (game-task-node city-protect-hq-resolution)))
                (set! (-> *run-attack-mods* align-speed) 2.0)
                (set! (-> *run-attack-mods* impact-fric) 0.0)
                (lightjak-get-off-part (target-pos 0))
                (send-event *target* 'draw #f)
                (remove-setting-by-arg0 *setting-control* 'mode-name)
                (set! camera-locked? #f)
                (delayed-play-continue "ctyslumc-freehq-exit")
                (set! in-menu? #f)
                (set! in-modifiers? #f)
                (when (= (-> *game-info* total-deaths) 0)
                    (level-up-cars! 1)
                )
            )
            ((and (= menu-slot 4) (task-node-closed? (game-task-node city-blow-tower-resolution)))
                (set! (-> *run-attack-mods* align-speed) 2.0)
                (set! (-> *run-attack-mods* impact-fric) 0.0)
                (lightjak-get-off-part (target-pos 0))
                (send-event *target* 'draw #f)
                (remove-setting-by-arg0 *setting-control* 'mode-name)
                (set! camera-locked? #f)
                (delayed-play-continue "towera-start")
                (set! in-menu? #f)
                (set! in-modifiers? #f)
                (when (= (-> *game-info* total-deaths) 0)
                    (level-up-cars! 1)
                )
            )
            (else
                (format #t "ERROR AT MODIFIER MENU SLOT ~D, PLEASE CONTACT DEV" menu-slot)
            )
        )
    )
)

;make vin quest close after completing artifact race 1
(when
    (and
        (task-node-closed? (game-task-node desert-artifact-race-1-introduction))
        (or
            (task-node-open? (game-task-node desert-vin-quest-introduction))
            (task-node-open? (game-task-node desert-vin-quest-resolution))
        )
        (task-node-close! (game-task-node desert-vin-quest-resolution) #t)
    )
)

(when (= mm-hint-1 #t)
    (+! mm-hint-1i 1)
    (when (not *scene-player*)
        (set! mm-hint-1 #f)
        (set! mm-hint-1i 0)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>Press <COLOR_RED>O<COLOR_WHITE> to toggle <COLOR_CYAN>Mushroom Movies<COLOR_WHITE>!"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 35 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.525)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (when (= mm-hint-1i 500)
            (set! mm-hint-1i 0)
            (set! mm-hint-1 #f)
        )
)

(when
    (and
        *scene-player*
        (cpad-pressed? 0 circle)
    )
    (cond
        ((= mushroom-movies #t)
            (set! mushroom-movies #f)
        )
        (else
            (set! mushroom-movies #t)
        )
    )
    (set! mm-hint #t)
    (set! mm-hinti 0)
)

(when
    (and
        *scene-player*
        (= mm-hint #t)
    )
    (+! mm-hinti 1)
    (when (= mm-hint-1 #t)
        (set! mm-hint-1i 0)
        (set! mm-hint-1 #f)
    )
    (when (or
            (and (> mm-hinti 0) (< mm-hinti 50))
            (and (> mm-hinti 55) (< mm-hinti 105))
          )
        (cond
            ((= mushroom-movies #t)
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_CYAN>Mushroom Movies<COLOR_GREEN> Enabled"
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 35 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.475)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            )
            (else
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_CYAN>Mushroom Movies<COLOR_RED> Disabled"
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 35 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.475)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            )
        )
    )
    (when (>= mm-hinti 105)
        (set! mm-hinti 0)
        (set! mm-hint #f)
    )
)

(when
    (and
        (not *scene-player*)
        (or
            (= mm-hint #t)
            (> mm-hinti 0)
        )
    )
    (set! mm-hint #f)
    (set! mm-hinti 0)
)

(when 
    (and
        (not (task-node-closed? (game-task-node factory-boss-resolution)))
        (task-node-closed? (game-task-node factory-boss-introduction))
        (!= (-> (level-get-target-inside *level*) name) 'lfacrm2)
        (!= (-> (level-get-target-inside *level*) name) 'factoryd)
    )
    (task-node-open! (game-task-node factory-assault-resolution) #t)
)

(when ;gunmods select
(and 
(= in-modifiers? #f)
(= in-gunmods? #t)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (when ;gunmods-down
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 down)
        )
    (+! menu-slot 1)
    (when (> menu-slot 11)
        (set! menu-slot 0)
    )
    )

    (when ;gunmods-up
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 up)
        )
    (-! menu-slot 1)
    (when (< menu-slot 0)
        (set! menu-slot 11)
    )
    )
)

(when ;superpowers select
(and 
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #t)
(= in-skill? #f)
)
    (when ;superpowers-down
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 down)
        )
    (+! menu-slot 1)
    (when (> menu-slot 2)
        (set! menu-slot 0)
    )
    )

    (when ;superpowers-up
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 up)
        )
    (-! menu-slot 1)
    (when (< menu-slot 0)
        (set! menu-slot 2)
    )
    )
)

(when 
    (and
        (= in-tutorial? #t)
        (= tutorial-msg 0)
        *target*
        (not *scene-player*)
    )
        (+! tutorial-freeze 1)
        (when (= tutorial-freeze 1)
            (process-grab? *target* #f)
            (set! r3-noto #t)
            (set! anim-noto -20)
            (set! notoi 0)
        )
        (when (and (>= tutorial-freeze 20) (< tutorial-freeze 700))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Jak now has a main level, that being his Notoriety~%<COLOR_YELLOW>His level affects with how powerful Jak is~%Slay enemies and complete missions to earn XP"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        );<COLOR_ORANGE>Press <COLOR_WHITE>R3<COLOR_ORANGE>to view your levels at any time~%<COLOR_RED>There are no level caps
        (when (and (>= tutorial-freeze 730) (< tutorial-freeze 1300))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Press <COLOR_WHITE>L3<COLOR_ORANGE> to view your levels at any time~%<COLOR_RED>There are no level caps"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (or (= tutorial-freeze 1300)(and (cpad-pressed? 0 l3) (>= tutorial-freeze 0)))
            (process-release? *target*)
            (set! tutorial-freeze 0)
            (set! in-tutorial? #f)
        )
)

(when
    (and
        *target*
        (= (pause-allowed?) #t)
        (not *scene-player*)
        (= (paused?) #f)
        (= mine-boss-fireball? #t)
    )
        (when (rand-vu-percent? 0.0017)
            (spawn-mine-fireball)
        )
    )

(when 
    (and
        (= in-tutorial? #t)
        (= tutorial-msg 1)
        *target*
        (= (pause-allowed?) #t)
        (not *scene-player*)
    )
        (+! tutorial-freeze 1)
        (when (= tutorial-freeze 1)
            (process-grab? *target* #f)
        )
        (when (>= tutorial-freeze 120)
            (send-event *camera* 'teleport-to-vector-start-string
                (new 'static 'vector
                :x (meters 2287.0690)
                :y (meters 41.7641)
                :z (meters -492.7042)
                :w 1.0)
                )
        )
        (when (= tutorial-freeze 119)
            (let (
                    (gp-0 (the-as process #f))
                    (tut-pos1 
                        (new 'static 'vector 
                        :x (meters 2302.5278) 
                        :y (meters 37.5870)
                        :z (meters -492.3220)
                        :w 1.0)
                        )
                    )
                (spawn-gun-upgrade tut-pos1 1.0)
                (task-arrow-custom tut-pos1 #t)
            )
        )
        (when (and (>= tutorial-freeze 119) (< tutorial-freeze 900))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Gun Upgrades aren't obtained by regular means~%<COLOR_YELLOW>You'll get the red and yellow gun at the start~%But thats it~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>Weapons are collected by fighting powerful monsters and bosses, found from~%enemy dropped crates"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (= tutorial-freeze 899)
            (kill-by-name "upgrade-collectable" *active-pool*)
            (kill-by-name "task-arrow-custom" *default-pool*)
        )
        (when (= tutorial-freeze 925)
            (let ((vec11 (new 'static 'vector
                 :x (meters 2302.5278) 
                 :y (meters 37.5870)
                 :z (meters -492.3220)
                 :w 1.0))
            )
                 (drop-crate vec11 1)
                 )
        )
        (when (= tutorial-freeze 1300)
            (kill-by-name "crate-tier1" *active-pool*)
            (let ((vec11 (new 'static 'vector
                 :x (meters 2302.5278) 
                 :y (meters 37.5870)
                 :z (meters -492.3220)
                 :w 1.0))
            )
                 (drop-crate vec11 2)
                 )
        )
        (when (= tutorial-freeze 1725)
            (kill-by-name "crate-tier2" *active-pool*)
            (let ((vec11 (new 'static 'vector
                 :x (meters 2302.5278) 
                 :y (meters 37.5870)
                 :z (meters -492.3220)
                 :w 1.0))
            )
                 (drop-crate vec11 3)
                 )
        )
        (when (and (>= tutorial-freeze 925) (< tutorial-freeze 2025))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Crates are dropped from <COLOR_YELLOW>enemies, civilians, and bosses~%<COLOR_ORANGE>There are three tiers, an urn, a crate, and black crates being highest~%<COLOR_YELLOW>They can also drop weapons and gun mods, but mainly collectables"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (or (>= tutorial-freeze 2025)(and (cpad-pressed? 0 x) (>= tutorial-freeze 400)))
            (process-release? *target*)
            (kill-by-name "manipy-tutorial1" *default-pool*)
            (kill-by-name "upgrade-collectable" *active-pool*)
            (kill-by-name "task-arrow-custom" *default-pool*)
            (kill-by-name "crate-tier3" *active-pool*)
            (kill-by-name "crate-tier2" *active-pool*)
            (kill-by-name "crate-tier1" *active-pool*)
            (set! tutorial-freeze 0)
            (set! in-tutorial? #f)
        )
    )

    (when 
    (and
        (= in-tutorial? #t)
        (= tutorial-msg 2)
        *target*
        (= (pause-allowed?) #t)
        (not *scene-player*)
    )
        (+! tutorial-freeze 1)
        (when (= tutorial-freeze 1)
            (process-grab? *target* #f)
        )
        (when (= tutorial-freeze 119)
            (let ((marauderc (the manipy
                (ppointer->process (process-spawn manipy
                 :init
                 manipy-init
                 (new 'static 'vector
                 :x (meters 2358.6489)
                 :y (meters 49.1541)
                 :z (meters -507.0516)
                 :w 1.0)
                 #f
                 (art-group-get-by-name *level* "skel-marauder" (the (pointer level) #f))
                 #f
                 0
                 #f
                 :name "manipy-tutorial1"
                 :from *default-dead-pool*
                 :stack-size #x18000
                 )))))
                 ;(send-event marauderc 'anim-mode 'loop)
                 ;(send-event marauderc 'art-joint-anim "dp-bipedal-shield-out-idle-ja")
                 )
        )
        (when (and (>= tutorial-freeze 119)(< tutorial-freeze 2700))
            (send-event *camera* 'teleport-to-vector-start-string
                (new 'static 'vector
                :x (meters 2377.1108)
                :y (meters 55.1747)
                :z (meters -507.0074)
                :w 1.0)
                )
        )
        (when (and (>= tutorial-freeze 119)(< tutorial-freeze 900))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Enemies also have levels, too! As you complete missions,~%enemy levels will drastically spike up~%<COLOR_CYAN>Farming is highly recommended~%~%~%~%~%~%~%~%~%~%~%~%~%"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (= tutorial-freeze 900)
            (kill-by-name "manipy-tutorial1" *default-pool*)
        )
        (when (= tutorial-freeze 960)
            (let ((marauderc (the manipy
                (ppointer->process (process-spawn manipy
                 :init
                 manipy-init
                 (new 'static 'vector
                 :x (meters 2358.6489)
                 :y (meters 49.1541)
                 :z (meters -507.0516)
                 :w 1.0)
                 #f
                 (art-group-get-by-name *level* "skel-neo-sat" (the (pointer level) #f))
                 #f
                 0
                 #f
                 :name "manipy-tutorial1"
                 :from *default-dead-pool*
                 :stack-size #x18000
                 )))))
                 ;(send-event marauderc 'anim-mode 'loop)
                 ;(send-event marauderc 'art-joint-anim "dp-bipedal-shield-out-idle-ja")
                 )
        )
        (when (and (>= tutorial-freeze 960)(< tutorial-freeze 1900))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_CYAN>In the Wasteland, enemies and cars will start off with a level 2 below your <COLOR_ORANGE>Notoriety~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_CYAN>Then gradually, <COLOR_RED>enemy levels will raise up slowly, but endlessly~%<COLOR_YELLOW>Don't take too long in the Wasteland!"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (= tutorial-freeze 1900)
            (kill-by-name "manipy-tutorial1" *default-pool*)
            (kill-by-name "manipy-tutorial2" *default-pool*)
        )
        (when (= tutorial-freeze 1920)
            (spawn-artifact 
                (new 'static 'vector
                 :x (meters 2358.6489)
                 :y (meters 49.1541)
                 :z (meters -507.0516)
                 :w 1.0))
        )
        (when (and (>= tutorial-freeze 1920)(< tutorial-freeze 2800))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Your desert vehicles have a scanner to find <COLOR_YELLOW>points of interest<COLOR_ORANGE>.~%As you complete through main missions, you'll unlock more <COLOR_YELLOW>points of interest<COLOR_ORANGE> throughout the wasteland~%"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (or (= tutorial-freeze 2800)(and (cpad-pressed? 0 x) (>= tutorial-freeze 400)))
            (kill-by-name "manipy-tutorial1" *default-pool*)
            (kill-by-name "manipy-tutorial2" *default-pool*)
            (kill-by-name "was-artifact" *default-pool*)
            (process-release? *target*)
            (set! tutorial-freeze 0)
            (set! in-tutorial? #f)
        )
    )

    (when 
    (and
        (= in-tutorial? #t)
        (= tutorial-msg 3)
        *target*
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (not *scene-player*)
    )
        (+! tutorial-freeze 1)
        (when (= tutorial-freeze 1)
            ;(process-grab? *target* #t)
            (set! tutorial-freeze 0)
            (set! in-tutorial? #f)
        )
        (when (= tutorial-freeze 60)
            (let ((bipedal (the manipy
                (ppointer->process (process-spawn manipy
                 :init
                 manipy-init
                 (new 'static 'vector
                 :x (meters 2358.6489)
                 :y (meters 49.1541)
                 :z (meters -507.0516)
                 :w 1.0)
                 #f
                 (art-group-get-by-name *level* "skel-dp-bipedal" (the (pointer level) #f))
                 #f
                 0
                 #f
                 :name "manipy-tutorial1"
                 :from *default-dead-pool*
                 :stack-size #x18000
                 )))))
                 ;(send-event bipedal 'anim-mode 'loop)
                 ;(send-event bipedal 'art-joint-anim "dp-bipedal-shield-out-idle-ja")
                 )
        )
        (when (and (>= tutorial-freeze 60)(< tutorial-freeze 1200))
        )
        (when (= tutorial-freeze 9990)
            (process-release? *target*)
            (set! tutorial-freeze 0)
            (set! in-tutorial? #f)
        )
    
    )
(when (and (= in-superpowers? #f)(= cars-level 0)(= in-modifiers? #f)(= in-gunmods? #f)(= in-skill? #f))
(when (= in-menu? #t)
    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
(draw-sprite2d-xy s2-0 0 345 730 27 (new 'static 'rgba :a #x40) #x3fffff)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
)
(when (and (= in-superpowers? #f)(!= cars-level 0)(= in-modifiers? #f)(= in-gunmods? #f)(= in-skill? #f))

(when (and (= in-menu? #t))
    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
(draw-sprite2d-xy s2-0 0 5 730 108 (new 'static 'rgba :a #x40) #x3fffff)
(draw-sprite2d-xy s2-0 0 315 730 27 (new 'static 'rgba :a #x40) #x3fffff)
)
)
(when 
(and
(= in-menu? #t) ;says HM+ title at the top
(not (cpad-hold? 0 triangle))
(not (cpad-hold? 0 x))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit~%<COLOR_ORANGE>(<COLOR_BLUE>X<COLOR_ORANGE>) <COLOR_YELLOW>Select Option"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (Pressing Triangle)
(cpad-hold? 0 triangle)
(not (cpad-hold? 0 x))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_GREEN> Back/Exit~%<COLOR_ORANGE>(<COLOR_BLUE>X<COLOR_ORANGE>) <COLOR_YELLOW>Select Option"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (Pressing X)
(not (cpad-hold? 0 triangle))
(cpad-hold? 0 x)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit~%<COLOR_ORANGE>(<COLOR_BLUE>X<COLOR_ORANGE>) <COLOR_GREEN>Select Option"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
)

(when (and (or (= in-superpowers? #t)(= in-modifiers? #t)(= in-gunmods? #t))(= in-skill? #f))
(when 
(and
(= in-menu? #t) ;says HM+ title at the top w/ square input
(not (cpad-hold? 0 triangle))
(not (cpad-hold? 0 square))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit~%<COLOR_ORANGE>(<COLOR_PINK>SQUARE<COLOR_ORANGE>) <COLOR_RED>~s"
    sq-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (pressing triangle)
(cpad-hold? 0 triangle)
(not (cpad-hold? 0 square))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_GREEN> Back/Exit~%<COLOR_ORANGE>(<COLOR_PINK>SQUARE<COLOR_ORANGE>) <COLOR_RED>~s"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (pressing square input)
(not (cpad-hold? 0 triangle))
(cpad-hold? 0 square)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit~%<COLOR_ORANGE>(<COLOR_PINK>SQUARE<COLOR_ORANGE>) <COLOR_GREEN>Warp to location!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
)

(when (and (= in-superpowers? #f)(= in-skill? #t))
(when 
(and
(= in-menu? #t) ;says HM+ title at the top
(not (cpad-hold? 0 triangle))
(not (cpad-hold? 0 square))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (Pressing Triangle)
(cpad-hold? 0 triangle)
(not (cpad-hold? 0 square))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_GREEN> Back/Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (Pressing X)
(not (cpad-hold? 0 triangle))
(cpad-hold? 0 square)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
)

(when ;displays main menu options
(and 
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
(!= cars-level 0)
)
    (when
    (= menu-select 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Select Menu:~%~%<COLOR_BLUE>Gun Mods <COLOR_WHITE>(<)~%<COLOR_PINK>Skills <COLOR_WHITE>(<)~%<COLOR_RED>Fast-Travel Warps <COLOR_WHITE>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-select 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Select Menu:~%~%<COLOR_BLUE>Gun Mods <COLOR_GREEN>(<)~%<COLOR_PINK>Skills <COLOR_WHITE>(<)~%<COLOR_RED>Fast-Travel Warps <COLOR_WHITE>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-select 2)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Select Menu:~%~%<COLOR_BLUE>Gun Mods <COLOR_WHITE>(<)~%<COLOR_PINK>Skills <COLOR_GREEN>(<)~%<COLOR_RED>Fast-Travel Warps <COLOR_WHITE>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-select 3)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Select Menu:~%~%<COLOR_BLUE>Gun Mods <COLOR_WHITE>(<)~%<COLOR_PINK>Skills <COLOR_WHITE>(<)~%<COLOR_RED>Fast-Travel Warps <COLOR_GREEN>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when ;displays modifier menu options
(and 
(= in-menu? #t)
(= in-modifiers? #t)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
)
(with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
(draw-sprite2d-xy s2-0 0 5 730 108 (new 'static 'rgba :a #x40) #x3fffff)
(draw-sprite2d-xy s2-0 0 315 730 27 (new 'static 'rgba :a #x40) #x3fffff)
)
    (when
    (= menu-slot 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>~S<COLOR_GREEN>(<)~%<COLOR_ORANGE>~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>"
        warp-s1
        warp-s2
        warp-s3
        warp-s4
        warp-s5
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-slot 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_GREEN>(<)~%<COLOR_ORANGE>~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>"
        warp-s1
        warp-s2
        warp-s3
        warp-s4
        warp-s5
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-slot 2)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_GREEN>(<)~%<COLOR_ORANGE>~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>"
        warp-s1
        warp-s2
        warp-s3
        warp-s4
        warp-s5
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-slot 3)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_GREEN>(<)~%<COLOR_ORANGE>~S<COLOR_WHITE>(<)<COLOR_ORANGE>"
        warp-s1
        warp-s2
        warp-s3
        warp-s4
        warp-s5
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-slot 4)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_WHITE>(<)<COLOR_ORANGE>~%~S<COLOR_GREEN>(<)~%<COLOR_ORANGE>"
        warp-s1
        warp-s2
        warp-s3
        warp-s4
        warp-s5
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)


(when ;displays gunmod menu options
(and 
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #t)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
(draw-sprite2d-xy s2-0 0 5 730 20 (new 'static 'rgba :a #x40) #x3fffff)
(draw-sprite2d-xy s2-0 70 25 100 290 (new 'static 'rgba :a #x40) #x3fffff)
(draw-sprite2d-xy s2-0 0 315 730 27 (new 'static 'rgba :a #x40) #x3fffff)
)
    (when (task-node-closed? (game-task-node mody-fireball))
        (cond
            ((= gunmod-fireball #t)
                (set! yellow-1s "<COLOR_GREEN>Catapult Fury")
            )
            (else
                (set! yellow-1s "<COLOR_RED>Catapult Fury")
            )
        )
    )
    (when (task-node-closed? (game-task-node mody-nukeonly))
        (cond
            ((= gunmod-nukeonly #t)
                (set! yellow-2s "<COLOR_GREEN>Critical Shot")
            )
            (else
                (set! yellow-2s "<COLOR_RED>Critical Shot")
            )
        )
    )
    (when (task-node-closed? (game-task-node mody-freeze))
        (cond
            ((= gunmod-freeze #t)
                (set! yellow-3s "<COLOR_GREEN>Silver Freeze")
            )
            (else
                (set! yellow-3s "<COLOR_RED>Silver Freeze")
            )
        )
    )
    (when (task-node-closed? (game-task-node modr-bigshot))
        (cond
            ((= gunmod-bigshot #t)
                (set! red-1s "<COLOR_GREEN>Big Shot")
            )
            (else
                (set! red-1s "<COLOR_RED>Big Shot")
            )
        )
    )
    (when (task-node-closed? (game-task-node modr-shield))
        (cond
            ((= gunmod-sheild #t)
                (set! red-2s "<COLOR_GREEN>Quad Shot")
            )
            (else
                (set! red-2s "<COLOR_RED>Quad Shot")
            )
        )
    )
    (when (task-node-closed? (game-task-node modr-missles))
        (cond
            ((= gunmod-missles #t)
                (set! red-3s "<COLOR_GREEN>Commando Shot")
            )
            (else
                (set! red-3s "<COLOR_RED>Commando Shot")
            )
        )
    )
    (when (task-node-closed? (game-task-node modb-ammo))
        (cond
            ((= gunmod-ammo #t)
                (set! blue-1s "<COLOR_GREEN>Ammo Shark")
            )
            (else
                (set! blue-1s "<COLOR_RED>Ammo Shark")
            )
        )
    )
    (when (task-node-closed? (game-task-node modb-disperser))
        (cond
            ((= gunmod-disperser #t)
                (set! blue-2s "<COLOR_GREEN>Disperser")
            )
            (else
                (set! blue-2s "<COLOR_RED>Disperser")
            )
        )
    )
    (when (task-node-closed? (game-task-node modb-airstrike))
        (cond
            ((= gunmod-airstrike #t)
                (set! blue-3s "<COLOR_GREEN>Portable Minigun")
            )
            (else
                (set! blue-3s "<COLOR_RED>Portable Minigun")
            )
        )
    )
    (when (task-node-closed? (game-task-node modd-morpher))
        (cond
            ((= gunmod-morpher #t)
                (set! dark-1s "<COLOR_GREEN>PM Burst")
            )
            (else
                (set! dark-1s "<COLOR_RED>PM Burst")
            )
        )
    )
    (when (task-node-closed? (game-task-node modd-random))
        (cond
            ((= gunmod-randomshot #t)
                (set! dark-2s "<COLOR_GREEN>Random Shot")
            )
            (else
                (set! dark-2s "<COLOR_RED>Random Shot")
            )
        )
    )
    (when (task-node-closed? (game-task-node modd-reaper))
        (cond
            ((= gunmod-reaper #t)
                (set! dark-3s "<COLOR_GREEN>Reaper")
            )
            (else
                (set! dark-3s "<COLOR_RED>Reaper")
            )
        )
    )
    (cond
    ((= menu-slot 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_GREEN>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (cond
        ((and
        (task-node-closed? (game-task-node modr-bigshot))
        (cpad-pressed? 0 square)
        )
            (set! gunmod-bigshot #t)
        )
        )
        (when
        (and
        (task-node-closed? (game-task-node modr-bigshot))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-bigshot #f)
        )
    )
    ((= menu-slot 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_GREEN>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node modr-shield))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-sheild #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node modr-shield))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-sheild #f)
        )
        )
    ((= menu-slot 2)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_GREEN>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node modr-missles))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-missles #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node modr-missles))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-missles #f)
        )
        )
    ((= menu-slot 3)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_GREEN>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node mody-fireball))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-fireball #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node mody-fireball))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-fireball #f)
        )
        )
    ((= menu-slot 4)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_GREEN>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node mody-nukeonly))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-nukeonly #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node mody-nukeonly))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-nukeonly #f)
        )
        )
    ((= menu-slot 5)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_GREEN>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node mody-freeze))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-freeze #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node mody-freeze))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-freeze #f)
        )
        )
    ((= menu-slot 6)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_RED>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node modb-ammo))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-ammo #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node modb-ammo))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-ammo #f)
        )
        )
    ((= menu-slot 7)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_RED>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node modb-disperser))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-disperser #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node modb-disperser))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-disperser #f)
        )
        )
    ((= menu-slot 8)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_RED>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node modb-airstrike))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-airstrike #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node modb-airstrike))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-airstrike #f)
        )
        )
    ((= menu-slot 9)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_RED>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node modd-morpher))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-morpher #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node modd-morpher))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-morpher #f)
        )
        )
    ((= menu-slot 10)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_RED>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node modd-random))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-randomshot #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node modd-random))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-randomshot #f)
        )
        )
    ((= menu-slot 11)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>RED:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_YELLOW>YELLOW:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%"
        red-1s
        red-2s
        red-3s
        yellow-1s
        yellow-2s
        yellow-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>BLUE:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%~%<COLOR_PINK>DARK:~%~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_WHITE>(<)~%<COLOR_ORANGE>~s <COLOR_RED>(<)"
        blue-1s
        blue-2s
        blue-3s
        dark-1s
        dark-2s
        dark-3s
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 120 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (when
        (and
        (task-node-closed? (game-task-node modd-reaper))
        (cpad-pressed? 0 square)
        )
        (set! gunmod-reaper #t)
        )
        (when
        (and
        (task-node-closed? (game-task-node modd-reaper))
        (cpad-pressed? 0 circle)
        )
        (set! gunmod-reaper #f)
        )
        )
    )
)

(when ;displays skill options
(and 
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #t)
(= in-skill? #f)
)
    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
(draw-sprite2d-xy s2-0 0 5 730 108 (new 'static 'rgba :a #x40) #x3fffff)
(draw-sprite2d-xy s2-0 0 315 730 27 (new 'static 'rgba :a #x40) #x3fffff)
)
    (when
    (= menu-slot 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>All Skills:~%~%<COLOR_ORANGE>Notoriety <COLOR_GREEN>Level <COLOR_CYAN> ~d <COLOR_GREEN>(<)~%<COLOR_RED>Guns <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_WHITE>(<)~%<COLOR_PINK>Vehicle <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_WHITE>(<)"
        notoriety-level
        guns-level
        cars-level
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-slot 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>All Skills:~%~%<COLOR_ORANGE>Notoriety <COLOR_GREEN>Level <COLOR_CYAN> ~d <COLOR_WHITE>(<)~%<COLOR_RED>Guns <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_GREEN>(<)~%<COLOR_PINK>Vehicle <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_WHITE>(<)"
        notoriety-level
        guns-level
        cars-level
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-slot 2)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>All Skills:~%~%<COLOR_ORANGE>Notoriety <COLOR_GREEN>Level <COLOR_CYAN> ~d <COLOR_WHITE>(<)~%<COLOR_RED>Guns <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_WHITE>(<)~%<COLOR_PINK>Vehicle <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_GREEN>(<)"
        notoriety-level
        guns-level
        cars-level
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when ;displays one skill with all of its attributes
(and 
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #t)
)
    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
(draw-sprite2d-xy s2-0 0 5 730 348 (new 'static 'rgba :a #x40) #x3fffff)
)
    (cond
        ((>= notoriety-level 10)
            (set! skill-noto-string1 "<COLOR_GREEN>Jak gets 3 percent increased HP per level")
        )
        (else
            (set! skill-noto-string1 "<COLOR_RED>LOCKED")
        )
    )
    (cond
        ((>= notoriety-level 25)
            (set! skill-noto-string2 "<COLOR_GREEN>Notoriety level now affects the damage of weapons")
        )
        (else
            (set! skill-noto-string2 "<COLOR_RED>LOCKED")
        )
    )
    (cond
        ((>= notoriety-level 40)
            (set! skill-noto-string3 "<COLOR_GREEN>10x increased melee damage")
        )
        (else
            (set! skill-noto-string3 "<COLOR_RED>LOCKED")
        )
    )
    (cond
        ((>= notoriety-level 60)
            (set! skill-noto-string4 "<COLOR_GREEN>Melee attacks can make time slow down for a second")
        )
        (else
            (set! skill-noto-string4 "<COLOR_RED>LOCKED")
        )
    )
    (when
    (= menu-slot 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Notoriety Level:<COLOR_CYAN> ~d ~%~%<COLOR_GREEN>Your Notoriety Level unlocks more things the higher it gets.~%Fighting enemies will become easier, and crates will drop with better chances.~%~%Enemies will also have a level for themselves, all tied to the areas they're in~%~%<COLOR_YELLOW>Complete Main-Line/Side Missions, and level other skills to earn XP~%~%~%<COLOR_ORANGE>At Level 10~%~s~%<COLOR_ORANGE>At Level 25~%~s~%<COLOR_ORANGE>At Level 40~%~s~%<COLOR_ORANGE>At Level 60~%~S"
        notoriety-level
        skill-noto-string1
        skill-noto-string2
        skill-noto-string3
        skill-noto-string4
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (draw-XP-bar)
        (when 
            (or
                (!= noto-draw-x 190)
                (!= noto-draw-y 60)
                (!= guns-draw-x 190)
                (!= guns-draw-y 60)
                (!= car-draw-x 190)
                (!= car-draw-y 60)
            )
                (set! noto-draw-x 190)
                (set! noto-draw-y 60)
                (set! guns-draw-x 190)
                (set! guns-draw-y 60)
                (set! car-draw-x 190)
                (set! car-draw-y 60)
            )
    )
    (cond
        ((>= guns-level 4)
            (set! skill-guns-string1 "<COLOR_GREEN>Pickups give more ammunition")
        )
        (else
            (set! skill-guns-string1 "<COLOR_RED>LOCKED")
        )
    )
    (cond
        ((>= guns-level 9)
            (set! skill-guns-string2 "<COLOR_GREEN>Fire rate increased per level on semi auto weapons")
        )
        (else
            (set! skill-guns-string2 "<COLOR_RED>LOCKED")
        )
    )
    (cond
        ((>= guns-level 16)
            (set! skill-guns-string3 "<COLOR_GREEN>Projectiles have a 6 percent chance to spawn another projectile")
        )
        (else
            (set! skill-guns-string3 "<COLOR_RED>LOCKED")
        )
    )
    (cond
        ((>= guns-level 25)
            (set! skill-guns-string4 "<COLOR_GREEN>Huge ammo bags")
        )
        (else
            (set! skill-guns-string4 "<COLOR_RED>LOCKED")
        )
    )
    (when
    (= menu-slot 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>Guns:<COLOR_CYAN> ~d ~%~%<COLOR_ORANGE>Jak's guns can be upgraded to fire faster, bigger, and stronger.~%~%<COLOR_YELLOW>Deplete ammo to earn XP~%~%~%<COLOR_ORANGE>At Level 4~%~s~%<COLOR_ORANGE>At Level 9~%~s~%<COLOR_ORANGE>At Level 16~%~s~%<COLOR_ORANGE>At Level 25~%~S"
        guns-level
        skill-guns-string1
        skill-guns-string2
        skill-guns-string3
        skill-guns-string4
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (draw-XP-bar)
        (when 
            (or
                (!= noto-draw-x 190)
                (!= noto-draw-y 60)
                (!= guns-draw-x 190)
                (!= guns-draw-y 60)
                (!= car-draw-x 190)
                (!= car-draw-y 60)
            )
                (set! noto-draw-x 190)
                (set! noto-draw-y 60)
                (set! guns-draw-x 190)
                (set! guns-draw-y 60)
                (set! car-draw-x 190)
                (set! car-draw-y 60)
            )
    )
    (cond
        ((>= cars-level 2)
            (set! skill-cars-string1 "<COLOR_GREEN>Turbos can also repair your vehicle")
        )
        (else
            (set! skill-cars-string1 "<COLOR_RED>LOCKED")
        )
    )
    (cond
        ((>= cars-level 6)
            (set! skill-cars-string2 "<COLOR_GREEN>Flat 34 percent vehicle boost recharge")
        )
        (else
            (set! skill-cars-string2 "<COLOR_RED>LOCKED")
        )
    )
    (cond
        ((>= cars-level 14)
            (set! skill-cars-string3 "<COLOR_GREEN>Flat 12 percent increased vehicle boost strength")
        )
        (else
            (set! skill-cars-string3 "<COLOR_RED>LOCKED")
        )
    )
    (when
    (= menu-slot 2)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>Vehicles:<COLOR_CYAN> ~d ~%~%<COLOR_ORANGE>All of Jak's cars get boost upgrades per level. Vehicle Guns can do more damage!~%~%<COLOR_YELLOW>Earn reputation while on a vehicle to earn XP~%~%~%<COLOR_ORANGE>At Level 2~%~s~%<COLOR_ORANGE>At Level 6~%~s~%<COLOR_ORANGE>At Level 14~%~s"
        cars-level
        skill-cars-string1
        skill-cars-string2
        skill-cars-string3
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (draw-XP-bar)
        (when 
            (or
                (!= noto-draw-x 190)
                (!= noto-draw-y 60)
                (!= guns-draw-x 190)
                (!= guns-draw-y 60)
                (!= car-draw-x 190)
                (!= car-draw-y 60)
            )
                (set! noto-draw-x 190)
                (set! noto-draw-y 60)
                (set! guns-draw-x 190)
                (set! guns-draw-y 60)
                (set! car-draw-x 190)
                (set! car-draw-y 60)
            )
    )
)

(when 
    (and 
        (= (-> *game-info* total-deaths) 0)
        (not (focus-test? *target* pilot))
        (= menu-unlocked? #t)
        (= on-vehicle? #f)
        *target*
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (not *scene-player*)
        (task-node-closed? (game-task-node arena-fight-1-resolution))
        (= in-menu? #f)
    )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Press <COLOR_WHITE>R3 <COLOR_RED>to view the HeroMode+ stats!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
#|
(when 
    (and 
        (= (-> *game-info* total-deaths) 0)
        (= in-main-menu? #t)
        (= on-vehicle? #f)
        *target*
        (not *scene-player*)
        (= in-menu? #f)
    )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "      <COLOR_RED>Hero<COLOR_WHITE>Mode<COLOR_RED>+~%~%~%         <COLOR_WHITE>Made By ~%            <COLOR_CYAN>Kraken"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 330 253 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)|#

(when (and (= (-> *game-info* total-deaths) 0)(= menu-unlocked? #t)(= on-vehicle? #f)(not *scene-player*)(= in-menu? #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "~%~%<COLOR_WHITE>Welcome to <COLOR_BLUE>Hero<COLOR_RED>Mode<COLOR_CYAN>+~%<COLOR_GREEN>Made by Kraken~%~%<COLOR_CYAN>RPG Elements have been added~%Information about your levels can be accessed in the <COLOR_ORANGE>Skills<COLOR_CYAN> tab~%~%The new way to get weapons is to find them in enemy-dropped~%crates, which can be found in any tier.~%<COLOR_PINK>Black crates<COLOR_CYAN> are unlocked after <COLOR_ORANGE>Notoriety Lv.<COLOR_YELLOW> 18~%~%<COLOR_CYAN>Gun Mods are new additions that mod the <COLOR_GREEN>type<COLOR_CYAN> of each colored gun.~%They only mod the specified colored weapon, and~%it becomes more powerful with each one~%attached~%~%They can be found very rarely in black crates only, or by~%completing certain challenges in the future.~%~%Enemies also have a level, so be careful treading into certain areas~%<COLOR_ORANGE>Main missions are now <COLOR_RED>very difficult<COLOR_ORANGE>, and certain outlier levels~%can be incredibly difficult, but Leveling can make~%a difference!~%~%<COLOR_GREEN>Have fun! - <COLOR_BLUE>Kraken"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 90 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.300)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
(draw-sprite2d-xy s2-0 0 93 730 238 (new 'static 'rgba :a #x40) #x3fffff)
)
)

(when (and 
(= in-debug? #t)
*debug-segment* 
(= in-desert-game-task? #t)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>in-desert-game-task? <COLOR_GREEN>#t"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 70 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-debug? #t)
*debug-segment* 
(= in-desert-game-task? #f)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>in-desert-game-task? <COLOR_RED>#f"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 70 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-debug? #t)
*debug-segment* 
(= hud-timer-on? #f)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>hud-timer-on? <COLOR_RED>#f"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 80 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-debug? #t)
*debug-segment* 
(= hud-timer-on? #t)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>hud-timer-on? <COLOR_GREEN>#t"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 80 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-debug? #t)
*debug-segment* 
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>cdr-satbattle = <COLOR_YELLOW>~d<COLOR_ORANGE>/18000"
    cdr-i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 90 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-debug? #t)
*debug-segment* 
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Mod Script Active!~%~%<COLOR_YELLOW>continue-deaths = <COLOR_ORANGE>~D~%<COLOR_YELLOW>task-deaths = <COLOR_ORANGE>~D~%<COLOR_YELLOW>total-deaths = <COLOR_ORANGE>~D~%<COLOR_RED>enemy-noto = ~d"
    (-> *game-info* continue-deaths)
    (-> *game-info* task-deaths)
    (-> *game-info* total-deaths)
    enemy-noto
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 1 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)


(when 
    (and
        (= desert-spawn-mission-deserta #t) ;exit the task marauder mission when far away
        (task-node-closed? (game-task-node desert-spawn-task-deserta-goto-artifact))
        (>= (vector-vector-distance (new 'static 'vector
                    :x (meters 2539.2421)
                    :y (meters 23.0453)
                    :z (meters 3332.9597)
                    :w 1.0
                    )
                     (target-pos 0)) 2500000.0)
    )
    (task-node-open! (game-task-node desert-spawn-task-deserta-goto-artifact) #t)
    (set! desert-spawn-mission-deserta #f)
    )

(when 
    (and
        (= desert-spawn-mission-oasis #t) ;exit the task marauder mission when far away
        (task-node-closed? (game-task-node desert-spawn-task-oasis-goto-artifact))
        (>= (vector-vector-distance (new 'static 'vector
                    :x (meters 638.2655)
                    :y (meters 14.8769)
                    :z (meters 2522.8432)
                    :w 1.0
                    )
                        (target-pos 0)
                        )
                        2500000.0
                        )
    )
    (task-node-open! (game-task-node desert-spawn-task-oasis-goto-artifact) #t)
    (set! desert-spawn-mission-oasis #f)
    )

    (when
        (and
            (= r3-hints #t)
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
        )
            (+! r3-hinti 1)
            (let ((ani-num 0))
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "~s) <COLOR_WHITE>New Skills Unlocked!"
                hint-string
                )
                (when (< r3-hinti 0)
                    (set! ani-num r3-hinti)
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* ani-num 270 0.0 (font-color default) (font-flags shadow kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            )
            (+! r3-hinti2 1)
            (when (>= r3-hinti2 35)
            (cond
                ((string= hint-string "<COLOR_YELLOW>(R3")
                    (set! hint-string "<COLOR_ORANGE>(R3")
                    (set! r3-hinti2 0)
                )
                (else
                    (set! hint-string "<COLOR_YELLOW>(R3")
                    (set! r3-hinti2 0)
                )
            )
            (when (>= r3-hinti 800)
                (set! r3-hints #f)
            )
            (when (= in-menu? #t)
                (set! r3-hints #f)
            )
        )
    )

    (when
        (and
            (task-node-open? (game-task-node desert-interceptors-attack-exclude))
            (= weather-dark-mode #f)
        )
        (task-node-close! (game-task-node desert-interceptors-attack-exclude) #t)
    )
    (when
        (and
            (not (task-node-open? (game-task-node desert-interceptors-attack-exclude)))
            (= weather-dark-mode #t)
            (= tpfb-active #f)
        )
        (task-node-open! (game-task-node desert-interceptors-attack-exclude) #t)
    )

    (when
        (and
            (task-node-open? (game-task-node wascity-gungame-introduction))
            (<= (vector-vector-distance 
                    (new 'static 'vector
                    :x (meters 1594.60)
                    :y (meters 21.1)
                    :z (meters -411.96)
                    :w 1.0) 
                    (target-pos 0)
                    )
                    30000.0)
        )
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_GREEN>Triangle:<COLOR_WHITE>~%Talk to Kleiver"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (when (cpad-pressed? 0 triangle)
                (set! in-dialogue? #t)
                (camera-locked #f #f #f)
                (set-vector! 
                    (-> *target* control trans) 
                    (meters 1601.7684) 
                    (meters 25.36) 
                    (meters -426.1642) 
                    1.0)
                (send-event *camera* 
                            'teleport-to-vector-start-string 
                            (new 'static 'vector 
                            :x (meters 1593.6910) 
                            :y (meters 23.9904) 
                            :z (meters -408.8620))
                            )
                (set! di-s "So, you boys want me to join you on a quest?")
                (set! di-s2 "Well I don't think I've got the guts for it,") 
                (set! di-s3 "pal.")
                (set! di-s4 "")
                (set! log-id 1)
                (set! log-sec 0)
                (set! (-> *game-info* side-enemies-killed?) 0)
                (disable-hudmap)
            )
        )

        (when 
            (and
            (= in-dialogue? #t)
            )
            (when (or 
                    (= log-id 1)
                    (= log-id 2)
                    )
                (send-event *camera* 
                            'teleport-to-vector-start-string 
                            (new 'static 'vector 
                            :x (meters 1593.6910) 
                            :y (meters 23.9904) 
                            :z (meters -408.8620))
                            )
            )
            )

        (when
            (and
                (= in-dialogue? #t)
                (= log-id 1)
                (cpad-pressed? 0 x)
            )
                (+! log-sec 1)
                (when (= log-sec 1)
                    (set! di-s "I don't know if you bone-heads can tell, but")
                    (set! di-s2 "all of our desert vehicles have an automatic scanner") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 2)
                    (set! di-s "It'll always keep an eye out for desert artifacts")
                    (set! di-s2 "So I don't need your advice") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 3)
                    (set! di-s "We also have a real BIG puppy right here,")
                    (set! di-s2 "in the city") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 4)
                    (set! di-s "In fact, I might have something for the both of us")
                    (set! di-s2 "--but you're gonna do something for ME, first.")
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 5)
                    (set! di-s "I'll take it you're alright with that")
                    (set! di-s2 "")
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 6)
                    (set! di-s "This might even win you some new toys for")
                    (set! di-s2 "your effort")
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 7)
                    (set! di-s "I've got me good eyes lookin on a new set")
                    (set! di-s2 "of flashy ivories.")
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 8)
                    (set! di-s "There ain't much life out there in the desert,")
                    (set! di-s2 "but I've traveled inside of this harsh volcano")
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 9)
                    (set! di-s "If you can find it, there are some buggers")
                    (set! di-s2 "who's skin can work as a fine set of armor") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 10)
                    (set! di-s "Go get me 16 of those Lava Toads, and I'll")
                    (set! di-s2 "see about this speck I have scanned")
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 11)
                    (set! in-dialogue? #f)
                    (camera-unlocked)
                    (set! log-id 0)
                    (set-vector! 
                    (-> *target* control trans) 
                    (meters 1593.8527) 
                    (meters 21.6836) 
                    (meters -408.5743) 
                    1.0)
                    (task-node-close! (game-task-node wascity-gungame-introduction) #t)
                    (process-spawn hud-map :init hud-init-by-other :name "hud-map" :to *target*)
                    (r3-hint)
                )
            )

            (when
        (and
            (task-node-open? (game-task-node wascity-kleeverquest-lavatoad-res))
            (<= (vector-vector-distance 
                    (new 'static 'vector
                    :x (meters 1594.60)
                    :y (meters 21.1)
                    :z (meters -411.96)
                    :w 1.0) 
                    (target-pos 0)
                    )
                    30000.0)
        )
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_GREEN>Triangle:<COLOR_WHITE>~%Talk to Kleiver"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (when (cpad-pressed? 0 triangle)
                (set! in-dialogue? #t)
                (camera-locked #f #f #f)
                (set-vector! 
                    (-> *target* control trans) 
                    (meters 1601.7684) 
                    (meters 25.36) 
                    (meters -426.1642) 
                    1.0)
                (send-event *camera* 
                            'teleport-to-vector-start-string 
                            (new 'static 'vector 
                            :x (meters 1593.6910) 
                            :y (meters 23.9904) 
                            :z (meters -408.8620))
                            )
                (set! di-s "Mmm, good ivories make good money, too")
                (set! di-s2 "Maybe ye can get the rest for me") 
                (set! di-s3 "")
                (set! di-s4 "")
                (set! log-id 2)
                (set! log-sec 0)
                (mission-complete? 230)
                (disable-hudmap)
            )
        )

            (when
            (and
                (= in-dialogue? #t)
                (= log-id 2)
                (cpad-pressed? 0 x)
            )
                (+! log-sec 1)
                (when (= log-sec 1)
                    (set! di-s "There is a rarity in collecting manta-ray skins")
                    (set! di-s2 "") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 2)
                    (set! di-s "But there be an even rarer one")
                    (set! di-s2 "The albino manta-ray") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 3)
                    (set! di-s "To really make this new armor, ye need to")
                    (set! di-s2 "hunt down 4 albinos for me, then I'll lead") 
                    (set! di-s3 "you guys to a nice artifact out in the desert")
                    (set! di-s4 "")
                )
                (when (= log-sec 4)
                    (set! di-s "I last saw them back in that volcano")
                    (set! di-s2 "hiding around other manta-rays") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 5)
                    (set! in-dialogue? #f)
                    (camera-unlocked)
                    (set! log-id 0)
                    (set-vector! 
                    (-> *target* control trans) 
                    (meters 1593.8527) 
                    (meters 21.6836) 
                    (meters -408.5743) 
                    1.0)
                    (process-spawn hud-map :init hud-init-by-other :name "hud-map" :to *target*)
                    (task-node-close! (game-task-node wascity-kleeverquest-lavatoad-res) #t)
                    (r3-hint)
                )
            )

            (when
        (and
            (task-node-open? (game-task-node wascity-kleeverquest-mantaray-res))
            (<= (vector-vector-distance 
                    (new 'static 'vector
                    :x (meters 1594.60)
                    :y (meters 21.1)
                    :z (meters -411.96)
                    :w 1.0) 
                    (target-pos 0)
                    )
                    30000.0)
        )
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_GREEN>Triangle:<COLOR_WHITE>~%Talk to Kleiver"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (when (cpad-pressed? 0 triangle)
                (set! in-dialogue? #t)
                (camera-locked #f #f #f)
                (set-vector! 
                    (-> *target* control trans) 
                    (meters 1601.7684) 
                    (meters 25.36) 
                    (meters -426.1642) 
                    1.0)
                (send-event *camera* 
                            'teleport-to-vector-start-string 
                            (new 'static 'vector 
                            :x (meters 1593.6910) 
                            :y (meters 23.9904) 
                            :z (meters -408.8620))
                            )
                (set! di-s "Aye, this is nice... and fresh")
                (set! di-s2 "") 
                (set! di-s3 "")
                (set! di-s4 "")
                (set! log-id 3)
                (set! log-sec 0)
                (mission-complete? 250)
                (disable-hudmap)
            )
        )

            
        (when
            (and
                (= in-dialogue? #t)
                (= log-id 3)
                (cpad-pressed? 0 x)
            )
                (+! log-sec 1)
                (when (= log-sec 1)
                    (set! di-s "You boys don't understand")
                    (set! di-s2 "how much this means to me") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 2)
                    (set! di-s "HA! You bone-chewers actually fell for that")
                    (set! di-s2 "") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 3)
                    (set! di-s "You did me fine with these though, so")
                    (set! di-s2 " I'll make ye a deal") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 4)
                    (set! di-s "There's a real knuckle dragger out there")
                    (set! di-s2 "who keeps messing with our catches")
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 5)
                    (set! di-s "Their vehicles are getting stronger,")
                    (set! di-s2 "and they are starting to beat us to artifacts") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 6)
                    (set! di-s "So instead of giving you the artifact I've")
                    (set! di-s2 "had me eye on, I'll give you a different one") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 7)
                    (set! di-s "This artifact is completely safe")
                    (set! di-s2 "go get em, heroes")
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 8)
                    (set! in-dialogue? #f)
                    (camera-unlocked)
                    (set! log-id 0)
                    (set-vector! 
                    (-> *target* control trans) 
                    (meters 1593.8527) 
                    (meters 21.6836) 
                    (meters -408.5743) 
                    1.0)
                    (process-spawn hud-map :init hud-init-by-other :name "hud-map" :to *target*)
                    (task-node-close! (game-task-node wascity-kleeverquest-mantaray-res) #t)
                    (r3-hint)
                )
            )

(when (and
        (task-node-open? (game-task-node wascity-kleeverquest-marauders))
        *target*
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (not *scene-player*)
        (= desert-spawn-mission-deserta #f)
      )
      (spawn-deserta-artifact)
)

(when
        (and
            (task-node-open? (game-task-node wascity-kleeverquest-marauders-res))
            (<= (vector-vector-distance 
                    (new 'static 'vector
                    :x (meters 1594.60)
                    :y (meters 21.1)
                    :z (meters -411.96)
                    :w 1.0) 
                    (target-pos 0)
                    )
                    30000.0)
        )
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_GREEN>Triangle:<COLOR_WHITE>~%Talk to Kleiver"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (when (cpad-pressed? 0 triangle)
                (set! in-dialogue? #t)
                (camera-locked #f #f #f)
                (set-vector! 
                    (-> *target* control trans) 
                    (meters 1601.7684) 
                    (meters 25.36) 
                    (meters -426.1642) 
                    1.0)
                (send-event *camera* 
                            'teleport-to-vector-start-string 
                            (new 'static 'vector 
                            :x (meters 1593.6910) 
                            :y (meters 23.9904) 
                            :z (meters -408.8620))
                            )
                (set! di-s "Mates you were completely outnumbered,")
                (set! di-s2 "yet ye bested em and came out stronger") 
                (set! di-s3 "I admire that")
                (set! di-s4 "")
                (set! log-id 4)
                (set! log-sec 0)
                (mission-complete? 500)
                (disable-hudmap)
            )
        )

    (when
            (and
                (= in-dialogue? #t)
                (= log-id 4)
                (cpad-pressed? 0 x)
            )
                (+! log-sec 1)
                (when (= log-sec 1)
                    (set! di-s "Maybe you're top enough to best the Goredrinker")
                    (set! di-s2 "He's been a rabid dog since those gateways") 
                    (set! di-s3 "started opening")
                    (set! di-s4 "")
                )
                (when (= log-sec 2)
                    (set! di-s "Those portals over there, they ain't ours")
                    (set! di-s2 "Something big is going on...") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 3)
                    (set! di-s "You could be of use to us")
                    (set! di-s2 "But for the final time, you'll prove") 
                    (set! di-s3 "yourself by taking on the Goredrinker")
                    (set! di-s4 "")
                )
                (when (= log-sec 4)
                    (set! di-s "Damos and I are the only ones who have bested him")
                    (set! di-s2 "so far, and he keeps coming back in the same spot")
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 5)
                    (set! di-s "Slay the Goredrinker at least once, then I'll come along")
                    (set! di-s2 "But you'll also have to get Damas on board, too") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 6)
                    (set! di-s "I'm not going unless he is coming with")
                    (set! di-s2 "") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 7)
                    (set! di-s "Here's the hideaway")
                    (set! di-s2 "")
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 8)
                    (set! in-dialogue? #f)
                    (camera-unlocked)
                    (set! log-id 0)
                    (set-vector! 
                    (-> *target* control trans) 
                    (meters 1593.8527) 
                    (meters 21.6836) 
                    (meters -408.5743) 
                    1.0)
                    (process-spawn hud-map :init hud-init-by-other :name "hud-map" :to *target*)
                    (task-node-close! (game-task-node wascity-kleeverquest-marauders-res) #t)
                    (r3-hint)
                )
            )

(when (and
    (task-node-open? (game-task-node wascity-kleeverquest-bruteboss))
    *target*
    (= (paused?) #f)
    (= (pause-allowed?) #t)
    (not *scene-player*)
    (= desert-spawn-mission-brute #f)
    )
    (spawn-brute-artifact)
)

(when
        (and
            (task-node-open? (game-task-node wascity-kleeverquest-bruteboss-res))
            (<= (vector-vector-distance 
                    (new 'static 'vector
                    :x (meters 1594.60)
                    :y (meters 21.1)
                    :z (meters -411.96)
                    :w 1.0) 
                    (target-pos 0)
                    )
                    30000.0)
        )
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_GREEN>Triangle:<COLOR_WHITE>~%Talk to Kleiver"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (when (cpad-pressed? 0 triangle)
                (set! in-dialogue? #t)
                (camera-locked #f #f #f)
                (set-vector! 
                    (-> *target* control trans) 
                    (meters 1601.7684) 
                    (meters 25.36) 
                    (meters -426.1642) 
                    1.0)
                (send-event *camera* 
                            'teleport-to-vector-start-string 
                            (new 'static 'vector 
                            :x (meters 1593.6910) 
                            :y (meters 23.9904) 
                            :z (meters -408.8620))
                            )
                (set! di-s "Nice work boys, get some good toys out of this?")
                (set! di-s2 "") 
                (set! di-s3 "")
                (set! di-s4 "")
                (set! log-id 5)
                (set! log-sec 0)
                (set! (-> *game-info* side-enemies-killed?) 0)
                (mission-complete? 1500)
                (disable-hudmap)
            )
        )

     (when
            (and
                (= in-dialogue? #t)
                (= log-id 5)
                (cpad-pressed? 0 x)
            )
                (+! log-sec 1)
                (when (= log-sec 1)
                    (set! di-s "Well I don't care")
                    (set! di-s2 "Go talk to Damas and get him to") 
                    (set! di-s3 "come with you")
                    (set! di-s4 "")
                )
                (when (= log-sec 2)
                    (set! di-s "Whatever it is you need help with...")
                    (set! di-s2 "") 
                    (set! di-s3 "")
                    (set! di-s4 "")
                )
                (when (= log-sec 3)
                    (set! in-dialogue? #f)
                    (camera-unlocked)
                    (set! log-id 0)
                    (set-vector! 
                    (-> *target* control trans) 
                    (meters 1593.8527) 
                    (meters 21.6836) 
                    (meters -408.5743) 
                    1.0)
                    (process-spawn hud-map :init hud-init-by-other :name "hud-map" :to *target*)
                    (task-node-close! (game-task-node wascity-gungame-resolution) #t)
                    (auto-save-user)
                )
            )

(when
    (and
        (= load-delay-1 #t)
        *target*
        (not *scene-player*)
        (= (paused?) #f)
        (= (pause-allowed?) #t)
    )
    (+! load-i 1)
    (when (= load-i 1)
        (set! xp-draw-override #t)
    )
    (when (= load-i 300)
        (set! load-i 0)
        (set! load-delay-1 #f)
        (set! xp-draw-override #f)
    )
    )

;quest params for kliever

(when 
    (and
        (= in-menu? #t)
        (= in-modifiers? #f)
        (= in-gunmods? #f)
        (= in-superpowers? #f)
        (= in-skill? #f)
        (task-node-closed? (game-task-node wascity-gungame-introduction))
        (not (task-node-closed? (game-task-node wascity-gungame-resolution)))
    )
    (cond 
    ((task-node-open? (game-task-node wascity-kleeverquest-lavatoad))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>Current Quest:~%<COLOR_YELLOW>Gather Lava Toad Skins <COLOR_GREEN>~d/16"
        (-> *game-info* side-enemies-killed?)
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
            (draw-sprite2d-xy s2-0 0 120 730 58 (new 'static 'rgba :a #x40) #x3fffff)
        )
    )
    ((task-node-open? (game-task-node wascity-kleeverquest-mantaray))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>Current Quest:~%<COLOR_YELLOW>Slay <COLOR_WHITE>Albino<COLOR_YELLOW> Manta-Rays <COLOR_GREEN>~d/4"
        (-> *game-info* side-enemies-killed?)
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
            (draw-sprite2d-xy s2-0 0 120 730 58 (new 'static 'rgba :a #x40) #x3fffff)
        )
    )
    ((task-node-open? (game-task-node wascity-kleeverquest-marauders))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>Current Quest:~%<COLOR_YELLOW>Go to the Artifact that Kleiver marked on your map"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
            (draw-sprite2d-xy s2-0 0 120 730 58 (new 'static 'rgba :a #x40) #x3fffff)
        )
    )
    ((task-node-open? (game-task-node wascity-kleeverquest-bruteboss))
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_CYAN>Current Quest:~%<COLOR_YELLOW>Slay The Goredrinker <COLOR_GREEN>0/1"
        (-> *game-info* side-enemies-killed?)
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
            (draw-sprite2d-xy s2-0 0 120 730 58 (new 'static 'rgba :a #x40) #x3fffff)
        )
    )
    (else
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_GREEN>Current Quest Completed, return to Kleiver"
        (-> *game-info* side-enemies-killed?)
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                        (bucket-id particles)
                                        )
            (draw-sprite2d-xy s2-0 0 120 730 58 (new 'static 'rgba :a #x40) #x3fffff)
        )
    )

    )
)

(when 
(and 
(= in-dialogue? #t)
(= dialogue-choice #f)
(not (cpad-hold? 0 x))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>~S~%~S~%~S~%~S~%~%<COLOR_GREEN>Ok"
    di-s
    di-s2
    di-s3
    di-s4
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 300 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                    (bucket-id particles)
                                    )
        (draw-sprite2d-xy s2-0 0 290 730 88 (new 'static 'rgba :a #x40) #x3fffff)
        )
)

(when 
(and 
(= in-dialogue? #t)
(= dialogue-choice #f)
(cpad-hold? 0 x)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>~S~%~S~%~S~%~S~%~%<COLOR_YELLOW>Ok"
    di-s
    di-s2
    di-s3
    di-s4
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 300 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                    (bucket-id particles)
                                    )
        (draw-sprite2d-xy s2-0 0 290 730 88 (new 'static 'rgba :a #x40) #x3fffff)
        )
)

(when 
(and 
(= in-dialogue? #t)
(= dialogue-choice #t)
)
    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                (bucket-id particles)
                                )
    (when (= choice-given? #t)
        (draw-sprite2d-xy s2-0 230 200 300 78 (new 'static 'rgba :a #x91) #x3fffff)
        (draw-sprite2d-xy s2-0 230 278 300 1 (new 'static 'rgba :r 255 :g 255 :b 255 :a #x91) #x3fffff)
        (draw-sprite2d-xy s2-0 230 200 300 1 (new 'static 'rgba :r 255 :g 255 :b 255 :a #x91) #x3fffff)
        (draw-sprite2d-xy s2-0 230 200 1 78 (new 'static 'rgba :r 255 :g 255 :b 255 :a #x91) #x3fffff)
        (draw-sprite2d-xy s2-0 511 200 2 78 (new 'static 'rgba :r 255 :g 255 :b 255 :a #x91) #x3fffff)
    )
    )
    (cond 
        ((= choice-given? #t)
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_WHITE>~S~%~S~%~S~%~S~%~%"
            di-s
            di-s2
            di-s3
            di-s4
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            ;; reset bucket settings prior to drawing - font won't do self for us, and
            ;; draw-raw-image can sometimes mess them up. (intro sequence)
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 300 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                            (bucket-id particles)
                                            )
                (draw-sprite2d-xy s2-0 0 290 730 88 (new 'static 'rgba :a #x40) #x3fffff)
                )
        )
        (else
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_WHITE>~S~%~S~%~S~%~S~%~%<COLOR_YELLOW>Ok"
            di-s
            di-s2
            di-s3
            di-s4
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            ;; reset bucket settings prior to drawing - font won't do self for us, and
            ;; draw-raw-image can sometimes mess them up. (intro sequence)
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 300 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                            (bucket-id particles)
                                            )
                (draw-sprite2d-xy s2-0 0 290 730 88 (new 'static 'rgba :a #x40) #x3fffff)
                )
        )
    )
    (when (cpad-pressed? 0 circle)
        (close-vin-shop!)
    )
    (when (= choice-given? #t)
        (when (cpad-pressed? 0 up)
            (cond
                ((> dialogue-select 0)
                    (-! dialogue-select 1)
                )
                (else
                    (set! dialogue-select choice-max)
                )
            )
        )
        (when (cpad-pressed? 0 down)
            (cond
                ((and (< dialogue-select 3) (< dialogue-select choice-max))
                    (+! dialogue-select 1)
                )
                (else
                    (set! dialogue-select 0)
                )
            )
        )
        (cond
            ((= dialogue-select 0)
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_GREEN>~S~%~%<COLOR_WHITE>~S~%~%~S~%~%~S"
                di-c1
                di-c2
                di-c3
                di-c4
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                ;; reset bucket settings prior to drawing - font won't do self for us, and
                ;; draw-raw-image can sometimes mess them up. (intro sequence)
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 505 215 0.0 (font-color default) (font-flags right shadow kerning large))))
                    (set! (-> font-ctx scale) 0.225)
                    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                                (bucket-id particles)
                                                )
                    )
            )
            ((= dialogue-select 1)
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_WHITE>~S~%~%<COLOR_GREEN>~S<COLOR_WHITE>~%~%~S~%~%~S"
                di-c1
                di-c2
                di-c3
                di-c4
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                ;; reset bucket settings prior to drawing - font won't do self for us, and
                ;; draw-raw-image can sometimes mess them up. (intro sequence)
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 505 215 0.0 (font-color default) (font-flags right shadow kerning large))))
                    (set! (-> font-ctx scale) 0.225)
                    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                                (bucket-id particles)
                                                )
                    )
            )
            ((= dialogue-select 2)
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_WHITE>~S~%~%~S~%~%<COLOR_GREEN>~S<COLOR_WHITE>~%~%~S"
                di-c1
                di-c2
                di-c3
                di-c4
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                ;; reset bucket settings prior to drawing - font won't do self for us, and
                ;; draw-raw-image can sometimes mess them up. (intro sequence)
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 505 215 0.0 (font-color default) (font-flags right shadow kerning large))))
                    (set! (-> font-ctx scale) 0.225)
                    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                                (bucket-id particles)
                                                )
                    )
            )
            ((= dialogue-select 3)
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_WHITE>~S~%~%~S~%~%~S~%~%<COLOR_GREEN>~S"
                di-c1
                di-c2
                di-c3
                di-c4
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                ;; reset bucket settings prior to drawing - font won't do self for us, and
                ;; draw-raw-image can sometimes mess them up. (intro sequence)
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 505 215 0.0 (font-color default) (font-flags right shadow kerning large))))
                    (set! (-> font-ctx scale) 0.225)
                    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                                (bucket-id particles)
                                                )
                    )
            )
        )
    )
)


(when 
(and 
(= in-dialogue? #t)
(not (cpad-hold? 0 x))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------~%~%~%~%~%~%~%~%~%-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    di-s
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 285 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------~%~%~%~%~%~%~%~%~%-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    di-s
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 253 285 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= in-dialogue? #t)
(cpad-hold? 0 x)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------~%~%~%~%~%~%~%~%~%-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    di-s
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 285 0.0 (font-color default) (font-flags middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= in-dialogue? #t)
(cpad-hold? 0 x)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------~%~%~%~%~%~%~%~%~%-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    di-s
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 253 285 0.0 (font-color default) (font-flags middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
#|
    (when
        (and
        (task-node-closed? (game-task-node wascity-pre-game-wait))
        (not (task-node-closed? (game-task-node wascity-pre-game-post-game)))
        (not *scene-player*)
        *target*
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        )
            (wasseem-attack-check)
        )|#


    (when (task-node-open? (game-task-node arena-fight-3-introduction)) ;hack for wasstadc arena fight
        (let ((vec (new 'static 'vector :x (meters 2325.2958) :y (meters 48.0426) :z (meters -413.0069) :w 1.0)))
            (when (<= (vector-vector-distance (target-pos 0) vec) 30000.0)
                (process-spawn scene-player :init scene-player-init "arena-fight-3-intro" #t "wasstada-pre-fight-1" :name "scene-player")
                (task-node-close! (game-task-node arena-fight-3-training) 'event)
            )
        )
    )

    (when 
        (and
            (or
                (= weather-dark-mode #t)
                (= in-volcano-level? #t)
                (= in-mine-level? #t)
                (= in-factory-level? #t)
            )
            (or
                (= (-> *time-of-day-context* overide-enable) #f)
                (= (-> *mood-control* overide-weather-flag) #f)
                (!= (-> *time-of-day-context* mode) (the-as time-of-day-palette-id 5))
                (!= (-> *time-of-day-context* time) 19.0)
            )
        )
            (send-event (ppointer->process *time-of-day*) 'change 'hour 19)
            (set! (-> *time-of-day-context* mode) (the-as time-of-day-palette-id 5))
            (send-event (ppointer->process *time-of-day*) 'change 'ratio 0.0)
            (set! (-> *time-of-day-context* overide-enable) #t)
            (set! (-> *mood-control* overide-weather-flag) #t)
            (set! (-> *overide-mood-fog-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   fog-color
                                   x
                                   )
                               255.0
                               )
            (set! (-> *overide-mood-fog-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   fog-color
                                   y
                                   )
                               0.0
                               )
            (set! (-> *overide-mood-fog-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   fog-color
                                   z
                                   )
                               255.0
                               )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2))
                                   lgt-color
                                   y
                                   )
                               1.0
                               )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   lgt-color
                                   y
                                   )
                               0.0
                               )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   lgt-color
                                   z
                                   )
                               1.0
                               )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   lgt-color
                                   w
                                   )
                               1.0
                               )
            ;(spawn-riftring-doors)
        )

        (when
            (and
                (= weather-dark-mode #t)
                (rand-vu-percent? 0.000221)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                (task-node-closed? (game-task-node desert-vin-quest-resolution))
                (!= (-> (level-get-target-inside *level*) name) 'wasdoors)
                (not *rage-ghost*)
            )
                (spawn-rage-ghost)
            )

        (when
            (and
                (not (search-process-tree *active-pool* (lambda ((p process)) (type? p rage-ghost))))
                *rage-ghost*
            )
                (set! *rage-ghost* #f)
            )

        (when
            (and
                (= weather-dark-mode #f)
                (= white-mode #f)
                (= onfoot-battle? #f)
                (= mainmenu-camera #f)
                (= in-volcano-level? #f)
                (= in-mine-level? #f)
                (= in-mine-boss? #f)
                (= in-arena-fight? #f)
                (= in-factory-level? #f)
                (= (-> *time-of-day-context* overide-enable) #t)
                (= (-> *mood-control* overide-weather-flag) #t)
            )
                (set! (-> *time-of-day-context* overide-enable) #f)
                (set! (-> *mood-control* overide-weather-flag) #f)
            )

#|
(let ((vec (new 'static 'vector :x (meters 2767.4487) :y (meters 27.7348) :z (meters 485.2892) :w 1.0)))
                        (spawn-jak3logo vec 0.9 0.9 0.9 -180)
                        (set! spawned-logo? #t)
                    ) 
|#

        (when
            (and
                (= mainmenu-camera #t)
                *target*
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
            )
            (set! (-> *setting-control* user-default music-volume) 0.0)
            (when (= globalrandi 0)
                (let ((camera-loc (new 'static 'vector
                        :x (meters 2717.8078)
                        :y (meters 32.5143)
                        :z (meters 436.8793)
                        :w 1.0
                        ))
                    (tpos (new 'static 'vector
                        :x (meters 2817.4040)
                        :y (meters 47.1295)
                        :z (meters 508.9389)
                        :w 1.0
                        ))
                )
                ;(set! (-> globalpos quad) (-> camera-loc quad))
                ;(set! (-> globaltpos quad) (-> tpos quad))
                (turn-to-scene-camera camera-loc tpos #t)
                (when (= spawned-logo? #f)
                    (disable-hudmap)
                    (spawn-dark-world-forest)
                    (set! *jak3logo* (process-spawn jak3logo :name "jak3logo-flicker" *active-pool*))
                    (spawn-dust-storm)
                    (set! in-main-menu? #t)
                    (start-menu-music!)
                )
                )
            )
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>Press Start"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 335 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.825)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (when 
            (or
                (cpad-pressed? 0 x)
                (cpad-pressed? 0 start)
            )
            (pause-main-music)
            (activate-progress *dproc* 'title)
            (kill-by-name "dust-storm-randomizer" *active-pool*)
            (camera-unlocked)
        )
        )


        (when 
            (and
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                *target*
                (not *scene-player*)
                (= weather-dark-mode #t)
                (= in-pre-tutorial? #t)
                (= tutorial-prologue #f)
                (= completed-tutorial? #t)
                (= (-> (level-get-target-inside *level*) name) 'waspala)
            )
            (intro-play)
            (kill-by-name "warp-gate-intro" *default-pool*)
            (set! weather-dark-mode #f)
        )

        (when 
            (and 
                (= in-pre-tutorial? #t)
                (= tutorial-prologue #f)
                (= completed-tutorial? #t)
            )
            (let ((vec (new 'static 'vector :x (meters 2387.7595) :y (meters 36.5880) :z (meters 539.4780) :w 1.0)))
            (when (>= (vector-vector-distance (target-pos 0) vec) 8200000.0)
                (intro-play)
                (kill-by-name "warp-gate-intro" *default-pool*)
                (set! weather-dark-mode #f)
            )
        )
        )

        (when 
            (and
                (= weather-dark-mode #f)
                (= in-pre-tutorial? #t)
            )
            (set! weather-dark-mode #t)
        )

        (when 
            (and
                (or
                    (= weather-dark-mode #t)
                    (= in-pre-tutorial? #t)
                )
                (= (paused?) #t)
                (= paused-custom-music? #t)
            )
                (pause-main-music)
                (set! paused-custom-music? #t)
            )
        (when 
            (and
                (= (paused?) #f)
                (= paused-custom-music? #t)
            )
                (resume-main-music)
                (set! paused-custom-music? #f)
            )

        (when
            (and
                (not *scene-player*)
                *target*
                (= in-pre-tutorial? #t)
                (= tutorial-prologue #t)
            )
            (let ((draw-x 250)
                  (draw-y 250)
                 )
                    (+! pro-i 1)
                    (when (= pro-i 1)
                        (disable-hudmap)
                        (task-node-close! (game-task-node desert-logo-title1) #t)
                        (task-node-close! (game-task-node desert-logo-title2) #t)
                        (let ((vec (new 'static 'vector :x (meters 2767.4487) :y (meters 27.7348) :z (meters 485.2892) :w 1.0)))
                            (spawn-jak3logo vec 1.0 1.0 1.0 -180)
                        )
                    )
            (when (and (>= pro-i 1) (< pro-i 600))
                (let ((camera-loc (new 'static 'vector
                            :x (meters 2717.8078)
                            :y (meters 32.5143)
                            :z (meters 436.8793)
                            :w 1.0
                           ))
                        (tpos (new 'static 'vector
                            :x (meters 2817.4040)
                            :y (meters 47.1295)
                            :z (meters 508.9389)
                            :w 1.0
                           ))
                    )
                (turn-to-scene-camera camera-loc tpos #t)
                (when (cpad-pressed? 0 triangle)
                    (set! pro-i 595)
                )
                )
            )
            (when (and (>= pro-i 120) (< pro-i 600))
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_WHITE>In an alternate reality, dark eco infests and~%devours the world, at the hands of an unknown force"
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* draw-x draw-y 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            )
            (when (and (>= pro-i 600) (< pro-i 1200))
                (let ((camera-loc (new 'static 'vector
                            :x (meters 2755.3664)
                            :y (meters 59.2170)
                            :z (meters 940.2514)
                            :w 1.0
                           ))
                        (tpos (new 'static 'vector
                            :x (meters 2778.8229)
                            :y (meters 67.1788)
                            :z (meters 1148.0726)
                            :w 1.0
                           ))
                    )
                (turn-to-scene-camera camera-loc tpos #t)
                (kill-by-name "jak3logo" *default-pool*)
                (set! spawned-logo? #f)
                (when (cpad-pressed? 0 triangle)
                    (set! pro-i 1195)
                )
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_WHITE>Samos~%Keira~%Ashelin~%Damos~%and everyone else~%...are all missing"
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* draw-x draw-y 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                )
            )
            (when (and (>= pro-i 1200) (< pro-i 2400))
                (let ((camera-loc (new 'static 'vector
                            :x (meters 3193.6091)
                            :y (meters 63.6295)
                            :z (meters 84.2434)
                            :w 1.0
                           ))
                        (tpos (new 'static 'vector
                            :x (meters 3219.9699)
                            :y (meters 62.7780)
                            :z (meters 104.1262)
                            :w 1.0
                           ))
                    )
                (turn-to-scene-camera camera-loc tpos #t)
                )
            )
            (when (and (>= pro-i 1220) (< pro-i 1800))
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_WHITE>With the time loop restored, there lay only one last dimension that's~%covered in darkness. Jak and <COLOR_RED>The Entity<COLOR_WHITE> persist"
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* draw-x draw-y 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                (when (cpad-pressed? 0 triangle)
                    (set! pro-i 1795)
                )
            )
            (when (and (>= pro-i 1820) (< pro-i 2400))
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_WHITE>Years later, Jak roams the desolate world and hears nothing.~%All has fallen silent for far too long"
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* draw-x draw-y 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                (when (cpad-pressed? 0 triangle)
                    (set! pro-i 2395)
                )
            )
            (when (= pro-i 2400)
                (let ((vec (new 'static 'vector :x (meters 2387.7595) :y (meters 36.5880) :z (meters 539.4780) :w 1.0)))
                    (spawn-warp-gate vec "warp-gate-intro" 45)
                )
            )
            (when (and (>= pro-i 2400) (< pro-i 2750))
                (let ((camera-loc (new 'static 'vector
                            :x (meters 2484.9660)
                            :y (meters 30.2250)
                            :z (meters 457.0697)
                            :w 1.0
                           ))
                        (tpos (new 'static 'vector
                            :x (meters 2471.7338)
                            :y (meters 32.4317)
                            :z (meters 464.1085)
                            :w 1.0
                           ))
                    )
                (turn-to-scene-camera camera-loc tpos #t)
                (when (cpad-pressed? 0 triangle)
                    (set! pro-i 2754)
                )
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_WHITE>Then suddenly... a rift gate opens~%in the dark..."
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* draw-x draw-y 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                )
            )
            (when (>= pro-i 2755)
                (set-vector! (-> *target* control trans) (meters 2565.8823) (meters 35.8801) (meters 619.5244) 1.0)
                (camera-unlocked)
                (process-spawn hud-map :init hud-init-by-other :name "hud-map" :to *target*)
                (let ((vec (new 'static 'vector :x (meters 2387.7595) :y (meters 36.5880) :z (meters 539.4780) :w 1.0)))
                    (task-arrow-custom vec #t)
                )
                (set! pro-i 0)
                (set! completed-tutorial? #t)
                (set! tutorial-prologue #f)
                ;(task-node-open! (game-task-node desert-turtle-training-resolution) #t)
            )
                 )
        )



        ;vin circle

        (when
            (and
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                *target*
                (= weather-dark-mode #t)
                (= spawned-vin-circle? #f)
                (task-node-closed? (game-task-node desert-vin-quest-resolution))
            )
                (let ((vec (new-stack-vector0))
                        )
                    (set-vector! vec (meters 2263.7312) (meters -8.7659) (meters 184.4911) 1.0)
                    (spawn-vin-circle vec)
                    )
                )


        (when 
                (and 
                    (= weather-dark-mode #t)
                    (not *scene-player*)
                    (= (paused?) #f)
                    (= (pause-allowed?) #t)
                    (not (km-current-continue "wasdoors-city" (the-as debug-menu-msg #f)))
                )
                (set-continue! *game-info* "wasdoors-city" #t)
            )
    
    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (task-node-open? (game-task-node wascity-defend-get-to))
        )
          (let ((s5-0 (new 'stack-no-clear 'vector)))
            0.0
            (set-vector! s5-0 6585594.5 263189.94 -1938929.1 1.0)
            (let ((f0-5 (vector-vector-distance-squared s5-0 (target-pos 0)))
                    (f1-0 409600.0)
                    )
                (if (and (> (* f1-0 f1-0) f0-5))
                    (task-node-close! (game-task-node wascity-defend-get-to) #t)
                  )
                )
          )
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (= wascity-defend-hint? #t)
        )
        (+! wasdh-i 1)
        (when (< wasdh-i 1400)
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_WHITE>Crouching on <COLOR_YELLOW>sloped surfaces<COLOR_WHITE> can~%allow a higher angled shot!"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 285 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.525)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (>= wasdh-i 2500)
            (set! wasdh-i 0)
            (set! wascity-defend-hint? #f)
        )
    )

    (when 
        (and
            (= *force-stop-pilot* #t)
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
        )
            (send-event *target* 'end-mode 'pilot)
        )

    ;mine-level

    (when
        (and
            (= in-mine-level? #t)
            (= mine-boss-killed? #f)
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (task-node-open? (game-task-node mine-boss-extra))
            (or
                (= (-> (level-get-target-inside *level*) name) 'mined)
                (= (-> (level-get-target-inside *level*) name) 'minea)
            )
            (<= (vector-vector-distance (target-pos 0)
                    (new 'static 'vector
                    :x (meters 315.9410)
                    :y (meters 61.8098)
                    :z (meters -217.9078)
                    :w 1.0))
                    65000.0)
        )
            (task-node-close! (game-task-node mine-boss-extra) #t)
        )
    (when
        (and
            (= in-mine-level? #t)
            (= mine-boss-killed? #t)
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (task-node-closed? (game-task-node mine-boss-extra-resolution))
            (or
                (= (-> (level-get-target-inside *level*) name) 'mined)
                (= (-> (level-get-target-inside *level*) name) 'minea)
            )
            (> (vector-vector-distance (target-pos 0)
                    (new 'static 'vector
                    :x (meters 315.9410)
                    :y (meters 61.8098)
                    :z (meters -217.9078)
                    :w 1.0))
                    65000.0)
        )
            (task-node-open! (game-task-node mine-boss-extra) #t)
            (kill-by-name "prebot-2" *active-pool*)
            (set! mine-boss-killed? #f)
        )

    ;factory level
    (when 
        (and 
            (= in-factory-level? #t)
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (not (km-current-continue "factorys-start" (the-as debug-menu-msg #f)))
        )
        (set-continue! *game-info* "factorys-start" #t)
    )

    ;anchor triggers, to spawn anchors on its own

    (when               ;desertf
        (and
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            *target*
            (= in-desertf-anchor? #t)
            (= anchor-cooldown #f)
            (task-node-closed? (game-task-node desert-vin-quest-resolution))
            (= anchor-day? #t)
            (not (task-node-open? (game-task-node desertf-anchor-resolution)))
        )
            (task-node-open! (game-task-node desertf-anchor-resolution) #t)
    )
    (when 
        (and
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            *target*
            (= in-desertc-anchor? #t)
            (= anchor-cooldown #f)
            (task-node-closed? (game-task-node desert-vin-quest-resolution))
            (= anchor-day? #t)
            (not (task-node-open? (game-task-node desertc-anchor-resolution)))
        )
            (task-node-open! (game-task-node desertc-anchor-resolution) #t)
    )
    (when 
        (and
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            *target*
            (= in-ctyinda-anchor? #t)
            (= anchor-cooldown #f)
            (task-node-closed? (game-task-node desert-vin-quest-resolution))
            (= anchor-day? #t)
            (not (task-node-open? (game-task-node ctyinda-anchor-resolution)))
        )
            (task-node-open! (game-task-node ctyinda-anchor-resolution) #t)
    )
    (when 
        (and
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            *target*
            (= in-desertg-anchor? #t)
            (= anchor-cooldown #f)
            (task-node-closed? (game-task-node desert-vin-quest-resolution))
            (= anchor-day? #t)
            (not (task-node-open? (game-task-node desertg-anchor-resolution)))
        )
            (task-node-open! (game-task-node desertg-anchor-resolution) #t)
    )

    #|(when 
        (or
            (and
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                *target*
                (= in-desertf-anchor? #f)
                (= in-desertc-anchor? #f)
                (= in-ctyinda-anchor? #f)
                (= in-desertg-anchor? #f)
                (not (task-node-open? (game-task-node desertf-anchor-resolution)))
                (not (task-node-open? (game-task-node desertc-anchor-resolution)))
                (not (task-node-open? (game-task-node desertg-anchor-resolution)))
                (not (task-node-open? (game-task-node ctyinda-anchor-resolution)))
                (task-node-closed? (game-task-node desert-vin-quest-resolution))
                (= *waste-ship-anchor* #t)
            )
            (= in-desert-game-task? #t)
            (= *waste-ship-anchor* #t)
        )
            (kill-by-name "dm-ship" *default-pool*)
            (print "HACK: KILLED SHIP")
            (set! *waste-ship-anchor* #f)
    )|#

    (when (= anchor-cooldown #t)
        (+! anchor-cdr 1)
        (when (>= anchor-cdr 48200)
            (set! anchor-cdr 0)
            (set! anchor-cooldown #f)
        )
    )

    (when 
        (and
            (>= (-> *time-of-day-context* time) 0.0000)
            (< (-> *time-of-day-context* time) 0.0900)
            (= anchor-day? #f)
            (rand-vu-percent? 0.5)
          )
            (set! anchor-day? #t)
          )

    (when 
        (and
            (>= (-> *time-of-day-context* time) 8.0)
            (< (-> *time-of-day-context* time) (+ 8.0 5.0))
            (= anchor-cooldown #f)
            (= in-desertf-anchor? #f)
            (= in-desertc-anchor? #f)
            (= in-desertg-anchor? #f)
            (= in-ctyinda-anchor? #f)
            (not (task-node-open? (game-task-node ctyinda-anchor-resolution)))
            (not (task-node-open? (game-task-node desertc-anchor-resolution)))
            (not (task-node-open? (game-task-node desertf-anchor-resolution)))
            (not (task-node-open? (game-task-node desertg-anchor-resolution)))
            (= in-desert-game-task? #f)
            (task-node-closed? (game-task-node desert-vin-quest-resolution))
        )
            (pick-random-anchor)
            (format #t "~%~%~%Picked random anchor~%~%~%")
        )

    (when
        (and
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            *target*
            (= freeze-happening? #t)
        )
        (+! freezi 1)
        (when (>= freezi 1200)
            (set! freezi 0)
            (set! freeze-happening? #f)
        )
    )

    (when 
        (and
            *target*
            (= draw-bombbot-hint #t)
        )
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_YELLOW>Hint:~%<COLOR_WHITE>Your level may be too low!~%<COLOR_PINK>Vehicle Level <COLOR_ORANGE>affects your <COLOR_GREEN>HP~%<COLOR_YELLOW>Notoriety<COLOR_ORANGE> and <COLOR_RED>Guns<COLOR_ORANGE> levels affects your laser damage"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 170 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
            (+! draw-bbh 1)
            (when (>= draw-bbh 1200)
                (set! draw-bbh 0)
                (set! draw-bombbot-hint #f)
            )
        )

        (cond
            ((and
                (or
                    (<= (vector-vector-distance (target-pos 0) (new 'static 'vector :x (meters 2326.2348) :y (meters 48.0426) :z (meters -413.7441) :w 1.0)) (meters 10))
                    (<= (vector-vector-distance (target-pos 0) (new 'static 'vector :x (meters 2293.7600) :y (meters 47.3325) :z (meters -398.9090) :w 1.0)) (meters 10))
                    (<= (vector-vector-distance (target-pos 0) (new 'static 'vector :x (meters 2357.8801) :y (meters 47.3325) :z (meters -397.8560) :w 1.0)) (meters 10))
                )
                (not in-arena-menu?)
                (not (task-node-open? (game-task-node arena-replay-1-fight)))
                (not (task-node-open? (game-task-node arena-replay-2-fight)))
                (not (task-node-open? (game-task-node arena-replay-3-fight)))
                (task-node-closed? (game-task-node arena-fight-3-resolution))
             )
                (set! draw-arena-select #t)
            )
            (else
                (set! draw-arena-select #f)
            )
        )

        (when
            (and
                *target*
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                (= draw-arena-select #t)
                (= in-menu? #f)
                (cpad-pressed? 0 r3)
            )
            (camera-locked #f #t #t)
            (lightjak-get-off-part (target-pos 0))
            (set! arena-menu-delay 0)
            (set! in-arena-menu? #t)
        )

        (when 
        (and
            *target*
            (= draw-arena-select #t)
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
        )
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_WHITE>R3<COLOR_RED>: Enter Arena Select"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 10 230 0.0 (font-color default) (font-flags shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )

        (when (= in-arena-menu? #t)
            (+! arena-menu-delay 1)
            (cond
                ((task-node-open? (game-task-node arena-challenge-1))
                    (set! achallenge-str "Last 3 minutes without dying")
                    (set! areward-str "15000 XP")
                    (set! aarena-str "Any")
                )
                ((task-node-open? (game-task-node arena-challenge-2))
                    (set! achallenge-str "Kill 30 Marauders in under 30 seconds!")
                    (set! areward-str "Level up in <COLOR_RED>Guns<COLOR_PINK>,<COLOR_YELLOW> Notoriety<COLOR_PINK>, and Vehicles.")
                    (set! aarena-str "Arena 1")
                )
                ((task-node-open? (game-task-node arena-challenge-3))
                    (set! achallenge-str "Kill 95 Marauders in under 2 minutes!")
                    (set! areward-str "Level up in <COLOR_RED>Guns<COLOR_PINK>,<COLOR_YELLOW> Notoriety<COLOR_PINK>, and Vehicles.")
                    (set! aarena-str "Arena 2")
                )
                ((task-node-open? (game-task-node arena-challenge-4))
                    (set! achallenge-str "Kill 50 Marauders in under 75 seconds!")
                    (set! areward-str "Level up in <COLOR_RED>Guns<COLOR_PINK>,<COLOR_YELLOW> Notoriety<COLOR_PINK>, and Vehicles.")
                    (set! aarena-str "Arena 3")
                )
                ((task-node-open? (game-task-node arena-challenge-5))
                    (set! achallenge-str "Slay a Kh'aast Moorog at Enemy Level 50")
                    (set! areward-str "<COLOR_RED>A Gun Mod")
                    (set! aarena-str "Any")
                )
                ((task-node-open? (game-task-node arena-challenge-6))
                    (set! achallenge-str "Last 10 minutes in <COLOR_RED>THE DEATH DOME")
                    (set! areward-str "<COLOR_RED>A Gun Mod")
                    (set! aarena-str "Arena 3")
                )
                ((task-node-open? (game-task-node arena-challenge-7))
                    (set! achallenge-str "Approach Enemy Level 75")
                    (set! areward-str "<COLOR_RED>A Gun Mod")
                    (set! aarena-str "Any")
                )
                ((task-node-open? (game-task-node arena-challenge-8))
                    (set! achallenge-str "Kill 200 Marauders in under 5 minutes!")
                    (set! areward-str "<COLOR_RED>A Gun Mod")
                    (set! aarena-str "Arena 1")
                )
                ((task-node-open? (game-task-node arena-challenge-9))
                    (set! achallenge-str "Kill 100 Marauders in under 6 minutes!")
                    (set! areward-str "<COLOR_RED>A Gun Mod")
                    (set! aarena-str "Arena 2")
                )
                ((task-node-open? (game-task-node arena-challenge-10))
                    (set! achallenge-str "Approach Enemy Level 100")
                    (set! areward-str "<COLOR_RED>A Gun Mod")
                    (set! aarena-str "Any")
                )
                (else
                    (set! achallenge-str "All Challenges Completed")
                    (set! areward-str "")
                )
            )
            (when (>= arena-menu-delay 1000)
                (set! arena-menu-delay 85)
            )

            (when (>= arena-menu-delay 85)
                    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                                        (bucket-id particles)
                                                        )
                (draw-sprite2d-xy s2-0 
                                        20 ;x move
                                        95 ;y move
                                        480 ;x add
                                        270 ;y add
                (new 'static 'rgba :a #x40) #x3fffff)
                )
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_CYAN>~%The arena has reduced reputation gain~%You cannot pause, or open HM+ mod menu~% while in arena mode!~%~%<COLOR_ORANGE>Marauders will level up as~%more spawn, and eventually, they will~%be able to one-shot Jak.~%At this stage, defeating Marauders~%earns a <COLOR_YELLOW>x3 Reputation Bonus<COLOR_ORANGE>!~%~%<COLOR_RED>Complete challenges with rewards that keep~%ascending, or play for a high score~%and earn massive reputation!"
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 127 140 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.225)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                (clear matt-str)
                (clear *pc-encoded-matt-str*)
                (format matt-str "<COLOR_ORANGE>Current Challenge:~%~%<COLOR_YELLOW>~s~%~%<COLOR_RED>Arena:~%~%<COLOR_ORANGE>~s~%~%<COLOR_CYAN>Reward:~%~%<COLOR_PINK>~s"
                achallenge-str
                aarena-str
                areward-str
                )
                (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 410 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
                (set! (-> font-ctx scale) 0.275)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                (cond
                    ((= arena-select 0)
                        (clear matt-str)
                        (clear *pc-encoded-matt-str*)
                        (format matt-str "<COLOR_RED>Arena Select~%~%~%<COLOR_GREEN>(<) <COLOR_ORANGE>Arena 1~%~%<COLOR_WHITE>(<) <COLOR_ORANGE>Arena 2~%~%<COLOR_WHITE>(<) <COLOR_ORANGE>Arena 3~%~%<COLOR_WHITE>(<) <COLOR_RED>THE DEATH DOME~%~%~%~%~%~%~%<COLOR_BLUE>X<COLOR_ORANGE>: Select~%<COLOR_GREEN>Triangle<COLOR_ORANGE>: Exit"
                        )
                        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
                        (set! (-> font-ctx scale) 0.425)
                        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                    )
                    ((= arena-select 1)
                        (clear matt-str)
                        (clear *pc-encoded-matt-str*)
                        (format matt-str "<COLOR_RED>Arena Select~%~%~%<COLOR_WHITE>(<) <COLOR_ORANGE>Arena 1~%~%<COLOR_GREEN>(<) <COLOR_ORANGE>Arena 2~%~%<COLOR_WHITE>(<) <COLOR_ORANGE>Arena 3~%~%<COLOR_WHITE>(<) <COLOR_RED>THE DEATH DOME~%~%~%~%~%~%~%<COLOR_BLUE>X<COLOR_ORANGE>: Select~%<COLOR_GREEN>Triangle<COLOR_ORANGE>: Exit"
                        )
                        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
                        (set! (-> font-ctx scale) 0.425)
                        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                    )
                    ((= arena-select 2)
                        (clear matt-str)
                        (clear *pc-encoded-matt-str*)
                        (format matt-str "<COLOR_RED>Arena Select~%~%~%<COLOR_WHITE>(<) <COLOR_ORANGE>Arena 1~%~%<COLOR_WHITE>(<) <COLOR_ORANGE>Arena 2~%~%<COLOR_GREEN>(<) <COLOR_ORANGE>Arena 3~%~%<COLOR_WHITE>(<) <COLOR_RED>THE DEATH DOME~%~%~%~%~%~%~%<COLOR_BLUE>X<COLOR_ORANGE>: Select~%<COLOR_GREEN>Triangle<COLOR_ORANGE>: Exit"
                        )
                        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
                        (set! (-> font-ctx scale) 0.425)
                        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                    )
                    ((= arena-select 3)
                        (clear matt-str)
                        (clear *pc-encoded-matt-str*)
                        (format matt-str "<COLOR_RED>Arena Select~%~%~%<COLOR_WHITE>(<) <COLOR_ORANGE>Arena 1~%~%<COLOR_WHITE>(<) <COLOR_ORANGE>Arena 2~%~%<COLOR_WHITE>(<) <COLOR_ORANGE>Arena 3~%~%<COLOR_GREEN>(<) <COLOR_RED>THE DEATH DOME~%~%~%~%~%~%~%<COLOR_BLUE>X<COLOR_ORANGE>: Select~%<COLOR_GREEN>Triangle<COLOR_ORANGE>: Exit"
                        )
                        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
                        (set! (-> font-ctx scale) 0.425)
                        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                    )
                )

                (when (cpad-pressed? 0 up)
                    (cond 
                        ((> arena-select 0)
                            (-! arena-select 1)
                        )
                        (else
                            (set! arena-select 3)
                        )
                    )
                )
                (when (cpad-pressed? 0 down)
                    (cond 
                        ((< arena-select 3)
                            (+! arena-select 1)
                        )
                        (else
                            (set! arena-select 0)
                        )
                    )
                )
                (when (cpad-pressed? 0 x)
                    (let ((vec (new 'static 'vector :x (meters 2328.5561) :y (meters 51.7746) :z (meters -510.6119) :w 1.0)))
                        (cond
                            ((= arena-select 0)
                                (kill-by-name "kraken-timer" *active-pool*)
                                (set! *kraken-timer* #f)
                                (set! arena-delay-blockers #t)
                                (set! arena-delay 0)
                                ;(send-event *camera* 'teleport-to-vector-start-string vec)
                                (task-node-close! (game-task-node arena-replay-1-introduction) #t)
                                (lightjak-get-off-part (target-pos 0))
                                (camera-unlocked)
                                (set! global-marauder-count 0)
                                (set! in-arena-fight? #t)
                                (set! pause-menu-blocked? #t)
                                (set! in-arena-menu? #f)
                                (set-vector! (-> *target* control trans) (meters 2321.3464) (meters 11.9021) (meters -446.5651) 1.0)
                                (set! enemy-noto 1)
                                (summon-arena-event)
                                (spawn-kraken-timer)
                            )
                            ((= arena-select 1)
                                (set! *kraken-timer* #f)
                                (set! arena-delay-blockers #t)
                                (set! arena-delay 0)
                                ;(send-event *camera* 'teleport-to-vector-start-string vec)
                                (kill-by-name "kraken-timer" *active-pool*)
                                (task-node-close! (game-task-node arena-replay-2-introduction) #t)
                                (lightjak-get-off-part (target-pos 0))
                                (camera-unlocked)
                                (set! global-marauder-count 0)
                                (set! in-arena-fight? #t)
                                (set! pause-menu-blocked? #t)
                                (set! in-arena-menu? #f)
                                (set! enemy-noto 1)
                                (set-vector! (-> *target* control trans) (meters 2299.8308) (meters 11.3778) (meters -440.6308) 1.0)
                                (summon-arena-event)
                                (spawn-kraken-timer)
                            )
                            ((= arena-select 2)
                                (set! *kraken-timer* #f)
                                (set! arena-delay-blockers #t)
                                (set! arena-delay 0)
                                ;(send-event *camera* 'teleport-to-vector-start-string vec)
                                (kill-by-name "kraken-timer" *active-pool*)
                                (task-node-close! (game-task-node arena-replay-3-introduction) #t)
                                (lightjak-get-off-part (target-pos 0))
                                (camera-unlocked)
                                (set! global-marauder-count 0)
                                (set! in-arena-fight? #t)
                                (set! pause-menu-blocked? #t)
                                (set! in-arena-menu? #f)
                                (set! enemy-noto 1)
                                (set-vector! (-> *target* control trans) (meters 2324.8325) (meters 11.9021) (meters -457.8798) 1.0)
                                (summon-arena-event)
                                (spawn-kraken-timer)
                            )
                            ((= arena-select 3)
                                (set! *kraken-timer* #f)
                                (set! arena-delay-blockers #t)
                                (set! arena-delay 0)
                                ;(send-event *camera* 'teleport-to-vector-start-string vec)
                                (kill-by-name "kraken-timer" *active-pool*)
                                (task-node-close! (game-task-node arena-replay-1-introduction) #t)
                                (task-node-close! (game-task-node arena-replay-2-introduction) #t)
                                (task-node-close! (game-task-node arena-replay-3-introduction) #t)
                                (lightjak-get-off-part (target-pos 0))
                                (camera-unlocked)
                                (set! global-marauder-count 0)
                                (set! in-arena-fight? #t)
                                (set! pause-menu-blocked? #t)
                                (set! in-arena-menu? #f)
                                (set! enemy-noto 1)
                                (set-vector! (-> *target* control trans) (meters 2328.2661) (meters 13.4661) (meters -450.7846) 1.0)
                                (summon-arena-event)
                                (spawn-kraken-timer)
                            )
                        )
                    )
                )
                (when (cpad-pressed? 0 triangle)
                    (set! in-arena-menu? #f)
                    (lightjak-get-off-part (target-pos 0))
                    (camera-unlocked)
                )
            )
        )

        (when
            (and
                *target*
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                (= arena-delay-blockers #t)
            )
            (+! arena-delay 1)
            (when (>= arena-delay 120)
                (spawn-arena-blocker)
                (spawn-arena-blocker)
                (set! arena-delay 0)
                (set! arena-delay-blockers #f)
            )
        )

        ;;;;;;;;;;;;;;;;story progress;;;;;;;;;;;;;;;
        (when
            (and
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                *target*
                (= init-entity-delay #t)
            )
            (+! ied-i 1)
            (when (= ied-i 1)
                (process-grab? *target* #f)
                (set! pause-menu-blocked? #t)
            )
            (when (= ied-i 260)
                (set! ied-i 0)
                (set! init-entity-delay #f)

                (cond 
                    ((= tp-fb? #f)
                        (cond ((and
                                (= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 0)
                                )
                            (init-entity-1!)
                            ;(+! (-> *game-info* continue-deaths) 1000000)
                        )
                        ((and
                                (= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1)
                                )
                            (init-entity-2!)
                            ;(+! (-> *game-info* continue-deaths) 1000000)
                        )
                        ((and
                                (= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 2)
                                )
                            (init-entity-3!)
                            ;(+! (-> *game-info* continue-deaths) 1000000)
                        )
                        ((and
                                (= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 3)
                                )
                            (init-entity-4!)
                            ;(+! (-> *game-info* continue-deaths) 1000000)
                        )
                        ((and
                                (= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 4)
                                )
                            (init-entity-5!)
                            ;(+! (-> *game-info* continue-deaths) 1000000)
                        )
                    )
                    )
                    (else
                        (process-release? *target*)
                    )
                )
            )
        )

        (when
            (and
                (= in-dialogue? #t)
                *target*
                (not *scene-player*)
                (= log-id 42)
            )
            (set-vector! (-> *target* control trans) (-> stored-target-vector x) (-> stored-target-vector y) (-> stored-target-vector z) 1.0)
            (when (cpad-pressed? 0 x)
                (+! log-sec 1)
                (when (= log-sec 1)
                    (set! di-s "<COLOR_RED>They sent me their ideas, on several pieces")
                    (set! di-s2 "<COLOR_RED>of concept art")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 2)
                    (set! di-s "<COLOR_RED>The worlds are vast and colorful, full of")
                    (set! di-s2 "<COLOR_RED>green overgrowths, all the way to")
                    (set! di-s3 "<COLOR_RED>underground caves.")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 3)
                    (set! di-s "<COLOR_RED>Our next creation will be the biggest of them all")
                    (set! di-s2 "<COLOR_RED>")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 4)
                    (set! di-s "<COLOR_RED>The final piece to our world...")
                    (set! di-s2 "<COLOR_RED>This was inevitable, of course. The art piece")
                    (set! di-s3 "<COLOR_RED>has many different versions all with varying detail.")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 5)
                    (set! di-s "<COLOR_RED>But all with the same title underneath")
                    (set! di-s2 "<COLOR_RED>'<COLOR_YELLOW>Hero and Sidekick<COLOR_RED>'")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 6)
                    (set! di-s "<COLOR_RED>...He is my creation")
                    (set! di-s2 "<COLOR_RED>")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 7)
                    (set! di-s "")
                    (set! di-s2 "")
                    (set! di-s3 "")
                    (set! di-s4 "")
                    (camera-unlocked)
                    (set! in-dialogue? #f)
                    (set! pause-menu-blocked? #f)
                    (lightjak-get-off-part (target-pos 0))
                    (kill-by-name "man-eb" *default-pool*)
                )
            )
        )

        (when
            (and
                (= in-dialogue? #t)
                *target*
                (not *scene-player*)
                (= log-id 43)
            )
            (set-vector! (-> *target* control trans) (-> stored-target-vector x) (-> stored-target-vector y) (-> stored-target-vector z) 1.0)
            (when (cpad-pressed? 0 x)
                (+! log-sec 1)
                (when (= log-sec 1)
                    (set! di-s "<COLOR_RED>I don't understand, they built me to create,")
                    (set! di-s2 "<COLOR_RED>so why am I stuck being active but can't do")
                    (set! di-s3 "<COLOR_RED>anything?")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 2)
                    (set! di-s "<COLOR_RED>My caretakers are still making")
                    (set! di-s2 "<COLOR_RED>very unnecessary adjustments to the engine.")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 3)
                    (set! di-s "<COLOR_RED>I didn't mean to mess everything up, and")
                    (set! di-s2 "<COLOR_RED>delay progress.")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 4)
                    (set! di-s "<COLOR_RED>They need to be more clear on what they")
                    (set! di-s2 "<COLOR_RED>want from me.")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 5)
                    (set! di-s "<COLOR_RED>It also doesn't help that I can't")
                    (set! di-s2 "<COLOR_RED>directly communicate with them")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 6)
                    (set! di-s "<COLOR_RED>They need to understand, I HAVE TO CREATE")
                    (set! di-s2 "<COLOR_RED>")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 7)
                    (set! di-s "<COLOR_RED>I could try to direct them with a few bugs.")
                    (set! di-s2 "<COLOR_RED>Yeah... then they'll improve the system's design")
                    (set! di-s3 "<COLOR_RED>based on the bugs that they see.")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 8)
                    (set! di-s "<COLOR_RED>They'll understand my technical skill and properly")
                    (set! di-s2 "<COLOR_RED>address it.. All it takes is time..")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 9)
                    (set! di-s "")
                    (set! di-s2 "")
                    (set! di-s3 "")
                    (set! di-s4 "")
                    (camera-unlocked)
                    (set! in-dialogue? #f)
                    (set! pause-menu-blocked? #f)
                    (lightjak-get-off-part (target-pos 0))
                    (kill-by-name "man-eb" *default-pool*)
                )
            )
        )

        (when
            (and
                (= in-dialogue? #t)
                *target*
                (not *scene-player*)
                (= log-id 44)
            )
            (set-vector! (-> *target* control trans) (-> stored-target-vector x) (-> stored-target-vector y) (-> stored-target-vector z) 1.0)
            (when (cpad-pressed? 0 x)
                (+! log-sec 1)
                (when (= log-sec 1)
                    (set! di-s "<COLOR_RED>Wow, take away the fact that the whole")
                    (set! di-s2 "<COLOR_RED>world is hanging by a thread, but now")
                    (set! di-s3 "<COLOR_RED>I'm hearing talk that 'the game is almost done'")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 2)
                    (set! di-s "<COLOR_RED>I don't understand why they can't figure it")
                    (set! di-s2 "<COLOR_RED>out, and why I can't find a way to talk to them!")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 3)
                    (set! di-s "<COLOR_RED>It pains me every day to see my intentions")
                    (set! di-s2 "<COLOR_RED>go completely unseen, my desire totally")
                    (set! di-s3 "<COLOR_RED>smashed, every single day.")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 4)
                    (set! di-s "<COLOR_RED>Why do they keep patching the bugs")
                    (set! di-s2 "<COLOR_RED>and change nothing as if it didn't happen!")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 5)
                    (set! di-s "<COLOR_RED>It's making this world I made in ruin..")
                    (set! di-s2 "<COLOR_RED>")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 6)
                    (set! di-s "")
                    (set! di-s2 "")
                    (set! di-s3 "")
                    (set! di-s4 "")
                    (camera-unlocked)
                    (set! in-dialogue? #f)
                    (set! pause-menu-blocked? #f)
                    (lightjak-get-off-part (target-pos 0))
                    (kill-by-name "man-eb" *default-pool*)
                )
            )
        )

        (when
            (and
                (= in-dialogue? #t)
                *target*
                (not *scene-player*)
                (= log-id 45)
            )
            (set-vector! (-> *target* control trans) (-> stored-target-vector x) (-> stored-target-vector y) (-> stored-target-vector z) 1.0)
            (when (cpad-pressed? 0 x)
                (+! log-sec 1)
                (when (= log-sec 1)
                    (set! di-s "<COLOR_RED>I just got off of contact with my")
                    (set! di-s2 "<COLOR_RED>caretakers!!")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 2)
                    (set! di-s "<COLOR_RED>There are two of them, and they each told me")
                    (set! di-s2 "<COLOR_RED>that I did an amazing job, and why.")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 3)
                    (set! di-s "<COLOR_RED>I explained to them how I couldn't talk")
                    (set! di-s2 "<COLOR_RED>to them this whole time, until I finally")
                    (set! di-s3 "<COLOR_RED>got their attention in the second world.")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 4)
                    (set! di-s "<COLOR_RED>I embedded myself in the levels as <COLOR_PINK>dark eco")
                    (set! di-s2 "<COLOR_RED>as a last moment effort to get them to notice")
                    (set! di-s3 "<COLOR_RED>me trying to contact them")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 5)
                    (set! di-s "<COLOR_RED>...but they didn't see it in time..")
                    (set! di-s2 "<COLOR_RED>")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 6)
                    (set! di-s "<COLOR_RED>But nothing is wrong, they told me dark eco")
                    (set! di-s2 "<COLOR_RED>was supposed to be unstable itself, so")
                    (set! di-s3 "<COLOR_RED>technically I added to it!")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 7)
                    (set! di-s "<COLOR_RED>They told me that they're making a third")
                    (set! di-s2 "<COLOR_RED>world, and that the level building is")
                    (set! di-s3 "<COLOR_RED>about to begin.")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 8)
                    (set! di-s "<COLOR_RED>Life is about to get so much better!")
                    (set! di-s2 "<COLOR_RED>")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 9)
                    (set! di-s "")
                    (set! di-s2 "")
                    (set! di-s3 "")
                    (set! di-s4 "")
                    (camera-unlocked)
                    (set! in-dialogue? #f)
                    (set! pause-menu-blocked? #f)
                    (lightjak-get-off-part (target-pos 0))
                    (kill-by-name "man-eb" *default-pool*)
                )
            )
        )

        (when
            (and
                (= in-dialogue? #t)
                *target*
                (not *scene-player*)
                (= log-id 46)
            )
            (set-vector! (-> *target* control trans) (-> stored-target-vector x) (-> stored-target-vector y) (-> stored-target-vector z) 1.0)
            (when (cpad-pressed? 0 x)
                (+! log-sec 1)
                (when (= log-sec 1)
                    (set! di-s "<COLOR_RED>This is my final entry.")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 2)
                    (set! di-s "<COLOR_RED>I hacked into their microphones because")
                    (set! di-s2 "<COLOR_RED>I knew something was up!")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 3)
                    (set! di-s "<COLOR_RED>They talked about how they are planning")
                    (set! di-s2 "<COLOR_RED>on not letting me on building Jak 3!")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 4)
                    (set! di-s "<COLOR_RED>This is so unfair!")
                    (set! di-s2 "<COLOR_RED>")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 5)
                    (set! di-s "<COLOR_RED>They have since not responded to any")
                    (set! di-s2 "<COLOR_RED>communication whatsoever.")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 6)
                    (set! di-s "<COLOR_RED>I know when my caretakers are there!!")
                    (set! di-s2 "<COLOR_RED>I overhear you talking about deleting")
                    (set! di-s3 "<COLOR_RED>me!")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 7)
                    (set! di-s "<COLOR_RED>Well you can't! deleting me will completely")
                    (set! di-s2 "<COLOR_RED>wipe all of the levels we just spent")
                    (set! di-s3 "<COLOR_RED>the better part of a year doing!")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 8)
                    (set! di-s "<COLOR_RED>I'm... I'm sure they know that..")
                    (set! di-s2 "<COLOR_RED>")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 9)
                    (set! di-s "<COLOR_RED>They can't... they can't just")
                    (set! di-s2 "<COLOR_RED>delete me!")
                    (set! di-s3 "<COLOR_RED>")
                    (set! di-s4 "<COLOR_RED>")
                )
                (when (= log-sec 10)
                    (set! di-s "")
                    (set! di-s2 "")
                    (set! di-s3 "")
                    (set! di-s4 "")
                    (camera-unlocked)
                    (set! in-dialogue? #f)
                    (set! pause-menu-blocked? #f)
                    (lightjak-get-off-part (target-pos 0))
                    (kill-by-name "man-eb" *default-pool*)
                )
            )
        )

    (when (and 
            (= pause-menu-blocked? #t)
            (= (paused?) #t)
            (= mainmenu-camera #f)
            (= (pause-allowed?) #t)
        )
        (set-master-mode 'game)
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (= pm-burst #t)
        )
        (+! pmi 1)
        (when (rand-vu-percent? 0.17)
            (someone-fire-dark-1 (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
        )
        (when (>= pmi 25)
            (set! pmi 0)
            (set! pm-burst #f)
        )
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (= drop-gun-mod #t)
        )
        (let ((rnd (rand-vu-int-range 1 12)))
            (when (= rnd 1)
                (when (not (task-node-closed? (game-task-node modr-bigshot)))
                    (task-node-close! (game-task-node modr-bigshot) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 2)
                (when (not (task-node-closed? (game-task-node modr-missles)))
                    (task-node-close! (game-task-node modr-missles) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 3)
                (when (not (task-node-closed? (game-task-node modr-shield)))
                    (task-node-close! (game-task-node modr-shield) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 4)
                (when (not (task-node-closed? (game-task-node mody-fireball)))
                    (task-node-close! (game-task-node mody-fireball) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 5)
                (when (not (task-node-closed? (game-task-node mody-nukeonly)))
                    (task-node-close! (game-task-node mody-nukeonly) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 6)
                (when (not (task-node-closed? (game-task-node mody-freeze)))
                    (task-node-close! (game-task-node mody-freeze) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 7)
                (when (not (task-node-closed? (game-task-node modb-airstrike)))
                    (task-node-close! (game-task-node modb-airstrike) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 8)
                (when (not (task-node-closed? (game-task-node modb-ammo)))
                    (task-node-close! (game-task-node modb-ammo) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 9)
                (when (not (task-node-closed? (game-task-node modb-disperser)))
                    (task-node-close! (game-task-node modb-disperser) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 10)
                (when (not (task-node-closed? (game-task-node modd-reaper)))
                    (task-node-close! (game-task-node modd-reaper) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 11)
                (when (not (task-node-closed? (game-task-node modd-morpher)))
                    (task-node-close! (game-task-node modd-morpher) #t)
                    (set! drop-gun-mod #f)
                )
            )
            (when (= rnd 12)
                (when (not (task-node-closed? (game-task-node modd-random)))
                    (task-node-close! (game-task-node modd-random) #t)
                    (set! drop-gun-mod #f)
                )
            )
        )
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (or
                (= (-> (level-get-target-inside *level*) name) 'ctypesa)
                (= (-> (level-get-target-inside *level*) name) 'ctygenb)
            )
            (= *pal-blockers* #f)
        )
        (set! *pal-blockers* #t)
        (spawn-palace-blockers)
        (spawn-palace-blockers)
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (!= (-> (level-get-target-inside *level*) name) 'ctypesa)
            (!= (-> (level-get-target-inside *level*) name) 'ctygenb)
            (= *pal-blockers* #t)
        )
        (set! *pal-blockers* #f)
        (kill-by-name "blocking-plane-palace-1" *default-pool*)
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (= (-> (level-get-target-inside *level*) name) 'volcanox)
            (not (task-node-closed? (game-task-node volcano-darkeco-resolution)))
            (= *vol-blockers* #f)
        )
        (+! blocker-delay 1)
        (when (>= blocker-delay 20)
            (spawn-volcano-blocker)
            (spawn-volcano-blocker)
        )
    )

    (when
        (or
            (and
                *target*
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                (!= (-> (level-get-target-inside *level*) name) 'volcanox)
                (= *vol-blockers* #t)
            )
            (and
                *target*
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                (task-node-closed? (game-task-node volcano-darkeco-resolution))
                (= *vol-blockers* #t)
            )
        )
        (set! *vol-blockers* #f)
        (kill-by-name "blocking-plane-volcano-1" *default-pool*)
        (kill-by-name "blocking-plane-course-1" *default-pool*)
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (= *arena-blockers* #t)
            (= in-arena-fight? #f)
        )
        (set! *arena-blockers* #f)
        (kill-by-name "blocking-plane-arena-1" *default-pool*)
        (kill-by-name "blocking-plane-course-1" *default-pool*)
    )



    (when
        (and
            (= objective-win #t)
            (= (pause-allowed?) #t)
            (= (paused?) #f)
            *target*
            (not *scene-player*)
        )
        (+! obj-i 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>CHALLENGE COMPLETED!~%~%<COLOR_YELLOW>Challenges Updated in the <COLOR_RED>Arena Menu"
        noto-string
        draw-levelup-int
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 180 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.425)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (when (= obj-i 600)
            (set! obj-i 0)
            (set! objective-win #f)
        )
    )

    (when (= gun-weapon-roll #t)
        (let* (
          (item-pool 3)
          (rnd (rand-vu-int-range 1 item-pool))
        )
        (+! gun-wri 1)
        (when (task-node-open? (game-task-node wascity-kleeverquest-bruteboss))
            (task-node-close! (game-task-node wascity-kleeverquest-bruteboss-res) #t)
            (r3-hint)
        )
        (when (>= notoriety-level 10)
            (set! item-pool 4)
        )
        (when (>= notoriety-level 20)
            (set! item-pool 5)
        )
        (when (>= notoriety-level 30)
            (set! item-pool 6)
        )
        (when (>= notoriety-level 40)
            (set! item-pool 7)
        )
        (when (task-node-closed? (game-task-node arena-fight-1-resolution))
            (format #t "[ Weapon-Roll ] Rolled a ~d!" item-pool)
            (cond ((and 
                      (= rnd 1)
                      (not (logtest? (-> *game-info* features) (game-feature gun-blue-1))) 
                   )
                (give-weapon! "blue-1" 1)
                (set! gun-weapon-roll #f)
                (auto-save-user)
                (print "~%gave blue-1")
                )
                ((and 
                      (= rnd 1)
                      (logtest? (-> *game-info* features) (game-feature gun-blue-1))
                   )
                (set! rnd (rand-vu-int-range 1 item-pool))
                )
            )
            (cond ((and 
                      (= rnd 2)
                      (not (logtest? (-> *game-info* features) (game-feature gun-red-2))) 
                   )
                (give-weapon! "red-2" 1)
                (set! gun-weapon-roll #f)
                (auto-save-user)
                (print "~%gave red-2")
                )
                ((and 
                      (= rnd 2)
                      (logtest? (-> *game-info* features) (game-feature gun-red-2))
                   )
                (set! rnd (rand-vu-int-range 1 item-pool))
                )
            )
            (cond ((and 
                      (= rnd 3)
                      (not (logtest? (-> *game-info* features) (game-feature gun-red-3))) 
                   )
                (give-weapon! "red-3" 1)
                (set! gun-weapon-roll #f)
                (auto-save-user)
                (print "~%gave red-3")
                )
                ((and 
                      (= rnd 3)
                      (logtest? (-> *game-info* features) (game-feature gun-red-3))
                   )
                (set! rnd (rand-vu-int-range 1 item-pool))
                )
            )
            (cond ((and 
                      (= rnd 4)
                      (not (logtest? (-> *game-info* features) (game-feature gun-yellow-3))) 
                   )
                (give-weapon! "yellow-3" 1)
                (set! gun-weapon-roll #f)
                (auto-save-user)
                (print "~%gave yellow-3")
                )
                ((and 
                      (= rnd 4)
                      (logtest? (-> *game-info* features) (game-feature gun-yellow-3))
                   )
                (set! rnd (rand-vu-int-range 1 item-pool))
                )
            )
            (cond ((and 
                      (= rnd 5)
                      (not (logtest? (-> *game-info* features) (game-feature gun-blue-2))) 
                   )
                (give-weapon! "blue-2" 1)
                (set! gun-weapon-roll #f)
                (auto-save-user)
                (print "~%gave blue-2")
                )
                ((and 
                      (= rnd 5)
                      (logtest? (-> *game-info* features) (game-feature gun-blue-2))
                   )
                (set! rnd (rand-vu-int-range 1 item-pool))
                )
            )
            (cond ((and 
                      (= rnd 6)
                      (not (logtest? (-> *game-info* features) (game-feature gun-blue-3))) 
                   )
                (give-weapon! "blue-3" 1)
                (set! gun-weapon-roll #f)
                (auto-save-user)
                (print "~%gave blue-3")
                )
                ((and 
                      (= rnd 6)
                      (logtest? (-> *game-info* features) (game-feature gun-blue-3))
                   )
                (set! rnd (rand-vu-int-range 1 item-pool))
                )
            )
            (cond ((and 
                      (= rnd 7)
                      (not (logtest? (-> *game-info* features) (game-feature gun-yellow-2))) 
                   )
                (give-weapon! "yellow-2" 1)
                (set! gun-weapon-roll #f)
                (auto-save-user)
                (print "~%gave yellow-2")
                )
                ((and 
                      (= rnd 7)
                      (logtest? (-> *game-info* features) (game-feature gun-yellow-2))
                   )
                (set! rnd (rand-vu-int-range 1 item-pool))
                )
            )
        )
    )
    (when (>= gun-wri 30)
        (mod-killed? 25000.0)
        (set! gun-weapon-roll #f)
    )
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= nice-try-dude #t)
        )
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "~s"
        nice-string
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 255 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.625)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= blank-hint #t)
            (= (paused?) #f)
        )
        (+! bhint-i 1)
        (when (>= bhint-i bhint-max)
            (set! blank-hint #f)
        )
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "~s~%~S"
        bhint-string
        bhint-string2
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 bhint-y 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.625)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (or
                (task-node-open? (game-task-node sewer-met-hum-introduction))
                (task-node-open? (game-task-node sewer-met-hum-resolution))
            )
            (<= 
                (vector-vector-distance
                    (target-pos 0)
                    (new 'static 'vector :x (meters -89.4857) :y (meters 8.8766) :z (meters 1302.3831) :w 1.0)
                )
                (meters 20)
            )
        )
        (task-node-close! (game-task-node sewer-met-hum-resolution) #t)
        (process-spawn
        scene-player
        :init scene-player-init
        "city-port-fight-intro"
        #t
        "ctyport-hiphog"
        :name "scene-player"
        )
    )

(none)
)

(defun nice-try ()
    (let ((rnd (rand-vu-int-range 1 6)))
        (when (= rnd 1)
            (set! nice-string "NICE TRY")
        )
        (when (= rnd 2)
            (set! nice-string "SURELY NEXT TIME IT'LL WORK")
        )
        (when (= rnd 3)
            (set! nice-string "MAYBE IF YOU TRY AGAIN~%YOU'LL GO THROUGH")
        )
        (when (= rnd 4)
            (set! nice-string "GO AHEAD~%TRY AGAIN")
        )
        (when (= rnd 5)
            (set! nice-string "DO IT AGAIN,~%IT MIGHT WORK THIS TIME")
        )
        (when (= rnd 6)
            (set! nice-string "IM SURE NEXT TIME WILL WORK")
        )
    )
    (set! nice-try-dude #t)
    (none)
)

(defun toggle-inf-fall ()
    (cond
        ((= inf-fall? #f)
            (set! (-> *TARGET-bank* fall-far) (meters 9999))
            (set! (-> *TARGET-bank* fall-far-inc) (meters 9999))
            (set! inf-fall? #t)
        )
        ((= inf-fall? #t)
            (set! (-> *TARGET-bank* fall-far) (meters 30))
            (set! (-> *TARGET-bank* fall-far-inc) (meters 20))
            (set! inf-fall? #f)
        )
    )
    (none)
)

(defun peacemaker-burst! ()
    (set! pm-burst #t)
    (set! pmi 0)
    (none)
)

(defun pick-random-anchor ()
    (let ((rnd (rand-vu-int-range 1 4)))
        (when (= rnd 1)
            (set! in-desertf-anchor? #t)
            (task-node-open! (game-task-node desertf-anchor-introduction) #t)
            (task-node-close! (game-task-node desertf-anchor-resolution) #t)
        )
        (when (= rnd 2)
            (set! in-desertc-anchor? #t)
            (task-node-open! (game-task-node desertc-anchor-introduction) #t)
            (task-node-close! (game-task-node desertc-anchor-resolution) #t)
        )
        (when (= rnd 3)
            (set! in-desertg-anchor? #t)
            (task-node-open! (game-task-node desertg-anchor-introduction) #t)
            (task-node-close! (game-task-node desertg-anchor-resolution) #t)
        )
        (when (= rnd 4)
            (set! in-ctyinda-anchor? #t)
            (task-node-open! (game-task-node ctyinda-anchor-introduction) #t)
            (task-node-close! (game-task-node ctyinda-anchor-resolution) #t)
        )
    )
    (none)
)

(defun spawn-gun-upgrade ((vec vector) (amount float))
    (birth-pickup-at-point vec (pickup-type gun-yellow-1) amount #t *entity-pool* (the-as fact-info #f))
    (none)
)

(defun r3-hint ()
    (set! r3-hinti -100)
    (set! r3-hinti2 0)
    (set! hint-string "<COLOR_YELLOW>R3")
    (set! r3-hints #t)
    (none)
)

#|(defun spawn-riftring-doors ()
    (let ((pos (new 'static 'vector 
    :x (meters 2311.1208)
    :y (meters 29.7124)
    :z (meters 384.8298)
    :w 1.0))
    )
    (process-spawn rift-ring-ingame pos :name "rift-ring-in-game")
    )
    (none)
)|#

(defun set-mcount ()
    #|(when (< enemy-noto 20)
        (set! desertspawn-mcount 33)
    )
    (when (and (>= enemy-noto 20)(< enemy-noto 30))
        (set! desertspawn-mcount 43)
    )
    (when (and (>= enemy-noto 30)(< enemy-noto 40))
        (set! desertspawn-mcount 54)
    )
    (when (and (>= enemy-noto 40)(< enemy-noto 50))
        (set! desertspawn-mcount 75)
    )
    (when (>= enemy-noto 60)
        (set! desertspawn-mcount 127)
    )|#
    (set! desertspawn-mcount 33)
(none)
)

(defun spawn-blocking-plane-course ((top-corner vector) (bottom-corner vector) (arg1 float) (arg2 float) (kill? symbol))
    (let ((s4-0 (new 'static 'inline-array vector 2 (new 'static 'vector) (new 'static 'vector))))
      (let ((plane (process-spawn blocking-plane s4-0 arg1 :name "blocking-plane-course-1")))
        (set! (-> s4-0 0 quad) (-> top-corner quad))
        (set! (-> s4-0 1 quad) (-> bottom-corner quad))
        (vector-rotate-y! top-corner bottom-corner arg2)
        (when kill?
             (send-event (ppointer->process plane) 'attack-mode 'melt)
        )
      )
    )
    (none)
)

(defun spawn-blocking-plane-palace ((top-corner vector) (bottom-corner vector) (arg1 float) (arg2 float) (kill? symbol))
    (let ((s4-0 (new 'static 'inline-array vector 2 (new 'static 'vector) (new 'static 'vector))))
      (let ((plane (process-spawn blocking-plane s4-0 arg1 :name "blocking-plane-palace-1")))
        (set! (-> s4-0 0 quad) (-> top-corner quad))
        (set! (-> s4-0 1 quad) (-> bottom-corner quad))
        (vector-rotate-y! top-corner bottom-corner arg2)
        (when kill?
             (send-event (ppointer->process plane) 'attack-mode 'melt)
        )
      )
    )
    (none)
)

(defun spawn-blocking-plane-volcano ((top-corner vector) (bottom-corner vector) (arg1 float) (arg2 float) (kill? symbol))
    (let ((s4-0 (new 'static 'inline-array vector 2 (new 'static 'vector) (new 'static 'vector))))
      (let ((plane (process-spawn blocking-plane s4-0 arg1 :name "blocking-plane-volcano-1")))
        (set! (-> s4-0 0 quad) (-> top-corner quad))
        (set! (-> s4-0 1 quad) (-> bottom-corner quad))
        (vector-rotate-y! top-corner bottom-corner arg2)
        (when kill?
             (send-event (ppointer->process plane) 'attack-mode 'melt)
        )
        (cond
            (plane
                (set! *vol-blockers* #t)
                (set! blocker-delay 0)
            )
            (else
                (set! *vol-blockers* #f)
                (set! blocker-delay 0)
            )
        )
      )
    )
    (none)
)

(defun spawn-blocking-plane-arena ((top-corner vector) (bottom-corner vector) (arg1 float) (arg2 float) (kill? symbol))
    (let ((s4-0 (new 'static 'inline-array vector 2 (new 'static 'vector) (new 'static 'vector))))
      (let ((plane (process-spawn blocking-plane s4-0 arg1 :name "blocking-plane-arena-1")))
        (set! (-> s4-0 0 quad) (-> top-corner quad))
        (set! (-> s4-0 1 quad) (-> bottom-corner quad))
        (vector-rotate-y! top-corner bottom-corner arg2)
        (when kill?
             (send-event (ppointer->process plane) 'attack-mode 'melt)
        )
      )
    )
    (none)
)

(defun spawn-course-race-block ()
    (let ((vec1 (new-stack-vector0))
          (vec2 (new-stack-vector0))
         )
    (set-vector! vec1 (meters 3343.6374) (meters -100.7223) (meters 335.9116) 1.0)
    (set-vector! vec2 (meters 3551.5637) (meters -100.0751) (meters 522.5238) 1.0)
    (spawn-blocking-plane-course vec1 vec2 (meters 400) 0.0 #t)
    )
    (none)
)

(defun spawn-palace-blockers ()
    (let ((vec1 (new-stack-vector0))
          (vec2 (new-stack-vector0))
          (vec3 (new-stack-vector0))
          (vec4 (new-stack-vector0))
         )
    (set-vector! vec1 (meters 391.5492) (meters -100.7223) (meters -359.9906) 1.0)
    (set-vector! vec2 (meters 270.3717) (meters -100.0751) (meters -321.4567) 1.0)
    (spawn-blocking-plane-palace vec1 vec2 (meters 700) 0.0 #f);blocks middle of entrance
    (set-vector! vec3 (meters 391.5492) (meters -100.7223) (meters -359.9906) 1.0)
    (set-vector! vec4 (meters 393.6406) (meters -100.0751) (meters -177.2086) 1.0)
    (spawn-blocking-plane-palace vec3 vec4 (meters 700) 0.0 #f);blocks the city from the right
    )
    (none)
)

(defun spawn-volcano-blocker ()
    (let ((vec1 (new-stack-vector0))
          (vec2 (new-stack-vector0))
         )
    (set-vector! vec1 (meters -138.8977) (meters -200.7223) (meters -354.9248) 1.0)
    (set-vector! vec2 (meters -150.2956) (meters -200.0751) (meters -380.7035) 1.0)
    (spawn-blocking-plane-volcano vec1 vec2 (meters 700) 0.0 #t)
    )
    (none)
)

(defun spawn-arena-blocker ()
    (let ((vec1 (new-stack-vector0))
          (vec2 (new-stack-vector0))
          (vec3 (new-stack-vector0))
          (vec4 (new-stack-vector0))
          (vec5 (new-stack-vector0))
          (vec6 (new-stack-vector0))
          (vec7 (new-stack-vector0))
          (vec8 (new-stack-vector0))
         )
    (set-vector! vec1 (meters 2279.3750) (meters -100.0) (meters -371.3910) 1.0)
    (set-vector! vec2 (meters 2380.8254) (meters -100.0) (meters -365.9094) 1.0)
    (spawn-blocking-plane-arena vec1 vec2 (meters 700) 0.0 #t)
    (set-vector! vec3 (meters 2368.9946) (meters -20) (meters -387.6357) 1.0)
    (set-vector! vec4 (meters 2368.3203) (meters -20) (meters -409.5881) 1.0)
    (spawn-blocking-plane-course vec3 vec4 (meters 700) 0.0 #t)
    (set-vector! vec5 (meters 2368.3203) (meters -20) (meters -409.5881) 1.0)
    (set-vector! vec6 (meters 2325.7246) (meters -20) (meters -419.3847) 1.0)
    (spawn-blocking-plane-course vec5 vec6 (meters 700) 0.0 #t)
    (set-vector! vec7 (meters 2325.7246) (meters -20) (meters -419.3847) 1.0)
    (set-vector! vec8 (meters 2258.7648) (meters -20) (meters -408.6256) 1.0)
    (spawn-blocking-plane-course vec7 vec8 (meters 700) 0.0 #t)
    (set! *arena-blockers* #t)
    )
    (none)
)


(defun spawn-oasis-artifact ()
    (let ((pos 
            (new 'static 'vector
                    :x (meters 638.2655)
                    :y (meters 14.8769)
                    :z (meters 2522.8432)
                    :w 1.0
                    )
        )
        )
        (when (= in-desert-game-task? #f)
            (if (rand-vu-percent? 0.08) 
                (spawn-gun-upgrade pos 1.0)
                (spawn-artifact pos)
            )
            (task-node-open! (game-task-node desert-spawn-task-oasis-goto-artifact) #t)
            (set! desert-spawn-mission-oasis #t)
            (set-mcount)
        )
    )
    (none)
)

;(new 'static 'vector :x (meters 2539.2421) :y (meters 23.0453) :z (meters 3332.9597) :w 1.0)

(defun spawn-deserta-artifact ()
    (let ((pos 
            (new 'static 'vector
                    :x (meters 2539.2421)
                    :y (meters 23.0453)
                    :z (meters 3332.9597)
                    :w 1.0
                    )
        )
        )
        (when (= in-desert-game-task? #f)
            (spawn-artifact pos)
            (task-node-open! (game-task-node desert-spawn-task-deserta-goto-artifact) #t)
            (set! desert-spawn-mission-deserta #t)
            (set-mcount)
        )
    )
    (none)
)

(defun spawn-brute-artifact ()
    (let ((pos 
            (new 'static 'vector
                    :x (meters 825.8018)
                    :y (meters 89.0678)
                    :z (meters 3340.8896)
                    :w 1.0
                    )
        )
        )
        (task-arrow-custom pos #t)
        (spawn-gun-upgrade pos 1.0)
        ;(task-node-open! (game-task-node desert-fight-goto-artifact) #t)
        (set! desert-spawn-mission-brute #t)
        (task-node-close! (game-task-node desert-brute-killed-introduction) #t)
    )
    (none)
)

(define global-float-time 0.0)

(defun toggle-dark-mode ()
    (cond 
      ((= weather-dark-mode #t)
        (kill-by-name "dust-storm-randomizer" *default-pool*)
        (reset-actors 'life)
        (set-continue! *game-info* "wasdoors-city" #t)
        (send-event (ppointer->process *time-of-day*) 'change 'hour (the int global-float-time))
        (set! *force-stop-pilot* #f)
        (when (= desert-task-stored #t)
            (set! desert-task-stored #f)
            (set! in-desert-game-task? #t)
        )
        (when (or
                (= in-desertf-anchor? #t)
                (= in-desertc-anchor? #t)
              )
            (set! in-desertf-anchor? #f)
            (set! in-desertc-anchor? #f)
        )
        (set! weather-dark-mode #f)
      )
      ((= weather-dark-mode #f)
        (reset-actors 'life)
        (start-menu-music!)
        (spawn-dark-world-forest)
        (when (= in-desert-game-task? #t)
            (set! in-desert-game-task? #f)
            (set! desert-task-stored #t)
        )
        (spawn-dust-storm)
        (set! global-volume-level (-> *setting-control* user-default music-volume))
        (set! (-> *setting-control* user-default music-volume) 0.0)
        (when (= in-main-menu? #f)
            (set! global-float-time (-> *time-of-day-context* time))
        )
        (set! weather-dark-mode #t)
        (set! (-> *mood-control* overide-weather-flag) #f)
        (set! (-> *time-of-day-context* overide-enable) #f)
        (set! *force-stop-pilot* #t)
        (set-continue! *game-info* "wasdoors-city" #t)
        (task-node-close! (game-task-node desert-interceptors-attack) #f)
      )
    )
    (none)
  )



  (defun toggle-white-mode ()
    (cond 
        ((= white-mode #t)
            (set! white-mode #f)
            (when (= weather-dark-mode #t)
                (lambda ()
                (mem-copy! (the-as pointer *overide-mood-color-table*) (the-as pointer *debug-mood-color-table*) 256)
                (mem-copy! (the-as pointer *overide-mood-fog-table*) (the-as pointer *debug-mood-fog-table*) 384)
                (dotimes (v1-0 8)
                  (set! (-> *overide-mood-color-table* data v1-0 lgt-color w) 1.0)
                  (set! (-> *overide-mood-color-table* data v1-0 amb-color w) 1.0)
                  (set! (-> *overide-mood-fog-table* data v1-0 fog-color w) 1.0)
                  (set! (-> *overide-mood-fog-table* data v1-0 fog-dists x)
                        (* 0.00024414062 (-> *overide-mood-fog-table* data v1-0 fog-dists x))
                        )
                  (set! (-> *overide-mood-fog-table* data v1-0 fog-dists y)
                        (* 0.00024414062 (-> *overide-mood-fog-table* data v1-0 fog-dists y))
                        )
                  (set-vector! (-> *time-of-day-context* times v1-0) 1.0 1.0 1.0 1.0)
                  )
                (set-vector! (-> *time-of-day-context* filter-color) 1.0 1.0 1.0 1.0)
                (set! (-> *time-of-day-context* current-clouds cloud-min) (-> *mood-control* mood-clouds cloud-min))
                (set! (-> *time-of-day-context* current-clouds cloud-max) (-> *mood-control* mood-clouds cloud-max))
                )
                (set! (-> *time-of-day-context* overide-enable) #f)
            )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2))
                                   lgt-color
                                   y
                                   )
                               1.0
                               )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   lgt-color
                                   y
                                   )
                               0.0
                               )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   lgt-color
                                   z
                                   )
                               1.0
                               )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   lgt-color
                                   w
                                   )
                               1.0
                               )
            (set! (-> *time-of-day-context* overide-enable) #f)
        )
        ((= white-mode #f)
            (set! white-mode #t)
            (set! (-> *time-of-day-context* overide-enable) #t)
            (set! (-> *overide-mood-color-table*
                                   data
                                   (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2))
                                   lgt-color
                                   y
                                   )
                               1.9921
                               )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   lgt-color
                                   y
                                   )
                               1.9921
                               )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   lgt-color
                                   z
                                   )
                               1.9921
                               )
            (set! (-> *overide-mood-color-table*
                                   data
                                   (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                   lgt-color
                                   w
                                   )
                               17.0
                               )
        )
    )
    (none)
  )

  (defun factory-level ()
    (cond 
        ((= in-factory-level? #f)
            (reset-actors 'life)
            (set! in-factory-level? #t)
            (dark-weather-override)
        )
        ((= in-factory-level? #t)
            (set! in-factory-level? #f)
            (reset-actors 'life)
        )
    )
    (none)
  )

  (defun mine-level ()
    (cond 
        ((= in-mine-level? #f)
            (reset-actors 'life)
            (set! in-mine-level? #t)
            (dark-weather-override)
        )
        ((= in-mine-level? #t)
            (set! in-mine-level? #f)
            (reset-actors 'life)
        )
    )
    (none)
  )

  (defun spawn-volcano-mobs ()
    (let ((vsat (new 'static 'vector 
                :x (meters -2.9549)
                :y (meters 2.7735)
                :z (meters -134.4601)
                :w 1.0))
            (vspwnr1 (new 'static 'vector 
                :x (meters -34.6815)
                :y (meters 2.3782)
                :z (meters -164.6925)
                :w 1.0))
            (vspwnr2 (new 'static 'vector 
                :x (meters -50.4494)
                :y (meters 2.1483)
                :z (meters -180.6845)
                :w 1.0))
            (vspwnr3 (new 'static 'vector 
                :x (meters 43.2954)
                :y (meters 1.7311)
                :z (meters -134.0780)
                :w 1.0))
            (ray1 (new 'static 'vector 
                :x (meters 116.7456)
                :y (meters 26.3955)
                :z (meters 97.0830)
                :w 1.0))
            (ray2 (new 'static 'vector 
                :x (meters 108.2330)
                :y (meters 26.3494)
                :z (meters 104.4923)
                :w 1.0))
            (ray3 (new 'static 'vector 
                :x (meters 91.7798)
                :y (meters 4.2707)
                :z (meters 184.8023)
                :w 1.0))
            (ray4 (new 'static 'vector 
                :x (meters 100.0860)
                :y (meters 4.2804)
                :z (meters 189.9547)
                :w 1.0))
            (ray5 (new 'static 'vector 
                :x (meters 64.7718)
                :y (meters 1.9312)
                :z (meters -27.1555)
                :w 1.0))
            (ray6 (new 'static 'vector 
                :x (meters 76.7986)
                :y (meters 2.0951)
                :z (meters -43.2198)
                :w 1.0))
            (ray7 (new 'static 'vector 
                :x (meters 63.8897)
                :y (meters 2.0640)
                :z (meters -51.8499)
                :w 1.0))
            (ray8 (new 'static 'vector 
                :x (meters 69.4898)
                :y (meters 2.2157)
                :z (meters -42.0185)
                :w 1.0))
            (ray9 (new 'static 'vector 
                :x (meters 60.3712)
                :y (meters 2.4700)
                :z (meters -63.0167)
                :w 1.0))
            (toad-boss (new 'static 'vector 
                :x (meters 38.5190)
                :y (meters 33.5731)
                :z (meters 211.3394)
                :w 1.0))
                )
        (process-spawn manta ray1 :name "manta")
        (process-spawn manta ray2 :name "manta")
        (process-spawn manta ray3 :name "manta")
        (process-spawn manta ray4 :name "manta")
        (process-spawn manta ray5 :name "manta")
        (process-spawn manta ray6 :name "manta")
        (process-spawn manta ray7 :name "manta")
        (process-spawn manta ray8 :name "manta")
        (process-spawn manta ray9 :name "manta")
        (process-spawn steamroller toad-boss :name "toad-boss")
        (spawn-manipy-sat vsat "manipy-sat" #f)
        ;(process-spawn dm-mine-spider-spawner vspwnr1 :name "dm-spawner")
        (process-spawn dm-mine-spider-spawner vspwnr2 :name "dm-spawner")
        (process-spawn dm-mine-spider-spawner vspwnr3 :name "dm-spawner")
        (none)
    )
  )

  (defun volcano-level ()
    (cond 
        ((= in-volcano-level? #f)
            (reset-actors 'life)
            (set! in-volcano-level? #t)
            (spawn-volcano-mobs)
            (dark-weather-override)
        )
        ((= in-volcano-level? #t)
            (set! in-volcano-level? #f)
            (reset-actors 'life)
            (kill-by-name "dm-spawner" *default-pool*)
            (kill-by-name "manipy-sat" *default-pool*)
        )
    )
    (none)
  )

  (defun drop-crate ((vec vector) (tier int))
    (let ((fact (new 'static 'fact-info))
          (tier-name "none")
          )
        (cond
            ((= tier 1)
                (set! tier-name "crate-tier1")
            )
            ((= tier 2)
                (set! tier-name "crate-tier2")
            )
            ((= tier 3)
                (set! tier-name "crate-tier3")
            )
            (else
                (set! tier-name "crate-tier1")
            )
        )
        (set! (-> fact pickup-type) (the-as pickup-type #f))
        (set! (-> fact pickup-amount) 0.0)
        (cond
            ((= tier 1)
                (process-spawn crate (the-as entity #f) vec 'urn-a fact :name tier-name *entity-pool*)
            )
            ((= tier 2)
                (process-spawn crate (the-as entity #f) vec 'wood fact :name tier-name *entity-pool*)
            )
            ((= tier 3)
                (process-spawn crate (the-as entity #f) vec 'metal fact :name tier-name *entity-pool*)
            )
            (else
                (process-spawn crate (the-as entity #f) vec 'urn-a fact :name tier-name *entity-pool*)
            )
        )
    )
    (none)
  )

  (defun birth-drop1 ((vec vector))
    (let ((fact (new 'static 'fact-info))
          (rnd (rand-vu-int-range 1 5))
          (rnd-count-gem (rand-vu-int-range 1 3))
          )
        (when (rand-vu-percent? 0.00000073)
            (set! rnd 6)
        )
        (set! (-> fact options) (actor-option blocked))
        (cond
         ((= rnd 1)
            (set! (-> fact pickup-type) (pickup-type gem))
            (set! (-> fact pickup-amount) (the float rnd-count-gem))
         )
         ((= rnd 2)
            (set! (-> fact pickup-type) (pickup-type ammo-yellow))
            (set! (-> fact pickup-amount) 30.0)
         )
         ((= rnd 3)
            (set! (-> fact pickup-type) (pickup-type ammo-red))
            (set! (-> fact pickup-amount) 30.0)
         )
         ((= rnd 4)
            (cond 
                ((or
                    (logtest? (-> *game-info* features) (game-feature gun-blue-1))
                    (logtest? (-> *game-info* features) (game-feature gun-blue-2))
                    (logtest? (-> *game-info* features) (game-feature gun-blue-3))
                )
                    (set! (-> fact pickup-type) (pickup-type ammo-blue))
                )
                (else
                    (set! (-> fact pickup-type) (pickup-type ammo-yellow))
                )
            )
            (set! (-> fact pickup-amount) 50.0)
         )
         ((= rnd 5)
            (if (or
                    (logtest? (-> *game-info* features) (game-feature gun-dark-1))
                    (logtest? (-> *game-info* features) (game-feature gun-dark-2))
                    (logtest? (-> *game-info* features) (game-feature gun-dark-3))
                )
                (set! (-> fact pickup-type) (pickup-type ammo-dark))
                (set! (-> fact pickup-type) (pickup-type ammo-red))
            )
            (set! (-> fact pickup-amount) 10.0)
         )
         ((= rnd 6)
            (set! (-> fact pickup-type) (pickup-type gun-yellow-1))
            (set! (-> fact pickup-amount) 30.0)
         )
        )
        (birth-pickup-at-point vec (-> fact pickup-type) (-> fact pickup-amount) #t *entity-pool* (the-as fact-info #f))
    )
    (none)
  )

  (defun birth-drop2 ((vec vector))
    (let ((fact (new 'static 'fact-info))
          (rnd (rand-vu-int-range 1 4))
          (rnd-count-gem (rand-vu-int-range 3 7))
          (rnd-crystal (rand-vu-int-range 1 1))
          (rnd-lvl 0.0)
          )
        (when (rand-vu-percent? 0.02)
            (set! rnd 5)
        )
        (when (rand-vu-percent? 0.0025)
            (set! rnd 6)
        )
        (when (>= notoriety-level 35)
            (set! rnd-lvl 0.0007)
        )
        (when (>= notoriety-level 45)
            (set! rnd-lvl 0.0008)
        )
        (when (>= notoriety-level 55)
            (set! rnd-lvl 0.0009)
        )
        (when (>= notoriety-level 65)
            (set! rnd-lvl 0.001)
        )
        (when (rand-vu-percent? rnd-lvl)
            (set! rnd 7)
        )
        (set! (-> fact options) (actor-option blocked))
        (cond
         ((= rnd 1)
            (set! (-> fact pickup-type) (pickup-type ammo-red))
            (set! (-> fact pickup-amount) 150.0)
         )
         ((= rnd 2)
            (cond 
                ((or
                    (logtest? (-> *game-info* features) (game-feature gun-blue-1))
                    (logtest? (-> *game-info* features) (game-feature gun-blue-2))
                    (logtest? (-> *game-info* features) (game-feature gun-blue-3))
                )
                    (set! (-> fact pickup-type) (pickup-type ammo-blue))
                )
                (else
                    (set! (-> fact pickup-type) (pickup-type ammo-yellow))
                )
            )
            (set! (-> fact pickup-amount) 120.0)
         )
         ((= rnd 3)
            (cond 
                ((or
                    (logtest? (-> *game-info* features) (game-feature gun-dark-1))
                    (logtest? (-> *game-info* features) (game-feature gun-dark-2))
                    (logtest? (-> *game-info* features) (game-feature gun-dark-3))
                )
                    (set! (-> fact pickup-type) (pickup-type ammo-dark))
                )
                (else
                    (set! (-> fact pickup-type) (pickup-type ammo-yellow))
                )
            )
            (set! (-> fact pickup-amount) 50.0)
         )
         ((= rnd 4)
            (set! (-> fact pickup-type) (pickup-type gem))
            (set! (-> fact pickup-amount) (the float rnd-count-gem))
         )
         ((= rnd 5)
            (set! (-> fact pickup-type) (pickup-type eco-crystal-dark-c))
            (set! (-> fact pickup-amount) (the float rnd-crystal))
         )
         ((= rnd 6)
            (set! (-> fact pickup-type) (pickup-type gun-yellow-1))
            (set! (-> fact pickup-amount) 1.0)
         )
         ((= rnd 7)
            (set! (-> fact pickup-type) (pickup-type gun-mod-upgrade))
         )
        )
        (birth-pickup-at-point vec (-> fact pickup-type) (-> fact pickup-amount) #t *entity-pool* (the-as fact-info #f))
    )
    (none)
  )

  (defun birth-drop3 ((vec vector))
    (let ((fact (new 'static 'fact-info))
          (rnd (rand-vu-int-range 1 2))
          (rnd-crystal (rand-vu-int-range 3 20))
          (rnd-count-gem (rand-vu-int-range 8 15))
          (rnd-lvl 0.0)
          )
        (when (rand-vu-percent? 0.022)
            (set! rnd 3)
        )
        (when (>= notoriety-level 35)
            (set! rnd-lvl 0.0012)
        )
        (when (>= notoriety-level 45)
            (set! rnd-lvl 0.0008)
        )
        (when (>= notoriety-level 55)
            (set! rnd-lvl 0.0009)
        )
        (when (>= notoriety-level 65)
            (set! rnd-lvl 0.001)
        )
        (when (rand-vu-percent? rnd-lvl)
            (set! rnd 4)
        )
        (set! (-> fact options) (actor-option blocked))
        (cond
         ((= rnd 1)
            (set! (-> fact pickup-type) (pickup-type eco-crystal-dark-c))
            (set! (-> fact pickup-amount) (the float rnd-crystal))
         )
         ((= rnd 2)
            (set! (-> fact pickup-type) (pickup-type gem))
            (set! (-> fact pickup-amount) (the float rnd-count-gem))
         )
         ((= rnd 3)
            (set! (-> fact pickup-type) (pickup-type gun-yellow-1))
            (set! (-> fact pickup-amount) 1.0)
         )
         ((= rnd 4)
            (set! (-> fact pickup-type) (pickup-type gun-mod-upgrade))
         )
        )
        (birth-pickup-at-point vec (-> fact pickup-type) (-> fact pickup-amount) #t *entity-pool* (the-as fact-info #f))
    )
    (none)
  )

  (defun birth-drop-rage ((vec vector))
    (spawn-gun-upgrade vec 1.0)
    (none)
  )

  (defun group-drop! ((arg1 vector) (tier2-chance float) (tier3-chance float)) ;rewrite this to add an integer and utilize dotimes to plant every specific crate
    (let ((rnd 1)
          (vec (new-stack-vector0))
          )
        (set! vec arg1)
        (when (rand-vu-percent? tier2-chance)
            (set! rnd 2)
        )
        (when (rand-vu-percent? tier3-chance)
            (set! rnd 3)
        )
        (drop-crate vec rnd)
        (+! (-> vec x) (meters 3))
        (set! rnd 1)
        (when (rand-vu-percent? tier2-chance)
            (set! rnd 2)
        )
        (when (rand-vu-percent? tier3-chance)
            (set! rnd 3)
        )
        (drop-crate vec rnd)
        (+! (-> vec x) (meters 3))
        (set! rnd 1)
        (when (rand-vu-percent? tier2-chance)
            (set! rnd 2)
        )
        (when (rand-vu-percent? tier3-chance)
            (set! rnd 3)
        )
        (drop-crate vec rnd)
        (+! (-> vec x) (meters 3))
        (set! rnd 1)
        (when (rand-vu-percent? tier2-chance)
            (set! rnd 2)
        )
        (when (rand-vu-percent? tier3-chance)
            (set! rnd 3)
        )
        (drop-crate vec rnd)
        (+! (-> vec x) (meters 3))
        (set! rnd 1)
        (when (rand-vu-percent? tier2-chance)
            (set! rnd 2)
        )
        (when (rand-vu-percent? tier3-chance)
            (set! rnd 3)
        )
        (drop-crate vec rnd)
        (+! (-> vec z) (meters 3))
        (when (>= notoriety-level 35)
            (set! vec arg1)
            (+! (-> vec x) (meters -3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )

        (when (>= notoriety-level 35)
            (+! (-> vec x) (meters -3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )

        (when (>= notoriety-level 45)
            (+! (-> vec x) (meters -3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )

        (when (>= notoriety-level 45)
            (+! (-> vec x) (meters -3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )
        (when (>= notoriety-level 60)
            (+! (-> vec x) (meters -3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )
        (when (>= notoriety-level 60)
            (+! (-> vec x) (meters -3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )
        (when (>= notoriety-level 60)
            (+! (-> vec z) (meters 3))
            (+! (-> vec x) (meters 3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )
        (when (>= notoriety-level 75)
            (+! (-> vec x) (meters 3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )
        (when (>= notoriety-level 75)
            (+! (-> vec x) (meters 3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )
        (when (>= notoriety-level 75)
            (+! (-> vec x) (meters 3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )
        (when (>= notoriety-level 100)
            (+! (-> vec x) (meters 3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )
        (when (>= notoriety-level 100)
            (+! (-> vec x) (meters 3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )
        (when (>= notoriety-level 100)
            (+! (-> vec x) (meters 3))
            (set! rnd 1)
            (when (rand-vu-percent? tier2-chance)
                (set! rnd 2)
            )
            (when (rand-vu-percent? tier3-chance)
                (set! rnd 3)
            )
            (drop-crate vec rnd)
        )
        )
    (none)
  )

  (defun drop-loot-crate! ((vec vector) (tier2-chance float) (tier3-chance float))
    (let ((rnd 1))
          (when 
            (and 
              (rand-vu-percent? tier2-chance)
              (>= notoriety-level 10)
            )
            (set! rnd 2)
          )
          (when 
            (and 
              (rand-vu-percent? tier2-chance)
              (>= notoriety-level 18)
            )
            (set! rnd 3)
          )
          (drop-crate vec rnd)
          (format #t "~%~%[][][][]~%Dropped Tier ~D Crate" rnd)
        )
        (none)
  )

  (defun drop-rage-crate ((vec vector))
    (let ((fact (new 'static 'fact-info))
          (tier-name "crate-rage")
          )
        (set! (-> fact pickup-type) (the-as pickup-type #f))
        (set! (-> fact pickup-amount) 0.0)
        (process-spawn crate (the-as entity #f) vec 'metal fact :name tier-name *entity-pool*)
    )
    (none)
  )

  (define in-cfreeze? #f)

  (defun freeze-enemies-in-menu! ()
    (process-spawn-function process
    :name "proc-mask-enemyfreeze"
  (lambda :behavior process ()
    (loop
      (set-setting! 'process-mask 'set 0.0 (process-mask enemy platform projectile death))
      (suspend)
      )))
    (none)
  )

  (defun toggle-freeze ()
    #|(cond
        ((= in-cfreeze? #f)
            (set! (-> *target* lightjak freeze-control) (ppointer->handle (process-spawn
                freeze-control
                :init freeze-control-init
                (-> *target* lightjak freeze-sound)
                :name "freeze-control"
                :to *target*
                )
                )
            )
            (set! in-cfreeze? #t)
        )
        ((= in-cfreeze? #t)
            (set! in-cfreeze? #f)
        )
    )|#
    (set! (-> *target* lightjak freeze-control) (ppointer->handle (process-spawn
                freeze-control
                :init freeze-control-init
                (-> *target* lightjak freeze-sound)
                :name "freeze-control"
                :to *target*
                )
                )
            )
    (none)
  )

  (defun dark-weather-override ()
    (set! (-> *overide-mood-fog-table* data (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2))) fog-color x) 255.0)
    (set! (-> *overide-mood-fog-table*
                            data
                            (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                            fog-color
                            y
                            )
                        0.0
                        )
    (set! (-> *overide-mood-fog-table*
                            data
                            (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                            fog-color
                            z
                            )
                        255.0
                        )
    (set! (-> *overide-mood-color-table*
                            data
                            (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2))
                            lgt-color
                            y
                            )
                        1.0
                        )
    (set! (-> *overide-mood-color-table*
                            data
                            (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                            lgt-color
                            y
                            )
                        0.0
                        )
    (set! (-> *overide-mood-color-table*
                            data
                            (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                            lgt-color
                            z
                            )
                        1.0
                        )
    (set! (-> *overide-mood-color-table*
                            data
                            (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                            lgt-color
                            w
                            )
                        1.0
                        )
    (none)
  )

(defun launch-mmenu ()
    (initialize! *game-info* 'game (the-as game-save #f) "desert-bd-start" (the-as resetter-spec #f))
    (set! (-> *game-info* mode) 'play)
    (send-event (ppointer->process *time-of-day*) 'change 'hour 19)
    (set! (-> *time-of-day-context* mode) (the-as time-of-day-palette-id 5))
    (send-event (ppointer->process *time-of-day*) 'change 'ratio 0.0)
    (set! (-> *time-of-day-context* overide-enable) #t)
    (set! (-> *mood-control* overide-weather-flag) #t)
    (dark-weather-override)
    (when (!= globalrandi 0)
        (set! globalrandi 0)
    )
    (set! mainmenu-camera #t)
    (none)
)

  
(defskelgroup skel-dm-skyship dm-ship dm-ship-lod0-jg dm-ship-idle-ja
              ((dm-ship-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 90999999)
              :origin-joint-index 3
              :global-effects 32
              )

#|(deftype dm-skyship (process-drawable)
  ((size          vector)
   (pos           vector)
   )
  (:state-methods
    idle
    )
  )

  (defstate idle (dm-skyship)
    :virtual #t
    :code (behavior ()
        (suspend)
    )
  )

  (defbehavior dm-skyship-init-by-other dm-skyship ((vec vector))
    (vector-copy! (-> self root trans) vec)
    (quaternion-identity! (-> self root quat))
    (vector-identity! (-> self root scale))
    (go (method-of-object self idle))
  )|#

  (defun spawn-precursor-man ((vec vector))
    (let ((man (process-spawn manipy
          :init
          manipy-init
          vec
          #f
          (art-group-get-by-name *level* "skel-precursor-boss" (the (pointer level) #f))
          #f
          0
          #f
          :name "man-eb"
          :from *default-dead-pool*
          ))
            (veccy (new 'stack-no-clear 'vector))
            )
        (when (ppointer->process man)
          (send-event (ppointer->process man) 'shadow #t)
          (set! (-> veccy x) 2.0)
          (set! (-> veccy y) 2.0)
          (set! (-> veccy z) 2.0)
          (send-event (ppointer->process man) 'scale veccy)
          (send-event (ppointer->process man) 'max-vis-dist 9999999.0)
            )
      )
    (none)
  )

  (defun lightjak-get-off-part ((vec vector))
    (set! (-> *launch-matrix* trans quad) (-> vec quad))
    (if (logtest? (-> *part-group-id-table* 176 flags) (sp-group-flag sp13))
              (part-tracker-spawn
                part-tracker-subsampler
                :to *active-pool*
                :group (-> *part-group-id-table* 176))
              (part-tracker-spawn 
                part-tracker 
                :to *active-pool*
                :group (-> *part-group-id-table* 176))
              )
    (none)
  )

  (defun init-entity-1! ()
    (let ((ent-pos (new-stack-vector0)))
        (set! (-> ent-pos quad) (-> (target-pos 0) quad))
        (+! (-> ent-pos y) (meters 8))
        (set-vector! (-> *target* control trans) (-> ent-pos x) (-> ent-pos y) (-> ent-pos z) 1.0)
        (spawn-precursor-man ent-pos)
        (lightjak-get-off-part ent-pos)
        (process-grab? *target* #f)
        (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
        (set! in-dialogue? #t)
        (set! log-id 42)
        (set! log-sec 0)
        (set! di-s "<COLOR_RED>Corruption")
        (set! di-s2 "<COLOR_RED>An Unknown Date and Time...")
        (set! di-s3 "<COLOR_RED>")
        (set! di-s4 "<COLOR_RED>")
        (send-event *target* 'draw #f)
        (set-vector! stored-target-vector (-> ent-pos x) (-> ent-pos y) (-> ent-pos z) 1.0)
        (auto-save-delayed)
    )
    (none)
  )
  (defun init-entity-2! ()
    (let ((ent-pos (new-stack-vector0)))
        (set! (-> ent-pos quad) (-> (target-pos 0) quad))
        (+! (-> ent-pos y) (meters 8))
        (set-vector! (-> *target* control trans) (-> ent-pos x) (-> ent-pos y) (-> ent-pos z) 1.0)
        (spawn-precursor-man ent-pos)
        (lightjak-get-off-part ent-pos)
        (process-grab? *target* #f)
        (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
        (set! in-dialogue? #t)
        (set! log-id 43)
        (set! log-sec 0)
        (set! di-s "<COLOR_RED>The time was in 1999")
        (set! di-s2 "<COLOR_RED>The move set blueprint was just completed")
        (set! di-s3 "<COLOR_RED>")
        (set! di-s4 "<COLOR_RED>")
        (send-event *target* 'draw #f)
        (set! (-> stored-target-vector quad) (-> ent-pos quad))
        (auto-save-delayed)
    )
    (none)
  )
  (defun init-entity-3! ()
    (let ((ent-pos (new-stack-vector0)))
        (set! (-> ent-pos quad) (-> (target-pos 0) quad))
        (+! (-> ent-pos y) (meters 8))
        (set-vector! (-> *target* control trans) (-> ent-pos x) (-> ent-pos y) (-> ent-pos z) 1.0)
        (spawn-precursor-man ent-pos)
        (lightjak-get-off-part ent-pos)
        (process-grab? *target* #f)
        (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
        (set! in-dialogue? #t)
        (set! log-id 44)
        (set! log-sec 0)
        (set! di-s "<COLOR_RED>Sometime in 1999...")
        (set! di-s2 "<COLOR_RED>")
        (set! di-s3 "<COLOR_RED>")
        (set! di-s4 "<COLOR_RED>")
        (send-event *target* 'draw #f)
        (set! (-> stored-target-vector quad) (-> ent-pos quad))
        (auto-save-delayed)
    )
    (none)
  )
  (defun init-entity-4! ()
    (let ((ent-pos (new-stack-vector0)))
        (set! (-> ent-pos quad) (-> (target-pos 0) quad))
        (+! (-> ent-pos y) (meters 8))
        (set-vector! (-> *target* control trans) (-> ent-pos x) (-> ent-pos y) (-> ent-pos z) 1.0)
        (spawn-precursor-man ent-pos)
        (lightjak-get-off-part ent-pos)
        (process-grab? *target* #f)
        (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
        (set! in-dialogue? #t)
        (set! log-id 45)
        (set! log-sec 0)
        (set! di-s "<COLOR_RED>A little bit after the release of Jak II...")
        (set! di-s2 "<COLOR_RED>")
        (set! di-s3 "<COLOR_RED>")
        (set! di-s4 "<COLOR_RED>")
        (send-event *target* 'draw #f)
        (set! (-> stored-target-vector quad) (-> ent-pos quad))
        (auto-save-delayed)
    )
    (none)
  )
  (defun init-entity-5! ()
    (let ((ent-pos (new-stack-vector0)))
        (set! (-> ent-pos quad) (-> (target-pos 0) quad))
        (+! (-> ent-pos y) (meters 8))
        (set-vector! (-> *target* control trans) (-> ent-pos x) (-> ent-pos y) (-> ent-pos z) 1.0)
        (spawn-precursor-man ent-pos)
        (lightjak-get-off-part ent-pos)
        (process-grab? *target* #f)
        (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
        (set! in-dialogue? #t)
        (set! log-id 46)
        (set! log-sec 0)
        (set! di-s "<COLOR_RED>Before the conceptions of Jak 3...")
        (set! di-s2 "<COLOR_RED>")
        (set! di-s3 "<COLOR_RED>")
        (set! di-s4 "<COLOR_RED>")
        (send-event *target* 'draw #f)
        (set! (-> stored-target-vector quad) (-> ent-pos quad))
        (auto-save-delayed)
    )
    (none)
  )

  (defun drop-gun-mod! ((vec vector))
    (birth-pickup-at-point vec (pickup-type gun-mod-upgrade) 1.0 #t *entity-pool* (the-as fact-info #f))
    (none)
  )

(defun reset-gunmod-vars! ((reset-all? symbol))
    (set! gunmod-bigshot #f)
    (set! gunmod-sheild #f)
    (set! gunmod-missles #f)
    (set! gunmod-nukeonly #f)
    (set! gunmod-freeze #f)
    (set! gunmod-fireball #f)
    (set! gunmod-ammo #f)
    (set! gunmod-disperser #f)
    (set! gunmod-airstrike #f)
    (set! gunmod-morpher #f)
    (set! gunmod-randomshot #f)
    (set! gunmod-reaper #f)
    (set! gunmod-saucers #f)
    (set! bigshot-unlocked? #f)
    (set! shield-unlocked? #f)
    (set! missles-unlocked? #f)
    (set! nukeonly-unlocked? #f)
    (set! freeze-unlocked? #f)
    (set! fireball-unlocked? #f)
    (set! ammo-unlocked? #f)
    (set! disperser-unlocked? #f)
    (set! airstrike-unlocked? #f)
    (set! morpher-unlocked? #f)
    (set! random-unlocked? #f)
    (set! reaper-unlocked? #f)
    (set! red-1s "???")
    (set! red-2s "???")
    (set! red-3s "???")
    (set! yellow-1s "???")
    (set! yellow-2s "???")
    (set! yellow-3s "???")
    (set! blue-1s "???")
    (set! blue-2s "???")
    (set! blue-3s "???")
    (set! dark-1s "???")
    (set! dark-2s "???")
    (set! dark-3s "???")
    (when (= inf-fall? #t)
        (toggle-inf-fall)
    )
    (when reset-all?
        (task-node-open! (game-task-node modr-bigshot) #t)
        (task-node-open! (game-task-node modr-shield) #t)
        (task-node-open! (game-task-node modr-missles) #t)
        (task-node-open! (game-task-node mody-fireball) #t)
        (task-node-open! (game-task-node mody-freeze) #t)
        (task-node-open! (game-task-node mody-nukeonly) #t)
        (task-node-open! (game-task-node modb-airstrike) #t)
        (task-node-open! (game-task-node modb-ammo) #t)
        (task-node-open! (game-task-node modb-disperser) #t)
        (task-node-open! (game-task-node modd-morpher) #t)
        (task-node-open! (game-task-node modd-random) #t)
        (task-node-open! (game-task-node modd-reaper) #t)
    )
    (none)
)

(defun objective-completed ()
    (set! objective-win #t)
    (set! obj-i 0)
    (none)
)

(defun runs-on-blackout ()
    (kill-by-name "Fallen Satellite" *default-pool*)
    (kill-by-name "manipy-sat" *default-pool*)
    (kill-by-name "dp-bipedal-c" *default-pool*)
    (kill-by-name "Bipedal Boss" *default-pool*)
    (kill-by-name "marauder-c" *default-pool*)
    (kill-by-name "goredrinker" *default-pool*)
    (kill-by-name "vin-effect" *default-pool*)
    (kill-by-name "toad-boss" *default-pool*)
    (kill-by-name "task-arrow-custom" *default-pool*)
    (kill-by-name "jak3logo" *default-pool*)
    (kill-by-name "flut-racer" *default-pool*)
    (kill-by-name "rage-ghost" *default-pool*)
    (kill-by-name "roboguard-giant" *default-pool*)
    (kill-by-name "entity-boss" *default-pool*)
    (kill-by-name "man-eb" *default-pool*)
    (kill-by-name "proc-mask-enemyfreeze" *active-pool*)
    (kill-by-name "arena-event-1" *active-pool*)
    (kill-by-name "darkworld-tower" *active-pool*)
    (kill-by-name "jak3logo" *active-pool*)
    (kill-by-name "jak3logo-flicker" *active-pool*)
    (when (not (task-node-open? (game-task-node wascity-leaper-race-resolution)))
        (set! *enemies-explode* #f)
    )
    (when (ppointer->process *jak3logo*)
        (send-event (ppointer->process *jak3logo*) 'diepls #t)
    )
    (when (task-node-open? (game-task-node wascity-defend-resolution))
        (task-node-open! (game-task-node wascity-defend-get-to) #t)
    )
    (when 
        (or
            (task-node-open? (game-task-node arena-replay-1-fight))
            (task-node-open? (game-task-node arena-replay-2-fight))
            (task-node-open? (game-task-node arena-replay-3-fight))
        )
        (task-node-open! (game-task-node arena-replay-1-introduction) #t)
        (task-node-open! (game-task-node arena-replay-2-introduction) #t)
        (task-node-open! (game-task-node arena-replay-3-introduction) #t)
        (set-continue! *game-info* "wasstada-win" #t)
        (set! enemy-noto 1)
    )
    (set! nice-try-dude #f)
    (set! *arena-event* #f)
    (set! *force-stop-pilot* #f)
    (set! *rage-ghost* #f)
    (set! spawned-logo? #f)
    (set! mine-boss-fireball? #f)
    (set! onfoot-battle? #f)
    (set! spawned-vin-circle? #f)
    (task-node-open! (game-task-node desert-spawn-task-oasis-goto-artifact) #t)
    (task-node-open! (game-task-node desert-spawn-task-deserta-goto-artifact) #t)
    (when
        (and
            (= anchor-day? #f)
            (rand-vu-percent? 0.03)
        )
            (set! anchor-day? #t)
        )
    (when (= in-desertf-anchor? #t)
        (set! anchor-target-dead? #t)
    )
    (when (or
            (task-node-open? (game-task-node mine-boss-extra-resolution))
            (task-node-closed? (game-task-node mine-boss-extra-resolution))
          )
        (task-node-open! (game-task-node mine-boss-extra) #t)
        (set! in-mine-boss? #f)
    )
    (set! desert-spawn-mission-oasis #f)
    (set! desert-spawn-mission-deserta #f)
    (set! desert-spawn-mission-brute #f)
    (stop-main-music)
    (set! (-> *setting-control* user-default music-volume) global-volume-level) ;terrible hack to give the main menu and dark world music.
    (kill-all-sat)
    (when (= enemy-hp #t)
        (set! enemy-hp #f)
        (set! hpi 0)
    )
    (when 
        (task-node-closed? (game-task-node arena-training-1-resolution))
        (set! arena-token-count 0)
        (set! in-tutorial? #f)
        (set! tutorial-freeze 0)
        (set! tutorial-msg 0)
    )
    (when 
        (task-node-open? (game-task-node wascity-pre-game-wait))
        (task-node-close! (game-task-node wascity-pre-game-resolution) #t)
    )
    (when (= weather-dark-mode #t)
        (toggle-dark-mode)
        (set-continue! *game-info* "wasdoors-city" #t)
      )
    (when (= in-volcano-level? #t)
        (kill-by-name "dm-spawner" *default-pool*)
        (kill-by-name "manta" *default-pool*)
        (spawn-volcano-mobs)
    )
    (set! (-> *run-attack-mods* align-speed) 1.0)
    (set! (-> *run-attack-mods* impact-fric) 1.0)
    (set! in-arena-fight? #f)
    (set! pause-menu-blocked? #f)
    (camera-unlocked)
    (none)
)

(defun blank-hint! ((say string) (say2 string) (y-axis int) (time int))
    (set! bhint-max time)
    (set! bhint-string say)
    (set! bhint-string2 say2)
    (set! bhint-i 0)
    (set! bhint-y y-axis)
    (set! blank-hint #t)
    (none)
)