(in-package goal)
;name: gyro-warp.gc

(defpartgroup group-nestb-rift-ring
  :id 1559
  :duration (seconds 0.017)
  :linger-duration (seconds 1.5)
  :flags (sp0)
  :bounds (static-bspherem 9999 9999 9999 9999)
  :rotate ((degrees 90) (degrees 0) (degrees 0))
  :parts ((sp-item 5259 :flags (is-3d sp5 sp6))
    (sp-item 5260 :flags (sp6))
    (sp-item 5261 :flags (sp5))
    (sp-item 5262 :flags (sp5))
    (sp-item 5263 :flags (sp6))
    )
  )

(defpart 5263
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0 1.0)
    (:x (meters 30))
    (:y (meters 10))
    (:scale-x (meters 0.25) (meters 0.25))
    (:rot-x 4)
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 0.0)
    (:b 128.0)
    (:a 64.0)
    (:omega (degrees 0.0225) (degrees 0.0225))
    (:vel-x (meters -0.36666667))
    (:vel-y (meters -0.123333335))
    (:fade-r 0.32)
    (:fade-g 0.64)
    (:fade-b 0.0)
    (:fade-a 0.32)
    (:friction 0.95)
    (:timer (seconds 0.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 5264
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 24))
    (:scale-y :copy scale-x)
    (:r 16.0)
    (:g 0.0)
    (:b 32.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-14))
    (:rotate-y (degrees 0))
    )
  )

(defpart 5261
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 5))
    (:rot-x (degrees 45))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 48.0 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 819.2)
    )
  )

(defpart 5262
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 48))
    (:rot-x (degrees 45))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 0.0)
    (:b 128.0)
    (:a 48.0 4.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 65536.0)
    )
  )

(defpart 5259
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 0.0 0.1)
    (:z (meters 0.2))
    (:scale-x (meters 2) (meters 24))
    (:scale-y :copy scale-x)
    (:r 196.0)
    (:g 255.0)
    (:b 196.0)
    (:a 0.0)
    (:fade-a 0.4 0.4)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    (:next-time (seconds 0.267))
    (:next-launcher 5265)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 5265
  :init-specs ((:fade-a 0.0) (:next-time (seconds 0.535)) (:next-launcher 5266))
  )

(defpart 5266
  :init-specs ((:fade-a -0.8))
  )

(defpart 5260
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 8.0)
    (:x (meters 12))
    (:scale-x (meters 3) (meters 3))
    (:scale-y :copy scale-x)
    (:r 0.0 196.0)
    (:g 0.0)
    (:b 128.0 128.0)
    (:a 16.0 16.0)
    (:omega (degrees 0.045) (degrees 0.045))
    (:vel-x (meters -0.10666667))
    (:fade-r -0.42666668 0.6533333)
    (:fade-g 0.42666668)
    (:fade-b 0.0 -0.21333334)
    (:friction 0.96)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

  (deftype jak-maker-grenade (dp-bipedal-grenade-shot)
    ()
  )

(defmethod setup-collision! ((this jak-maker-grenade))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate jak-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 4096.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  (none)
  )

  ;; WARN: Return type mismatch sound-id vs none.
(defmethod init-proj-settings! ((this jak-maker-grenade))
  (set! (-> this attack-mode) 'explode)
  (set! (-> this blast-radius) 12288.0)
  (set! (-> this max-speed) 135168.0)
  (set! (-> this timeout) (seconds 4))
  (set! (-> this update-velocity) projectile-update-velocity-add-gravity)
  (set! (-> this move) gren-canister-move)
  (set! (-> this damage) (+ 4.0 (the float (* guns-level 3))))
  (set! (-> this root dynam gravity y) 102400.0)
  (set! (-> this root dynam gravity-length) 102400.0)
  (set! (-> this root dynam gravity-max) 102400.0)
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 245) this))
  (set! (-> this sound-id) (new-sound-id))
  (none)
  )

  (defun someone-fire-dark-grenade ((arg1 vector) (arg2 vector) (arg3 float))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (let ((v1-1 (vector-! (new 'stack-no-clear 'vector) arg2 arg1)))
      (set! (-> gp-0 ent) (the-as entity #f))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options))
      (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
      (set! (-> gp-0 notify-handle) (the-as handle #f))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 target-handle) (the-as handle #f))
      (set! (-> gp-0 target-pos quad) (the-as uint128 0))
      (set! (-> gp-0 ignore-handle) (the-as handle #f))
      (let* ((a0-13 *game-info*)
             (a2-12 (+ (-> a0-13 attack-id) 1))
             )
        (set! (-> a0-13 attack-id) a2-12)
        (set! (-> gp-0 attack-id) a2-12)
        )
      (set! (-> gp-0 timeout) (seconds 4))
      (set! (-> gp-0 pos quad) (-> arg1 quad))
      (vector-normalize-copy! (-> gp-0 vel) v1-1 arg3)
      )
    (the-as
      (pointer jak-maker-grenade)
      (spawn-projectile jak-maker-grenade gp-0 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
      )
    )
    (none)
  )

  (defun start-rift-particle ((vec vector))
    (cond
      ((logtest? (-> *part-group-id-table* 1559 flags) (sp-group-flag sp13))
          (set! (-> *launch-matrix* trans quad) (-> vec quad))
          (part-tracker-spawn part-tracker-subsampler :to *active-pool* :group (-> *part-group-id-table* 1559))
          )
      (else
          (set! (-> *launch-matrix* trans quad) (-> vec quad))
          (part-tracker-spawn part-tracker :to *active-pool* :group (-> *part-group-id-table* 1559))
          )
      )
    (none)
  )

(deftype gyro-warp (process-drawable)
    ((timer                     int)
     (pos                       vector :inline)
     (fire-point                vector :inline)
     (fire-dir-out              vector :inline)
     (shot-x2                   int)
     (move-mode                 int)
     (stored-name               string)
     (entity-count              int)
    )
    (:state-methods
    deploy
    move
    set-unique-name
    dead
    )
    (:methods
        (fire-grenades! (_type_) none)
        (load-particles (_type_) none)
        (spawn-tentacles (_type_) none)
        (track-tentacles! (_type_) none)
        (send-anim-idle (_type_) none)
        (vector-spazz (_type_) none)
    )
)

(defstate set-unique-name (gyro-warp)
    :virtual #t
    :code
    (behavior ()
        (loop
            (let ((thename (new 'global 'string 2048 (the-as string #f))))
                (cond
                    ((process-by-name (-> self stored-name) *active-pool*)
                        (+! (-> self entity-count) 1)
                        (format thename "~s-~d" (-> self name) (-> self entity-count))
                        (set! (-> self stored-name) thename)
                    )
                    (else
                        (format thename "~s-~d" (-> self name) (-> self entity-count))
                        (set! (-> self stored-name) thename)
                    )
                )
                (if (>= (-> self entity-count) 4)
                    (go-virtual dead)
                )
                (when (not (process-by-name thename *active-pool*))
                    (set! (-> self name) thename)
                    (go-virtual deploy)
                )
            )
            (suspend)
        )
    )
)

(defbehavior gyro-warp-init-by-other gyro-warp ((vec vector))
    (stack-size-set! (-> self main-thread) 128)
    (set! (-> self timer) 0)
    (set! (-> self pos quad) (-> vec quad))
    (set! (-> self fire-point quad) (-> vec quad))
    (set! (-> self shot-x2) (rand-vu-int-range 9 14))
    (set! (-> self stored-name) (-> self name))
    (let ((statv (new-stack-vector0)))
        (set! (-> statv quad) (-> vec quad))
        (+! (-> statv x) 4096.0)
        (set! (-> self fire-dir-out quad) (-> statv quad))
    )
    (set! (-> self move-mode) (rand-vu-int-range 1 4))
    (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1559) self))
    (go (method-of-object self set-unique-name))
    (none)
)

(defstate deploy (gyro-warp)
    :virtual #t
    :code
    (behavior ()
        ;(spawn-tentacles self)
        (loop
            (load-particles self)
            ;(track-tentacles! self)
            (+! (-> self timer) 1)
            (+! (-> self pos y) (meters 0.1))
            (when (>= (-> self timer) 45)
                (go-virtual move)
            )
            (format *stdcon* "gyro-warp timer: ~d" (-> self timer))
            (suspend)
        )
    )
)

(defmethod send-anim-idle ((this gyro-warp))
    (let ((child (-> this child)))
            (while child
                (let ((brother1 (-> child 0 brother))
                    (brother2 (-> child 1 brother))
                    (brother3 (-> child 2 brother))
                    )
                    (send-event (ppointer->process brother1) 'anim-mode 'loop)
                    (send-event (ppointer->process brother1) 'art-joint-anim "dm-tentacle-idle-ja")
                    (send-event (ppointer->process brother2) 'anim-mode 'loop)
                    (send-event (ppointer->process brother2) 'art-joint-anim "dm-tentacle-idle-ja")
                    (send-event (ppointer->process brother3) 'anim-mode 'loop)
                    (send-event (ppointer->process brother3) 'art-joint-anim "dm-tentacle-idle-ja")
                )
            )
        )
    (none)
)

(defstate move (gyro-warp)
    :virtual #t
    :code
    (behavior ()
        ;(send-anim-idle self)
        (loop
            (+! (-> self timer) 1)
            (load-particles self)
            ;(track-tentacles! self)
            (cond
                ((= (-> self move-mode) 1)
                    (+! (-> self pos x) 300.0)
                )
                ((= (-> self move-mode) 2)
                    (-! (-> self pos x) 300.0)
                )
                ((= (-> self move-mode) 3)
                    (+! (-> self pos z) 300.0)
                )
                ((= (-> self move-mode) 4)
                    (-! (-> self pos z) 300.0)
                )
            )
                (when (>= (-> self timer) 23)
                    (set! (-> self timer) 0)
                    (if (> (-> self shot-x2) 0)
                        (-! (-> self shot-x2) 1)
                        (go (method-of-object self dead))
                    )
                    (fire-grenades! self)
                )
                (format *stdcon* "~%gyro-warp timer: ~d" (-> self timer))
            (suspend)
        )
    )
)

(defmethod load-particles ((this gyro-warp))
    (start-rift-particle (-> this pos))
    (none)
)

(defmethod fire-grenades! ((this gyro-warp))
    (vector-spazz this)
    (vector-spazz this)
    (vector-spazz this)
    (vector-spazz this)
    (when (rand-vu-percent? 0.5)
        (vector-spazz this)
    )
    (when (rand-vu-percent? 0.5)
        (vector-spazz this)
    )
    (when (rand-vu-percent? 0.5)
        (vector-spazz this)
    )
    (when (rand-vu-percent? 0.5)
        (vector-spazz this)
    )
    (when (rand-vu-percent? 0.5)
        (vector-spazz this)
    )
    (when (rand-vu-percent? 0.5)
        (vector-spazz this)
    )
    (when (rand-vu-percent? 0.5)
        (vector-spazz this)
    )
    (none)
)

(defmethod spawn-tentacles ((this gyro-warp))
    (let ((vec-size (new-stack-vector0))
          (tentaclea 
            (the manipy 
            (ppointer->process 
                (process-spawn manipy
                :init
                manipy-init
                (-> this pos)
                #f
                (art-group-get-by-name *level* "skel-dm-tentacle" (the (pointer level) #f))
                #f
                0
                #f
                :name "man-tentacle-a"
                :from *default-dead-pool*
                :to this
                )
            )
          )
      )
      (tentacleb
            (the manipy 
            (ppointer->process 
                (process-spawn manipy
                :init
                manipy-init
                (-> this pos)
                #f
                (art-group-get-by-name *level* "skel-dm-tentacle" (the (pointer level) #f))
                #f
                0
                #f
                :name "man-tentacle-b"
                :from *default-dead-pool*
                :to this
                )
            )
          )
      )
      (tentaclec
            (the manipy 
            (ppointer->process 
                (process-spawn manipy
                :init
                manipy-init
                (-> this pos)
                #f
                (art-group-get-by-name *level* "skel-dm-tentacle" (the (pointer level) #f))
                #f
                0
                #f
                :name "man-tentacle-c"
                :from *default-dead-pool*
                :to this
                )
            )
          )
      )
    )
    (set! (-> vec-size x) 0.5)
    (set! (-> vec-size y) 0.5)
    (set! (-> vec-size z) 0.5)
    (send-event tentaclea 'scale vec-size)
    (send-event tentaclea 'anim-mode 'loop)
    (send-event tentaclea 'art-joint-anim "dm-tentacle-spit-ja")
    (send-event tentacleb 'scale vec-size)
    (send-event tentacleb 'anim-mode 'loop)
    (send-event tentacleb 'art-joint-anim "dm-tentacle-spit-ja")
    (send-event tentaclec 'scale vec-size)
    (send-event tentaclec 'anim-mode 'loop)
    (send-event tentaclec 'art-joint-anim "dm-tentacle-spit-ja")
    )
    (none)
)

(defmethod vector-spazz ((this gyro-warp))
    (let ((rnd (rand-vu-int-range 1 14))
              (rnd2 (rand-vu-float-range -30.0 30.0))
              (rnd3 (rand-vu-float-range -30.0 30.0))
              (vec (new-stack-vector0))
              (startpos (new-stack-vector0))
              (plusvec (new-stack-vector0)) 
              (off (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))  
              )
            (set! off (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))
            (set! plusvec (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))
            (set! vec (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))
            (set! startpos (-> this pos))
            (if (rand-vu-percent? 0.5)
                (+! (-> off x) (* (rand-vu-float-range -100.0 100.0) 4096.0))
                (-! (-> off x) (* (rand-vu-float-range -100.0 100.0) 4096.0))
            )
            (if (rand-vu-percent? 0.5)
                (+! (-> off z) (* (rand-vu-float-range -100.0 100.0) 4096.0))
                (-! (-> off z) (* (rand-vu-float-range -100.0 100.0) 4096.0))
            )
            (set! vec (-> this pos)) 
            (vector-copy! plusvec (vector+! plusvec off vec))
            (set! startpos plusvec)
            (if (rand-vu-percent? 0.5)
                (vector-rotate-y! startpos startpos (degrees 45))
                (vector-rotate-y! startpos startpos (degrees -45))
            )
            (if (rand-vu-percent? 0.5)
                (vector-rotate-y! startpos startpos (degrees 90))
                (vector-rotate-y! startpos startpos (degrees -90))
            )
            (cond 
              ((= gunmod-randomshot #t)
                (random-shot! vec startpos this)
              )
              (else
                (someone-fire-dark-grenade vec startpos (rand-vu-float-range -255000.0 255000.0))
              )
            )
        )
    (none)
)

(defmethod track-tentacles! ((this gyro-warp))
    (let ((child (-> this child)))
      (while child
        (let ((brother1 (-> child 0 brother))
              (brother2 (-> child 1 brother))
              (brother3 (-> child 2 brother))
            )
            (send-event (ppointer->process brother1) 'trans (-> this pos))
            (set! child brother1)
            (send-event (ppointer->process brother2) 'trans (-> this pos))
            (set! child brother2)
            (send-event (ppointer->process brother3) 'trans (-> this pos))
            (set! child brother3)
        )
      )
    )
    (none)
)

(defstate dead (gyro-warp)
    :virtual #t
    :code
    (behavior ()
        (print "gyro-warp dead")
        (kill-by-name (-> self name) *active-pool*)
        (suspend)
    )
)

(defun black-hole! ((vec vector))
    (process-spawn gyro-warp vec :name "gyro-warp")
    (none)
)

(defun spawn-man-tentacle ((vec vector))
    (let ((tentaclea 
            (the manipy 
            (ppointer->process 
                (process-spawn manipy
                :init
                manipy-init
                vec
                #f
                (art-group-get-by-name *level* "skel-dm-tentacle" (the (pointer level) #f))
                #f
                0
                #f
                :name "man-tentacle-a"
                :from *default-dead-pool*
                :stack-size #x18000
                )
            )
          )
      ))
        (send-event tentaclea 'anim-mode 'loop)
        (send-event tentaclea 'art-joint-anim "dm-tentacle-spit-ja")
    )
)