(in-package goal)

;name: arena-events.gc


(deftype arena-event (process)
((gen-i                                    int)
 (event-mode                            string)
 (paused-proc?                          symbol)
 (event-timer                              int)
 (idle-timer                               int)
 (tesla-fire-time                          int)
 (spawn-pos                             vector :inline)
 (lightning-pos                         vector :inline)

)
(:state-methods
dormant
active
idle
fireballs!
tesla! ;.tm
barrels!
entity-explode!
dead
)
(:methods
 (arena-event-method-1  (_type_) none)
 (arena-event-method-2  (_type_) none)
 (arena-event-method-3  (_type_) none)
 (arena-event-method-4  (_type_) none)
 (arena-event-method-5  (_type_) none)
 (arena-event-handler (_type_ process int symbol event-message-block) none)
)
)

(defbehavior arena-event-init-by-other arena-event ((vec vector))
    (set! (-> self gen-i) 0)
    (set! (-> self event-mode) "None")
    (set! (-> self paused-proc?) #t)
    (set! (-> self event-timer) 400)
    (set! (-> self idle-timer) 1200)
    (go-virtual dormant)
    (none)
)

(defbehavior arena-event-event-handler arena-event ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (arena-event-handler self arg0 arg1 arg2 arg3)
  (none)
  )

(defmethod arena-event-handler ((this arena-event) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
(case arg2
    (('fireballs)
        (go (method-of-object this fireballs!))
    )
    (('tesla)
        (go (method-of-object this tesla!))
    )
    (('barrels)
        (go (method-of-object this barrels!))
    )
    (('entity-explode)
        (go (method-of-object this entity-explode!))
    )
    (('pause)
        (set! (-> this paused-proc?) #t)
        (go (method-of-object this dormant))
    )
    (('start)
        (set! (-> this paused-proc?) #f)
    )
    (('diff-increase)
        (when (>= (-> this idle-timer) 120)
            (-! (-> this idle-timer) (/ (-> this idle-timer) 24))
        )
        (when (>= (-> this event-timer) 120)
            (+! (-> this event-timer) (/ (-> this event-timer) 32))
        )
    )
)
(none)
)

(defun summon-arena-event ()
    (set! *arena-event* 
        (process-spawn
            arena-event
            :name "arena-event-1"
            *active-pool*
        )
    )
    (none)
)

(defstate active (arena-event)
    :virtual #t
    :event arena-event-event-handler
    :code
    (behavior ()
        (loop
            (cond
                ((and 
                  (or
                    (task-node-open? (game-task-node arena-replay-1-fight))
                    (task-node-open? (game-task-node arena-replay-2-fight))
                    (task-node-open? (game-task-node arena-replay-3-fight))
                   )
                   (= (-> self paused-proc?) #f)
                )
                    (go-virtual idle)
                )
                (else
                    (go-virtual dormant)
                )
            )
            (suspend)
        )
    )
    :exit
    (behavior ()
        (set! (-> self gen-i) 0)
    )
)

(defstate dormant (arena-event)
    :virtual #t
    :event arena-event-event-handler
    :code 
    (behavior ()
        (loop
            (when
                (and 
                  (or
                    (task-node-open? (game-task-node arena-replay-1-fight))
                    (task-node-open? (game-task-node arena-replay-2-fight))
                    (task-node-open? (game-task-node arena-replay-3-fight))
                   )
                   (= (-> self paused-proc?) #f)
                )
                    (blank-hint! "<COLOR_RED>CAUTION" "<COLOR_CYAN>ARENA EVENTS ACTIVE" 110 300)
                    (go-virtual idle)
            )
            (format *stdcon* "~%~s, DORMANT~%" (-> self name))
            (suspend)
        )
    )
    :exit
    (behavior ()
        (set! (-> self gen-i) 0)
    )
)

(defstate idle (arena-event)
    :virtual #t
    :event arena-event-event-handler
    :code
    (behavior ()
        (set! (-> self event-mode) "None")
        (loop
            (+! (-> self gen-i) 1)
            (when (>= (-> self gen-i) (-> self idle-timer))
                (arena-event-method-1 self)
            )
            (format *stdcon* "~%~s, idle,~%gen-i: ~d/~D~%Event: ~s~%" (-> self name) (-> self gen-i) (-> self idle-timer) (-> self event-mode))
            (suspend)
        )
    )
    :exit
    (behavior ()
        (set! (-> self gen-i) 0)
    )
)

(defmethod arena-event-method-1 ((this arena-event))
    (send-event (ppointer->process *arena-event*) 'diff-increase #t)
    (let ((rnd (rand-vu-int-range 1 4))
         )
         (when (= rnd 1)
            (set! (-> this event-mode) "Meteor Shower~%Take Erasive Action")
            (send-event (ppointer->process *arena-event*) 'fireballs #t)
         )
         (when (= rnd 2)
            (set! (-> this event-mode) "Dark Tesla")
            (send-event (ppointer->process *arena-event*) 'tesla #t)
         )
         (when (= rnd 3)
            (set! (-> this event-mode) "Barrel Rain")
            (send-event (ppointer->process *arena-event*) 'barrels #t)
         )
         (when (= rnd 4)
            (set! (-> this event-mode) "Enemies explode on Death")
            (send-event (ppointer->process *arena-event*) 'entity-explode #t)
         )
    )
    (none)
)

(defstate fireballs! (arena-event)
    :virtual #t
    :event arena-event-event-handler
    :code
    (behavior ()
        (blank-hint! "<COLOR_RED>METEOR SHOWER" "" 110 300)
        (loop
            (+! (-> self gen-i) 1)
            (when (rand-vu-percent? 0.25)
                (arena-event-method-3 self)
            )
            (when (>= (-> self gen-i) (-> self event-timer))
                (go-virtual idle)
            )
            (format *stdcon* "~%~s, fireballs!,~%gen-i: ~d/~D~%" (-> self name) (-> self gen-i) (-> self event-timer))
            (suspend)
        )
    )
    :exit
    (behavior ()
        (set! (-> self gen-i) 0)
    )
)

(defstate tesla! (arena-event)
    :virtual #t
    :event arena-event-event-handler
    :enter
    (behavior ()
        (arena-event-method-2 self)
    )
    :code
    (behavior ()
        (blank-hint! "<COLOR_CYAN>FIRE TESLA EXTERMINATOR" "" 110 300)
        (loop
            (+! (-> self gen-i) 1)
            (+! (-> self tesla-fire-time) 1)
            (when (<= (-> self tesla-fire-time) 220)
                (let ((gp-0 (-> self spawn-pos)))
                    (let ((a2-2 (new 'stack-no-clear 'vector)))
                    (vector-! a2-2 (-> self lightning-pos) gp-0)
                    (set! (-> *part-id-table* 9164 init-specs 4 initial-valuef) (vector-length a2-2))
                    (draw-beam (-> *part-id-table* 9164) gp-0 a2-2 #f)
                    )
                    (launch-particles (-> *part-id-table* 9166) (-> self lightning-pos))
                    (let ((s5-1 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> self lightning-pos) gp-0) 1.0)))
                        (let ((s4-0 (new 'stack-no-clear 'vector)))
                            (if *target*
                                (vector-! s4-0 (get-trans *target* 3) gp-0)
                            )
                        (vector+float*! s5-1 gp-0 s5-1 (vector-dot s5-1 s4-0))
                        )
                    )
                )
            )
            (when (= (-> self tesla-fire-time) 220)
                (set! (-> *part-id-table* 2280 init-specs 8 initial-valuef) 255.0) ;a
                (set! (-> *part-id-table* 2281 init-specs 8 initial-valuef) 64.0) ;a
                (set! (-> *part-id-table* 2280 init-specs 1 initial-valuef) 1600.0) ;scalex
                (set! (-> *part-id-table* 2280 init-specs 2 initial-valuef) (meters 98)) ;scalex
                (let ((gp-0 (new 'stack-no-clear 'explosion-init-params)))
                    (set! (-> gp-0 spawn-point quad) (-> self lightning-pos quad))
                    (quaternion-identity! (-> gp-0 spawn-quat))
                    (set! (-> gp-0 radius) (meters 45))
                    ;(set! (-> gp-0 scale) 1.0)
                    (set! (-> gp-0 group) (-> *part-group-id-table* 585))
                    (set! (-> gp-0 collide-with)
                            (collide-spec backgnd jak crate civilian obstacle vehicle-sphere hit-by-others-list player-list pusher)
                            )
                    (set! (-> gp-0 damage) 8.0)
                    (set! (-> gp-0 damage-scale) 1.0)
                    (set! (-> gp-0 vehicle-damage-factor) 1.0)
                    (set! (-> gp-0 vehicle-impulse-factor) 1.0)
                    (set! (-> gp-0 ignore-proc) (process->handle #f))
                    (explosion-spawn gp-0 (the-as process-drawable *default-pool*))
                )
            )
            (when (>= (-> self tesla-fire-time) 360)
                (set! (-> self tesla-fire-time) 0)
                (arena-event-method-2 self)
            )
            (when (>= (-> self gen-i) (-> self event-timer))
                (go-virtual idle)
            )
            (format *stdcon* "~%~s, tesla!,~%gen-i: ~d/~D~%tesla-fire-time: ~d~%" (-> self name) (-> self gen-i) (-> self event-timer) (-> self tesla-fire-time))
            (suspend)
            )
        )
    :exit
    (behavior ()
        (set! (-> self gen-i) 0)
        (set! (-> self tesla-fire-time) 0)
    )
)

(defstate barrels! (arena-event)
    :virtual #t
    :event arena-event-event-handler
    :code
    (behavior ()
        (blank-hint! "<COLOR_PINK>ITS RAINING BARRELS" "" 110 300)
        (loop
            (+! (-> self gen-i) 1)
            ;put event here
            (when (>= (-> self gen-i) (-> self event-timer))
                (go-virtual idle)
            )
            (format *stdcon* "~%~s, barrels!,~%gen-i: ~d/~D~%" (-> self name) (-> self gen-i) (-> self event-timer))
            (suspend)
        )
    )
    :exit
    (behavior ()
        (set! (-> self gen-i) 0)
    )
)

(defstate entity-explode! (arena-event)
    :virtual #t
    :event arena-event-event-handler
    :code
    (behavior ()
        (blank-hint! "<COLOR_RED>ENEMIES EXPLODE" "ON DEATH" 110 300)
        (loop
            (+! (-> self gen-i) 1)
            ;put event here
            (when (not *enemies-explode*)
                (set! *enemies-explode* #t)
            )
            (when (>= (-> self gen-i) (-> self event-timer))
                (go-virtual idle)
            )
            (format *stdcon* "~%~s, entity-explode!,~%gen-i: ~d/~D~%" (-> self name) (-> self gen-i) (-> self event-timer))
            (suspend)
        )
    )
    :exit
    (behavior ()
        (set! (-> self gen-i) 0)
        (set! *enemies-explode* #f)
    )
)

(defmethod arena-event-method-2 ((this arena-event))
    (let ((starting-pos (new-stack-vector0))
        (end-pos (new 'static 'vector :x (meters 2320.8693) :y (meters 11.5420) :z (meters -448.1469) :w 1.0))
        (rnd 1)
        )
        (set-vector! starting-pos (meters 2323.3222) (meters 94.5151) (meters -395.5171) 1.0)
        (cond
            ((and
                (task-node-open? (game-task-node arena-replay-1-fight))
                (not (task-node-open? (game-task-node arena-replay-2-fight)))
                (not (task-node-open? (game-task-node arena-replay-3-fight)))
             )
                (set-vector! end-pos (meters 2320.8693) (meters 11.5420) (meters -448.1469) 1.0)
            )
            ((and
                (not (task-node-open? (game-task-node arena-replay-1-fight)))
                (task-node-open? (game-task-node arena-replay-2-fight))
                (not (task-node-open? (game-task-node arena-replay-3-fight)))
             )
                (set! rnd (rand-vu-int-range 1 4))
                (cond
                    ((= rnd 1)
                        (set-vector! end-pos (meters 2299.0190) (meters 11.3475) (meters -466.9421) 1.0)
                    )
                    ((= rnd 2)
                        (set-vector! end-pos (meters 2297.8569) (meters 11.3475) (meters -497.3386) 1.0)
                    )
                    ((= rnd 3)
                        (set-vector! end-pos (meters 2352.6206) (meters 11.3475) (meters -446.6447) 1.0)
                    )
                    ((= rnd 4)
                        (set-vector! end-pos (meters 2351.7250) (meters 11.3475) (meters -496.5275) 1.0)
                    )
                    (else
                        (set-vector! end-pos (meters 2299.0190) (meters 11.3475) (meters -466.9421) 1.0)
                    )
                )
            )
            ((and
                (not (task-node-open? (game-task-node arena-replay-1-fight)))
                (not (task-node-open? (game-task-node arena-replay-2-fight)))
                (task-node-open? (game-task-node arena-replay-3-fight))
             )
                (set! rnd (rand-vu-int-range 1 6))
                (cond
                    ((= rnd 1)
                        (set-vector! end-pos (meters 2289.2575) (meters 12.6500) (meters -517.8077) 1.0)
                    )
                    ((= rnd 2)
                        (set-vector! end-pos (meters 2323.9975) (meters 11.9915) (meters -495.4933) 1.0)
                    )
                    ((= rnd 3)
                        (set-vector! end-pos (meters 2371.5834) (meters 12.6500) (meters -456.6551) 1.0)
                    )
                    ((= rnd 4)
                        (set-vector! end-pos (meters 2309.0620) (meters 12.6500) (meters -426.4647) 1.0)
                    )
                    ((= rnd 5)
                        (set-vector! end-pos (meters 2369.7248) (meters 12.6500) (meters -515.2936) 1.0)
                    )
                    ((= rnd 6)
                        (set-vector! end-pos (meters 2325.3781) (meters 12.1513) (meters -448.2707) 1.0)
                    )
                    (else
                        (set-vector! end-pos (meters 2289.2575) (meters 12.6500) (meters -517.8077) 1.0)
                    )
                )
            )
            ((and
                (task-node-open? (game-task-node arena-replay-1-fight))
                (task-node-open? (game-task-node arena-replay-2-fight))
                (task-node-open? (game-task-node arena-replay-3-fight))
             )
            (set! rnd (rand-vu-int-range 1 11))
                (cond
                    ((= rnd 1)
                        (set-vector! end-pos (meters 2289.2575) (meters 12.6500) (meters -517.8077) 1.0)
                    )
                    ((= rnd 2)
                        (set-vector! end-pos (meters 2323.9975) (meters 11.9915) (meters -495.4933) 1.0)
                    )
                    ((= rnd 3)
                        (set-vector! end-pos (meters 2371.5834) (meters 12.6500) (meters -456.6551) 1.0)
                    )
                    ((= rnd 4)
                        (set-vector! end-pos (meters 2309.0620) (meters 12.6500) (meters -426.4647) 1.0)
                    )
                    ((= rnd 5)
                        (set-vector! end-pos (meters 2369.7248) (meters 12.6500) (meters -515.2936) 1.0)
                    )
                    ((= rnd 6)
                        (set-vector! end-pos (meters 2325.3781) (meters 12.1513) (meters -448.2707) 1.0)
                    )
                    ((= rnd 7)
                        (set-vector! end-pos (meters 2299.0190) (meters 11.3475) (meters -466.9421) 1.0)
                    )
                    ((= rnd 8)
                        (set-vector! end-pos (meters 2297.8569) (meters 11.3475) (meters -497.3386) 1.0)
                    )
                    ((= rnd 9)
                        (set-vector! end-pos (meters 2352.6206) (meters 11.3475) (meters -446.6447) 1.0)
                    )
                    ((= rnd 10)
                        (set-vector! end-pos (meters 2351.7250) (meters 11.3475) (meters -496.5275) 1.0)
                    )
                    ((= rnd 11)
                        (set-vector! end-pos (meters 2320.8693) (meters 11.5420) (meters -448.1469) 1.0)
                    )
                    (else
                        (set-vector! end-pos (meters 2289.2575) (meters 12.6500) (meters -517.8077) 1.0)
                    )
                )
            )
            (else
                (set-vector! end-pos (meters 2320.8693) (meters 11.5420) (meters -448.1469) 1.0)
            )
        )
        (set-vector! (-> this spawn-pos) (-> starting-pos x) (-> starting-pos y) (-> starting-pos z) 1.0)
        (set-vector! (-> this lightning-pos) (-> end-pos x) (-> end-pos y) (-> end-pos z) 1.0)
    )
    (none)
)

(defmethod arena-event-method-3 ((this arena-event))
    (let ((rnd (rand-vu-int-range 1 14))
              (rnd2 (rand-vu-float-range -30.0 30.0))
              (rnd3 (rand-vu-float-range -30.0 30.0))
              (vec (new-stack-vector0))
              (startpos (new-stack-vector0))
              (plusvec (new-stack-vector0)) 
              (top-vec (new 'static 'vector :x (meters 2328.5246) :y (meters 61.7819) :z (meters -472.4429) :w 1.0))  
              (off (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))  
              )
            (set! off (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))
            (set! plusvec (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))
            (set! vec (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))
            (set! startpos top-vec)
            (if (rand-vu-percent? 0.5)
                (+! (-> off x) (* (rand-vu-float-range -100.0 100.0) 4096.0))
                (-! (-> off x) (* (rand-vu-float-range -100.0 100.0) 4096.0))
            )
            (if (rand-vu-percent? 0.5)
                (+! (-> off z) (* (rand-vu-float-range -100.0 100.0) 4096.0))
                (-! (-> off z) (* (rand-vu-float-range -100.0 100.0) 4096.0))
            )
            (set! vec top-vec) 
            (vector-copy! plusvec (vector+! plusvec off vec))
            (set! startpos plusvec)
            (if (rand-vu-percent? 0.5)
                (vector-rotate-y! startpos startpos (degrees 45))
                (vector-rotate-y! startpos startpos (degrees -45))
            )
            (if (rand-vu-percent? 0.5)
                (vector-rotate-y! startpos startpos (degrees 90))
                (vector-rotate-y! startpos startpos (degrees -90))
            )
            (spawn-fireball vec startpos (rand-vu-float-range -255000.0 255000.0))
        )
    (none)
)

(defmethod arena-event-method-4 ((this arena-event))
    (none)
)

(defmethod arena-event-method-5 ((this arena-event))
    (none)
)