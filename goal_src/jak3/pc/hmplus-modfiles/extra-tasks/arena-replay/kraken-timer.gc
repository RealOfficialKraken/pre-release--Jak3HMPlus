(in-package goal)

;name: kraken-timer.gc

;used for arena fights set up like a speedrun timer.
;It is heavily modded to pair well with the changes HM+ has made

(deftype kraken-timer (process)
  ((tick                   int)
   (tick2                  int)
   (seconds                int)
   (seconds2               int)
   (minutes                int)
   (minutes2               int)
   (hours                  int)
   (hours2                 int)
   (return-str          string)
   (return-tick         string)
   (timer-on?           symbol)
   (full-string         string)
   (obj-completed?      symbol)
  )
  (:state-methods
  idle
  stop
  dead
  )
  (:methods
  (draw-timer (_type_) none)
  (kraken-event-handler (_type_ process int symbol event-message-block) none)
  (check-for-completed-challenges (_type_) none)
  )
)

(defbehavior kraken-timer-event-handler kraken-timer ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (kraken-event-handler self arg0 arg1 arg2 arg3)
  (none)
  )

(defmethod kraken-event-handler ((this kraken-timer) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
(case arg2
    (('add-minute)
      (+! (-> this minutes) 1)
    )
    (('add-hour)
      (+! (-> this hours) 1)
    )
    (('stop-timer)
      (set! (-> this timer-on?) #f)
    )
    (('resume-timer)
      (set! (-> this timer-on?) #t)
    )
)
(none)
)

(defmethod check-for-completed-challenges ((this kraken-timer))
  (cond
    ((and
      (task-node-open? (game-task-node arena-challenge-1))
      (>= (-> this minutes) 3)
      (= (-> this seconds2) 0)
      (= (-> this seconds) 0)
    )
    (+! (-> *game-info* fuel) 15000.0)
    (objective-completed)
    (set! (-> this obj-completed?) #t)
    (task-node-close! (game-task-node arena-challenge-1) #t)
  )
  ((and
      (task-node-open? (game-task-node arena-challenge-2))
      (task-node-open? (game-task-node arena-replay-1-fight))
      (<= (-> this hours) 0)
      (<= (-> this minutes) 0)
      (< (-> this seconds2) 3)
      (>= global-marauder-count 30)
    )
    (level-up! 1)
    (level-up-guns! 1)
    (level-up-cars! 1)
    (objective-completed)
    (set! (-> this obj-completed?) #t)
    (task-node-close! (game-task-node arena-challenge-2) #t)
  )
  ((and
      (task-node-open? (game-task-node arena-challenge-3))
      (task-node-open? (game-task-node arena-replay-2-fight))
      (<= (-> this hours) 0)
      (< (-> this minutes) 2)
      (>= global-marauder-count 95)
    )
    (level-up! 1)
    (level-up-guns! 1)
    (level-up-cars! 1)
    (objective-completed)
    (set! (-> this obj-completed?) #t)
    (task-node-close! (game-task-node arena-challenge-3) #t)
  )
  ((and
      (task-node-open? (game-task-node arena-challenge-4))
      (task-node-open? (game-task-node arena-replay-3-fight))
      (<= (-> this hours) 0)
      (<= (-> this minutes) 1)
      (<= (-> this seconds2) 1)
      (< (-> this seconds) 6)
      (>= global-marauder-count 50)
    )
    (level-up! 1)
    (level-up-guns! 1)
    (level-up-cars! 1)
    (objective-completed)
    (set! (-> this obj-completed?) #t)
    (task-node-close! (game-task-node arena-challenge-4) #t)
  )
  )
  ;; the section below is for sending the start msg to arena-event
  (when
    (and
        (<= (-> this hours) 0)
        (= (-> this minutes) 3)
        (= (-> this seconds2) 2)
        (= (-> this seconds) 5)
        (ppointer->process *arena-event*)
    )
    (send-event (ppointer->process *arena-event*) 'start #t)
  )
  (none)
)

(defbehavior kraken-timer-init-by-other kraken-timer ()
  (set! (-> self tick) 0)
  (set! (-> self tick2) 0)
  (set! (-> self seconds) 0)
  (set! (-> self seconds2) 0)
  (set! (-> self minutes) 0)
  (set! (-> self minutes2) 0)
  (set! (-> self hours) 0)
  (set! (-> self hours2) 0)
  (set! (-> self obj-completed?) #f)
  (set! (-> self return-str) "")
  (cond
    ((task-node-open? (game-task-node arena-replay-1-fight))
      (set! (-> self timer-on?) #t)
      (go (method-of-object self idle))
    )
    (else
      (set! (-> self timer-on?) #f)
      (go (method-of-object self stop))
    )
  )
  (none)
)

(defun spawn-kraken-timer ()
  (set! *kraken-timer* 
    (process-spawn 
    kraken-timer 
    :name "kraken-timer" 
    :to *active-pool*)
    )
  (none)
)

(defstate idle (kraken-timer)
  :virtual #t
  :event kraken-timer-event-handler
  :code
  (behavior ()
    (loop
      (when 
        (and
          (not *scene-player*)
          *target*
          (= (pause-allowed?) #t)
        )
        (when (= (-> self obj-completed?) #f)
          (check-for-completed-challenges self)
        )
        (when (and
                  (= in-dialogue? #f)
                  (= init-entity-delay #f)
                  (= (-> self timer-on?) #t)
                  (> (-> *target* fact health) 0.0)
              )
          (+! (-> self tick) 1) ;raise ticks
        )
        (draw-timer self) ;draw the timer onscreen
      )
      ;;;;;;;;;;;;;COUNT UP;;;;;;;;;;;;;
      (when (>= (-> self tick) 10) ;00:00:0|0|
        (set! (-> self tick) 0)
        (+! (-> self tick2) 1)
      )
      (when (>= (-> self tick2) 6) ;00:00:|0|0
        (set! (-> self tick2) 0)
        (+! (-> self seconds) 1)
      )
      (when (>= (-> self seconds) 10) ;00:0|0|:00
        (set! (-> self seconds) 0)
        (+! (-> self seconds2) 1)
      )
      (when (>= (-> self seconds2) 6) ;00:|0|0:00
        (set! (-> self seconds2) 0)
        (+! (-> self minutes) 1)
      )
      (when (>= (-> self minutes) 10) ;00:|0|0:00
        (set! (-> self minutes) 0)
        (+! (-> self minutes2) 1)
      )
      (when (>= (-> self minutes2) 6) ;0|0|:00:00
        (set! (-> self minutes2) 0)
        (+! (-> self hours) 1)
      )
      (when (>= (-> self hours) 10) ;|0|0:00:00
        (set! (-> self hours) 0)
        (+! (-> self hours2) 1)
      )
      (when (>= (-> self hours2) 9) ;reset timer
        (set! (-> self hours2) 0)
        (set! (-> self hours) 0)
      )
      (when (= in-arena-fight? #f) ;stop timer after battle
        (send-event (ppointer->process *kraken-timer*) 'stop-timer #t)
        (go-virtual stop)
      )
      (when (>= (vector-vector-distance (target-pos 0) (new 'static 'vector :x (meters 2311.1000) :y (meters 50.0) :z (meters -495.6548) :w 1.0)) (meters 225)) ;kill timer after leaving
        (go-virtual dead)
      )
      (suspend)
    )
  )
)

(defstate stop (kraken-timer)
  :virtual #t
  :event kraken-timer-event-handler
  :code
  (behavior ()
    (loop
      (draw-timer self)
      (when (= (-> self timer-on?) #t)
        (go-virtual idle)
      )
      (when (>= (vector-vector-distance (target-pos 0) (new 'static 'vector :x (meters 2311.1000) :y (meters 50.0) :z (meters -495.6548) :w 1.0)) (meters 225)) ;kill timer after leaving
        (go-virtual dead)
      )
      (suspend)
    )
  )
)

(defstate dead (kraken-timer)
  :virtual #t
  :code
  (behavior ()
    (process-deactivate)
    (kill-by-name "kraken-timer" *active-pool*)
    (set! *kraken-timer* #f)
  )
)

(defmethod draw-timer ((this kraken-timer))
  (clear matt-str)
  (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_WHITE>~D~D:~D~D:~D~D"
  (-> this hours2)
  (-> this hours)
  (-> this minutes2)
  (-> this minutes)
  (-> this seconds2)
  (-> this seconds)
  )
  (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
  (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
  (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
  (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 10 65 0.0 (font-color default) (font-flags shadow kerning large))))
  (set! (-> font-ctx scale) 0.525)
  (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  (clear matt-str)
  (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_WHITE>~D~D"
  (-> this tick2)
  (-> this tick)
  )
  (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
  (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
  (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
  (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 82 0.0 (font-color default) (font-flags middle shadow kerning large))))
  (set! (-> font-ctx scale) 0.325)
  (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  
  (clear matt-str)
  (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_WHITE>Marauders Killed: ~d"
  global-marauder-count
  )
  (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
  (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
  (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
  (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 20 100 0.0 (font-color default) (font-flags shadow kerning large))))
  (set! (-> font-ctx scale) 0.275)
  (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  (none)
)
