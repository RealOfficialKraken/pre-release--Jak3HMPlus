(in-package goal)

;name: tm-vin-intro.gc

(deftype tm-vin-intro (task-manager)
  ((start-intro             symbol)
   (vin-timer                  int)
   (vin-spawned?            symbol)
   (arrow?                  symbol)
  )
 (:state-methods
 active
 spawn-vin
 idle
 dead
 )
)

(defstate active (tm-vin-intro)
    :virtual #t
    :code
    (behavior ()
        (set! (-> self start-intro) #f)
        (set! (-> self vin-spawned?) #f)
        (when (= weather-dark-mode #f)
            (let ((vec 
                (new 'static 'vector  
                :x (meters 2254.46)  
                :y (meters 26.90)  
                :z (meters 149.23)  
                :w 1.0)
                )
            )
            (task-arrow-custom vec #t)
            (set! (-> self arrow?) #t)
            )
        )
        (loop
            (let ((vec (new 'static 'vector
                        :x (meters 2384.7390)  
                        :y (meters 36.5538)  
                        :z (meters 537.5184)
                        :w 1.0)
                        )
                    )
                (when (and
                        (= weather-dark-mode #t)
                        (= (-> self arrow?) #t)
                      )
                    (kill-by-name "task-arrow-custom" *default-pool*)
                    (set! (-> self arrow?) #f)
                )
                (when 
                    (and
                        (>= (vector-vector-distance (target-pos 0) vec) 500000.0)
                        (= weather-dark-mode #t)
                        (= in-pre-tutorial? #f)
                        ;(task-node-closed? (game-task-node arena-fight-1-resolution))
                        (= (-> self start-intro) #f)
                    )
                    (set! (-> self start-intro) #t)
                    (camera-locked #f #f #f)
                    (go-virtual spawn-vin)
                )
            )
            (suspend)
        )
    )
)

(defstate spawn-vin (tm-vin-intro)
    :virtual #t
    :code 
    (behavior ()
        (loop
            (+! (-> self vin-timer) 1)
            (when (= (-> self vin-timer) 1)
                (disable-hudmap)
                (set! log-id 99)
            )
            #|(send-event *camera* 'teleport-to-vector-start-string
                (new 'static 'vector
                :x (meters 2210.0664)
                :y (meters 250.4410)
                :z (meters 593.1369)
                :w 1.0)
                )
            (set! (-> *target* cam-user-mode) 'fixed)
            (set-setting-by-param *setting-control* 'mode-name 'cam-fixed 0 0)
            (set-vector! (-> *target* control trans) (meters 2214.0627) (meters 250.4160) (meters 387.7540) 1.0)
            |#
            (turn-to-scene-camera
                (new 'static 'vector :x (meters 2209.9941) :y (meters 180.3785) :z (meters 317.6049) :w 1.0)
                (new 'static 'vector :x (meters 2209.9462) :y (meters 243.4277) :z (meters -46.9804) :w 1.0)
                #t
            )
            (when 
                (and
                    (>= (-> self vin-timer) 220)
                    (= (-> self vin-spawned?) #f)
                )
                (set! in-dialogue? #t)
                (set! log-sec 0)
                (set! di-s "Jak? Jak!")
                (set! di-s2 "")
                (set! di-s3 "")
                (set! di-s4 "")
                (set! *dark-forest* #f)
            )
            (when (= (-> self vin-spawned?) #t)
                (when (= (-> self vin-timer) 537)
                    (toggle-white-mode)
                )
                (when (= (-> self vin-timer) 540)
                    (let ((vec (new 'static 'vector
                                :x (meters 2210.5275)
                                :y (meters -250.3139)
                                :z (meters -46.37)
                                :w 1.0)
                            )
                        )
                        (toggle-white-mode)
                        (spawn-vin-effect vec "vin-talk-to")
                        (spawn-giant-vin-effect vec)
                        (set! (-> self vin-spawned?) #t)
                        (set! in-dialogue? #t)
                        (set! log-sec 0)
                        (set! log-id 99)
                        (set! di-s "It's me, Vin!")
                        (set! di-s2 "I finally found you")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                )
            )
            (when (>= (-> self vin-timer) 4000)
                (set! (-> self vin-timer) 1200)
            )
            (when 
                (and
                    (= in-dialogue? #t)
                    (= log-id 99)
                    (= (-> self vin-spawned?) #f)
                    (cpad-pressed? 0 x)
                )
                    (+! log-sec 1)
                    (when (= log-sec 1)
                        (set! in-dialogue? #f)
                        (set! (-> self vin-spawned?) #t)
                        (set! (-> self vin-timer) 421)
                    )
                )
            (when 
                (and
                    (= in-dialogue? #t)
                    (= log-id 99)
                    (= (-> self vin-spawned?) #t)
                    (cpad-pressed? 0 x)
                )
                    (+! log-sec 1)
                    (when (= log-sec 1)
                        (set! di-s "I thought I had secured everything, there was")
                        (set! di-s2 "absolutely no way out")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 2)
                        (set! di-s "well..")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 3)
                        (set! di-s "Then that means it's already too late")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 4)
                        (set! di-s "The Entity has escaped from this dimension")
                        (set! di-s2 "just as you did...")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 5)
                        (set! di-s "..oh man.")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 6)
                        (set! di-s "I've been working on a new plan")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 7)
                        (set! di-s "His essence lingers here still, so we can")
                        (set! di-s2 "discover clues as to who this guy might be")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 8)
                        (set! di-s "I do know that he is a virus who has taken")
                        (set! di-s2 "control of the game somehow..")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 9)
                        (set! di-s "He seems to be gathering all of the dark")
                        (set! di-s2 "eco in the fractal realms")
                        (set! di-s3 "...")
                        (set! di-s4 "Those are infinite dimensions")
                    )
                    (when (= log-sec 10)
                        (set! di-s "I can try to piece together where he")
                        (set! di-s2 "is, but he's breaking down the game too")
                        (set! di-s3 "quickly")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 11)
                        (set! di-s "You might have noticed a few changes to the")
                        (set! di-s2 "world around you, completely outside the norm")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 12)
                        (set! di-s "You might not understand..")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 13)
                        (set! di-s "...")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 14)
                        (set! di-s "I've been tracking a new collectable that I haven't")
                        (set! di-s2 "seen before...")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 15)
                        (set! di-s "<COLOR_PINK>Dark Eco Crystals<COLOR_WHITE>. They are out and about")
                        (set! di-s2 "everywhere! We should grab as many as we can.")
                        (set! di-s3 "The Entity still seems to want the dark eco inside.")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 16)
                        (set! di-s "It also looks like The Entity was trying to")
                        (set! di-s2 "look inside of the final boss files..")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 17)
                        (set! di-s "I see the terraformer but it's frozen, I wonder if")
                        (set! di-s2 "he ever got it working")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 18)
                        (set! di-s "Anyway.. Meet me in the garage, and bring me more")
                        (set! di-s2 "of those dark crystals. I can also offer the")
                        (set! di-s3 "extent of my knowledge in the form of advice hints.")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 19)
                        (set! in-dialogue? #f)
                        (set! log-sec 0)
                        (set! log-id 0)
                        (activate-crystalhud *target*)
                        (turn-to-scene-camera
                            (new 'static 'vector :x (meters 2209.9941) :y (meters 680.3785) :z (meters 317.6049) :w 1.0)
                            (new 'static 'vector :x (meters 2209.9462) :y (meters 143.4277) :z (meters -46.9804) :w 1.0)
                            #t
                        )
                        (camera-unlocked)
                        (go-virtual dead)
                    )
                )
            (suspend)
        )
    )
)

(defstate dead (tm-vin-intro)
    :virtual #t
    :code
    (behavior ()
        (set-vector! (-> *target* control trans) (meters 2275.8981) (meters 30.1341) (meters 286.3391) 1.0)
        (suspend-for (seconds 2))
            (kill-by-name "vin-effect-giant" *default-pool*)
            (kill-by-name "vin-talk-to" *default-pool*)
            (task-node-close! (game-task-node desert-vin-quest-introduction) #t)
            (task-node-close! (game-task-node desert-vin-quest-resolution) #t)
            (spawn-dark-world-forest)
        (auto-save-user)
    )
)