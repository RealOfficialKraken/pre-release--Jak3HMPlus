(in-package goal)

;name: vin-shop.gc

(define vin-objective1 "")
(define vin-objective2 "")
(define vin-objective3 "")
(define vin-objective4 "")

(defun play-story-log-1 ()
    (set! in-dialogue? #t)
    (set! log-id 1337)
    (none)
)

(defun play-story-log-2 ()
    (set! in-dialogue? #t)
    (set! di-s "Okay... This is weird")
    (set! di-s2 "These crystals contain huge amounts of code in them")
    (set! di-s3 "")
    (set! di-s4 "")
    (none)
)

(defun play-story-log-3 ()
    (set! in-dialogue? #t)
    (set! log-id 1337)
    (set! di-s "Great work, boys! As always...")
    (set! di-s2 "I can count on you..")
    (set! di-s3 "")
    (set! di-s4 "")
    (none)
)

(defun play-story-log-4 ()
    (set! in-dialogue? #t)
    (set! log-id 1337)
    (set! di-s "Great work, boys! As always...")
    (set! di-s2 "I can count on you..")
    (set! di-s3 "")
    (set! di-s4 "")
    (none)
)

(defun draw-vin-hint ()
    (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_GREEN>Triangle:<COLOR_WHITE>~%Talk to Cyber Vin"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (none)
)

(defun draw-vin-shop ()
    (when *dark-forest*
        (set! *dark-forest* #f)
        (kill-by-name "darkworld-tower" *default-pool*)
        (kill-by-name "darkworld-orb" *default-pool*)
    )
    (when (!= vin-crystals (the int (-> *game-info* civilians-killed)))
        (set! vin-crystals (the int (-> *game-info* civilians-killed)))
    )
    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
        (bucket-id particles)
        )
    (draw-sprite2d-xy s2-0 0 25 730 195 (new 'static 'rgba :a #x40) #x3fffff)
    (draw-sprite2d-xy s2-0 0 235 730 70 (new 'static 'rgba :a #x40) #x3fffff)
    )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Vin's Black Market"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 30 0.0 (font-color default) (font-flags middle kerning large))))
        (set! (-> font-ctx scale) 0.425)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Your Crystals:~%~D"
    vin-crystals
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 65 0.0 (font-color default) (font-flags middle kerning large))))
        (set! (-> font-ctx scale) 0.245)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>~%~%Dark Eco Crystals can be used here"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 30 0.0 (font-color default) (font-flags middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (cond
        ((= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 0)
            (set! vin-objective1 "<COLOR_YELLOW>We should start by gathering <COLOR_PINK>10 Dark Crystals<COLOR_YELLOW>.")
            (set! vin-objective2 "<COLOR_YELLOW>That should give me some clues about what exactly these are")
            (set! vin-objective3 "<COLOR_YELLOW>")
            (set! vin-objective4 "<COLOR_YELLOW>")
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "~S(x10) Research in The Entity~%~%~S(x35) Receive Mass Inverter~%~%~S(x25) Receive Peacemaker~%~%~S(x40) Receive Random Weapon~%~%~S(x15) Level Up Notoriety~%~%~%<COLOR_ORANGE>(<COLOR_BLUE>X <COLOR_ORANGE>Confirm)~%(<COLOR_RED>O <COLOR_ORANGE>Back)"
            vinw1
            vinw2
            vinw3
            vinw4
            vinw5
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            ;; reset bucket settings prior to drawing - font won't do self for us, and
            ;; draw-raw-image can sometimes mess them up. (intro sequence)
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 130 90 0.0 (font-color default) (font-flags kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        ((= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 0)
            (set! vin-objective1 "<COLOR_YELLOW>We should start by gathering <COLOR_PINK>10 Dark Crystals<COLOR_YELLOW>.")
            (set! vin-objective2 "<COLOR_YELLOW>That should give me some clues about what exactly these are")
            (set! vin-objective3 "<COLOR_YELLOW>")
            (set! vin-objective4 "<COLOR_YELLOW>")
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "~S(x15) Talk to Vin (OR) Research in The Entity~%~%~S(x35) Receive Mass Inverter~%~%~S(x25) Receive Peacemaker~%~%~S(x40) Receive Random Weapon~%~%~S(x15) Level Up Notoriety~%~%~%<COLOR_ORANGE>(<COLOR_BLUE>X <COLOR_ORANGE>Confirm)~%(<COLOR_RED>O <COLOR_ORANGE>Back)"
            vinw1
            vinw2
            vinw3
            vinw4
            vinw5
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            ;; reset bucket settings prior to drawing - font won't do self for us, and
            ;; draw-raw-image can sometimes mess them up. (intro sequence)
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 130 90 0.0 (font-color default) (font-flags kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (else
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "~S(Talk) <COLOR_WHITE>To Vin~%~%~S(x35) Receive Mass Inverter~%~%~S(x25) Receive Peacemaker~%~%~S(x10) Receive Random Weapon~%~%~S(x15) Level Up Notoriety~%~%~%<COLOR_ORANGE>(<COLOR_BLUE>X <COLOR_ORANGE>Confirm)~%(<COLOR_RED>O <COLOR_ORANGE>Back)"
            vinw1
            vinw2
            vinw3
            vinw4
            vinw5
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            ;; reset bucket settings prior to drawing - font won't do self for us, and
            ;; draw-raw-image can sometimes mess them up. (intro sequence)
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 130 90 0.0 (font-color default) (font-flags kerning large))))
                (set! (-> font-ctx scale) 0.325)
                (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
    )
    (when (= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Hint:~%~S~%~S~%~S~%~S"
        vin-objective1
        vin-objective2
        vin-objective3
        vin-objective4
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 240 0.0 (font-color default) (font-flags middle kerning large))))
            (set! (-> font-ctx scale) 0.425)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (cond
        ((= vin-select 0)
            (set! vinw1 "<COLOR_GREEN>")
            (set! vinw2 "<COLOR_WHITE>")
            (set! vinw3 "<COLOR_WHITE>")
            (set! vinw4 "<COLOR_WHITE>")
            (set! vinw5 "<COLOR_WHITE>")
        )
        ((= vin-select 1)
            (set! vinw1 "<COLOR_WHITE>")
            (set! vinw2 "<COLOR_GREEN>")
            (set! vinw3 "<COLOR_WHITE>")
            (set! vinw4 "<COLOR_WHITE>")
            (set! vinw5 "<COLOR_WHITE>")
        )
        ((= vin-select 2)
            (set! vinw1 "<COLOR_WHITE>")
            (set! vinw2 "<COLOR_WHITE>")
            (set! vinw3 "<COLOR_GREEN>")
            (set! vinw4 "<COLOR_WHITE>")
            (set! vinw5 "<COLOR_WHITE>")
        )
        ((= vin-select 3)
            (set! vinw1 "<COLOR_WHITE>")
            (set! vinw2 "<COLOR_WHITE>")
            (set! vinw3 "<COLOR_WHITE>")
            (set! vinw4 "<COLOR_GREEN>")
            (set! vinw5 "<COLOR_WHITE>")
        )
        ((= vin-select 4)
            (set! vinw1 "<COLOR_WHITE>")
            (set! vinw2 "<COLOR_WHITE>")
            (set! vinw3 "<COLOR_WHITE>")
            (set! vinw4 "<COLOR_WHITE>")
            (set! vinw5 "<COLOR_GREEN>")
        )
    )
    (cond
        ((= vin-hinti 1)
            (set! vinhs1 "<COLOR_YELLOW>The Terraformer outside seems to be locked by")
            (set! vinhs2 "a logic gate that asks for <COLOR_GREEN>50 <COLOR_PINK>Dark Eco Crystals<COLOR_YELLOW>.")
            (set! vinhs3 "<COLOR_YELLOW>Something big is hiding past that terraformer")
            (set! vinhs4 "")
        )
        ((= vin-hinti 2)
            (set! vinhs1 "<COLOR_YELLOW>You can find <COLOR_PINK>Dark Eco Crystals<COLOR_YELLOW> from")
            (set! vinhs2 "breaking Tier 3 <COLOR_PINK>Dark Crates<COLOR_YELLOW> dropped by enemies")
            (set! vinhs3 "")
            (set! vinhs4 "")
        )
        ((= vin-hinti 3)
            (set! vinhs1 "<COLOR_YELLOW>You can backtrack to levels you usually can't")
            (set! vinhs2 "get back to. These areas can have replayable bosses,")
            (set! vinhs3 "more enemies, and mini bosses.")
            (set! vinhs4 "")
        )
        ((= vin-hinti 4)
            (set! vinhs1 "<COLOR_YELLOW>Certain gun mods can be obtained only by")
            (set! vinhs2 "specific enemies as drops. Mainly through slaying")
            (set! vinhs3 "enemies")
            (set! vinhs4 "")
        )
        ((= vin-hinti 5)
            (set! vinhs1 "<COLOR_YELLOW>Through this door lies <COLOR_PINK>Dark Harbingers<COLOR_YELLOW>.")
            (set! vinhs2 "They have no knockback, and throw more grenades.")
            (set! vinhs3 "A great place for farming at high levels")
            (set! vinhs4 "")
        )
        ((= vin-hinti 6)
            (set! vinhs1 "<COLOR_YELLOW>The Entity is continuing to search for more")
            (set! vinhs2 "of itself, so you might find huge dark ships")
            (set! vinhs3 "in the sky. Fight them off to get a reward")
            (set! vinhs4 "")
        )
        ((= vin-hinti 7)
            (set! vinhs1 "<COLOR_YELLOW>The Seem mission looks like it goes on")
            (set! vinhs2 "forever, but there is an end to it.")
            (set! vinhs3 "Looks like it gives a free weapon mod")
            (set! vinhs4 "")
        )
        ((= vin-hinti 8)
            (set! vinhs1 "<COLOR_YELLOW>Dropped crates will vary more tiers when")
            (set! vinhs2 "you level up Jak's <COLOR_ORANGE>Notoriety<COLOR_YELLOW>.")
            (set! vinhs3 "")
            (set! vinhs4 "")
        )
        ((= vin-hinti 9)
            (set! vinhs1 "<COLOR_YELLOW>When enemies are a much higher <COLOR_ORANGE>level<COLOR_YELLOW>")
            (set! vinhs2 "than you, taking damage from them is an instant kill.")
            (set! vinhs3 "<COLOR_RED>When you kill these enemies, you gain bonus")
            (set! vinhs4 "reputation")
        )
        ((= vin-hinti 9999999999)
            (set! vinhs1 "<COLOR_YELLOW>")
            (set! vinhs2 "")
            (set! vinhs3 "")
            (set! vinhs4 "")
        )
        (else
            (set! vinhs1 "None")
            (set! vinhs2 "")
            (set! vinhs3 "")
            (set! vinhs4 "")
        )
    )
    (none)
)

(defun open-vin-shop! ()
    (set! in-vin-shop? #t)
    (set! vin-select 0)
    (disable-hudmap)
    ;(+! vin-hinti 1)
    (set! vin-hinti (rand-vu-int-range 1 8))
    (none)
)

(defun close-vin-shop! ()
    (set! in-vin-shop? #f)
    (set! di-s "")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
    (set! in-dialogue? #f)
    (set! dialogue-choice #f)
    (set! dialogue-select 0)
    (set! choice-given? #f)
    (set! log-sec 0)
    (set! log-id 0)
    (spawn-dark-world-forest)
    (enable-hudmap)
    (camera-unlocked)
    (none)
)

(defun play-default-log ()
    (cond
        ((= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1)
            (play-story-log-1)
            (set! log-sec 2)
        )
        ((= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 2)
            (play-story-log-2)
            (set! log-id 1348)
            (set! log-sec 2)
        )
        ((= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 3)
            (play-story-log-3)
        )
        ((= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 4)
            (play-story-log-4)
        )
        (else
            (print "|play-default-log| Cannot talk to vin because YOU NEED TO SET A CONVERSATION!")
        )
    )
    (none)
)

(defun runs-shop! () ;runs every frame when (= weather-dark-mode #t)
    (let ((shop-rad-vec (new-stack-vector0)))
        (set-vector! shop-rad-vec (meters 2263.7312) (meters 30.7659) (meters 184.4911) 1.0)
        (when 
            (and
                (= (-> (level-get-target-inside *level*) name) 'wasdoors)
                *target*
                (not *scene-player*)
                (= (paused?) #f)
                (= in-vin-shop? #f)
                (= in-menu? #f)
                (= in-dialogue? #f)
                (<= (vector-vector-distance (target-pos 0) shop-rad-vec) 130000.0)
            )
            (draw-vin-hint)
            (when (cpad-pressed? 0 triangle)
                (open-vin-shop!)
            )
        )
        (when 
            (and 
                (= in-vin-shop? #t)
                *target*
                (not *scene-player*)
                (= in-dialogue? #f)
                (= (paused?) #f)
            )
            (draw-vin-shop)
            (let ((cam-pos (new 'static 'vector :x (meters 2265.2912) :y (meters 33.0) :z (meters 225.7977) :w 1.0))
                (tpos (new 'static 'vector :x (meters 2265.9230) :y (meters 41.4826) :z (meters 190.6130) :w 1.0))
                )
                (turn-to-scene-camera cam-pos tpos #t)
            )
            ;controls
            (when
                (and
                    (cpad-pressed? 0 down)
                    (<= vin-select 4)
                )
                (+! vin-select 1)
                (when (> vin-select 4)
                    (set! vin-select 0)
                )
            )
            (when
                (and
                    (cpad-pressed? 0 up)
                    (>= vin-select 0)
                )
                (-! vin-select 1)
                (when (< vin-select 0)
                    (set! vin-select 4)
                )
            )
            (when (cpad-pressed? 0 circle)
                (close-vin-shop!)
            )
            ;select options
            (cond 
                ((and (cpad-pressed? 0 x) (= vin-select 0))
                    (cond
                        ((and (>= vin-crystals 10)(= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 0))
                            (-! (-> *game-info* civilians-killed) 10.0)
                            (+! (-> *game-info* continue-deaths) 1000000)
                            (play-story-log-1)
                            (set! log-sec 0)
                        )
                        ((and (>= vin-crystals 15)(= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1))
                            (-! (-> *game-info* civilians-killed) 15.0)
                            (+! (-> *game-info* continue-deaths) 1000000)
                            (play-story-log-2)
                            (set! log-id 1345)
                            (set! log-sec 0)
                        )
                        ((and (>= vin-crystals 20)(= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 2))
                            (-! (-> *game-info* civilians-killed) 20.0)
                            (+! (-> *game-info* continue-deaths) 1000000)
                            (play-story-log-3)
                            (set! log-sec 0)
                        )
                        ((and (>= vin-crystals 25)(= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 3))
                            (-! (-> *game-info* civilians-killed) 25.0)
                            (+! (-> *game-info* continue-deaths) 1000000)
                            (play-story-log-3)
                            (set! log-sec 0)
                        )
                        ((and (>= vin-crystals 30)(= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 4))
                            (-! (-> *game-info* civilians-killed) 30.0)
                            (+! (-> *game-info* continue-deaths) 1000000)
                            (play-story-log-4)
                            (set! log-sec 0)
                        )
                        (else
                            (when (> (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 0)
                                (play-default-log)
                            )
                        )
                    )
                )
                ((and (cpad-pressed? 0 x) (= vin-select 1) (>= vin-crystals 35) (not (logtest? (-> *game-info* features) (game-feature gun-dark-2))))
                    (-! (-> *game-info* civilians-killed) 35.0)
                    (give-weapon! "dark-2" 1)
                )
                ((and (cpad-pressed? 0 x) (= vin-select 2) (>= vin-crystals 25) (not (logtest? (-> *game-info* features) (game-feature gun-dark-1))))
                    (-! (-> *game-info* civilians-killed) 25.0)
                    (give-weapon! "dark-1" 1)
                )
                ((and (cpad-pressed? 0 x) (= vin-select 3) (>= vin-crystals 40))
                    (-! (-> *game-info* civilians-killed) 40.0)
                    (give-random-weapon)
                )
                ((and (cpad-pressed? 0 x) (= vin-select 4) (>= vin-crystals 15))
                    (-! (-> *game-info* civilians-killed) 15.0)
                    (level-up! 1)
                )
            )
        )
    )
    (when (and (= in-dialogue? #t) (= log-id 1337) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "Great work, boys!")
            (set! di-s2 "These... These crystals are very..")
            (set! di-s3 "very interesting...")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "I have more knowledge to share about these,")
              (set! di-s2 "if you would like to know..")
              (set! di-s3 "Otherwise press <COLOR_RED>O<COLOR_WHITE> to exit")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! dialogue-select 0)
              (set! choice-max 3)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "Who are you, again?")
              (set! di-c2 "How exactly do these crystals help?")
              (set! di-c3 "What do we know about The Entity?")
              (set! di-c4 "Why can't you fight The Entity yourself?")
        )
        (when (= log-sec 4)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1338)
                )
                ((= dialogue-select 1)
                    (set! log-id 1339)
                )
                ((= dialogue-select 2)
                    (set! log-id 1340)
                )
                ((= dialogue-select 3)
                    (set! log-id 1341)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )


    (when (and (= in-dialogue? #t) (= log-id 1338) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
              (set! di-s "Oh.. I get it, it has been a really")
              (set! di-s2 "long time since we last spoke.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "I am <COLOR_GREEN>Cyber Vin<COLOR_WHITE>, when I dunked")
              (set! di-s2 "my brain into the eco grid, I meshed together with")
              (set! di-s3 "dark eco energy")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "Since then, I've used my technical ability to expand")
              (set! di-s2 "my concious and cast a figment model to help you")
              (set! di-s3 "see me better.")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! di-s "Being all code is super weird")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 5)
              (set! di-s "But it's also SUPER FUN!")
              (set! di-s2 "I have no fear of my existence anymore!")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! di-s "...that is, until I discovered <COLOR_RED>The Entity")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 7)
              (set! di-s "...that is, until I discovered <COLOR_RED>The Entity")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
              (set! dialogue-select 0)
              (set! choice-given? #t)
              (set! dialogue-choice #t)
              (set! choice-max 1)
              (set! di-c1 "Who is The Entity?")
              (set! di-c2 "Why did you have to leave me here to rot?")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 8)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1340)
                    (set! log-sec 2)
                )
                ((= dialogue-select 1)
                    (set! log-id 1342)
                    (set! log-sec 0)
                )
            )
            (set! choice-given? #f)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1339) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
              (set! di-s "If you remember, <COLOR_RED>The Entity<COLOR_WHITE> got access to")
              (set! di-s2 "a tremenous amount of <COLOR_PINK>dark eco<COLOR_WHITE>.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "Well it seems as though he has run out of <COLOR_YELLOW>world")
              (set! di-s2 "<COLOR_WHITE>to spread this in, so it looks like he's")
              (set! di-s3 "storing them in these containers")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "Enemies that are spawned from him will have a good chance")
              (set! di-s2 "of containing these dark crystals.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! di-s "I...I'm not all that sure, beyond that.")
              (set! di-s2 "We should collect more of them to understand")
              (set! di-s3 "it further")
              (set! di-s4 "")
        )
        (when (= log-sec 5)
              (set! dialogue-select 0)
              (set! choice-max 3)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "Who are you, again?")
              (set! di-c2 "How exactly do these crystals help?")
              (set! di-c3 "What do we know about The Entity?")
              (set! di-c4 "Why can't you fight The Entity yourself?")
        )
        (when (= log-sec 6)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1338)
                )
                ((= dialogue-select 1)
                    (set! log-id 1339)
                )
                ((= dialogue-select 2)
                    (set! log-id 1340)
                )
                ((= dialogue-select 3)
                    (set! log-id 1341)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1340) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
              (set! di-s "<COLOR_RED>The Entity<COLOR_WHITE>...")
              (set! di-s2 "As far as I know, he is just like me")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "An AI created before the dawn of this world..")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "He was once designed to help our creators")
              (set! di-s2 "with the authenticity of the world, by")
              (set! di-s3 "letting him create it from the ground up.")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! di-s "But he implemented things that the developers weren't")
              (set! di-s2 "too fond of, stuff that went right under their noses..")
              (set! di-s3 "...Or so he thought..")
              (set! di-s4 "")
        )
        (when (= log-sec 5)
              (set! di-s "He went dormant after that, not sure why.")
              (set! di-s2 "For 20 long years, he stood that way.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! di-s "Then, things started to change when we got ported")
              (set! di-s2 "over to <COLOR_YELLOW>PC")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 7)
              (set! di-s "I don't know how exactly he got access to")
              (set! di-s2 "great amounts of <COLOR_PINK>dark eco<COLOR_WHITE>, but once")
              (set! di-s3 "he did, he wreaked havoc across the <COLOR_PINK>fractal realms<COLOR_WHITE>.")
              (set! di-s4 "")
        )
        (when (= log-sec 8)
              (set! di-s "He started by destroying the <COLOR_GREEN>Time Loop<COLOR_WHITE> for you,")
              (set! di-s2 "extinguishing your existence and destroying the world")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 9)
              (set! di-s "But together, we put an end to that by <COLOR_GREEN>restoring the time loop<COLOR_WHITE> for good.")
              (set! di-s2 "Afterwards, <COLOR_RED>I locked everyone up in this dimension...")
              (set! di-s3 "<COLOR_WHITE>I surely thought that was the end of it.")
              (set! di-s4 "")
        )
        (when (= log-sec 10)
              (set! dialogue-select 0)
              (set! choice-max 1)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "When I picked up that last crystal, he contacted me.")
              (set! di-c2 "Why did you have to leave me here to rot?")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 11)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1343)
                )
                ((= dialogue-select 1)
                    (set! log-id 1342)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1341) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
              (set! di-s "Are you kidding?")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "The second <COLOR_RED>The Entity<COLOR_WHITE> knows where I am,")
              (set! di-s2 "he's going to delete me from the system.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "If we don't stop him, he can completely change everything")
              (set! di-s2 "for good. Surely you've noticed the differences..")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! di-s "...And I'm sure you know that the world cannot be here without you.")
              (set! di-s2 "You literally bring existence together.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 5)
              (set! di-s "If he destroys you, the dimension will just cease.")
              (set! di-s2 "The <COLOR_PINK>fractal realms<COLOR_WHITE> would be put in danger again.")
              (set! di-s3 "I'm sure he knows that by now..")
              (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! di-s "Then, <COLOR_BLUE>Roguelike Jak II<COLOR_WHITE> would start all over")
              (set! di-s2 "again. And it would end the same exact way.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 7)
              (set! di-s "So I don't think it takes much more explanation.")
              (set! di-s2 "You're the best shot in defeating <COLOR_RED>The Entity")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 8)
              (set! dialogue-select 0)
              (set! choice-max 3)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "Who are you, again?")
              (set! di-c2 "How exactly do these crystals help?")
              (set! di-c3 "What do we know about The Entity?")
              (set! di-c4 "Why can't you fight The Entity yourself?")
        )
        (when (= log-sec 9)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1338)
                )
                ((= dialogue-select 1)
                    (set! log-id 1339)
                )
                ((= dialogue-select 2)
                    (set! log-id 1340)
                )
                ((= dialogue-select 3)
                    (set! log-id 1341)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1342) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
              (set! di-s "I did what I had to..")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "The world cannot exist without you, or me, in it.")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "If you were placed in a different realm to")
              (set! di-s2 "start over, the <COLOR_PINK>fractal realms<COLOR_WHITE> would")
              (set! di-s3 "be in danger again..")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! di-s "I couldn't risk any more danger.")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 5)
              (set! di-s "...")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! di-s "And yet it was all for naught, he escaped anyway.")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 7)
              (set! di-s "For what it's worth... I'm sorry, Jak.")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 8)
              (set! dialogue-select 0)
              (set! choice-max 3)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "Who are you, again?")
              (set! di-c2 "How exactly do these crystals help?")
              (set! di-c3 "What do we know about The Entity?")
              (set! di-c4 "Why can't you fight The Entity yourself?")
        )
        (when (= log-sec 9)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1338)
                )
                ((= dialogue-select 1)
                    (set! log-id 1339)
                )
                ((= dialogue-select 2)
                    (set! log-id 1340)
                )
                ((= dialogue-select 3)
                    (set! log-id 1341)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1343) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
              (set! di-s "...what? h-He did?")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "...")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "What did he say?")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! dialogue-select 0)
              (set! choice-max 0)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "He said something about how he created <COLOR_YELLOW>Hero and Sidekick")
              (set! di-c2 "")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 5)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1344)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1344) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
              (set! di-s "I see..")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "Now THAT'S interesting..")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "<COLOR_YELLOW>Hero and Sidekick<COLOR_WHITE> are names derived from")
              (set! di-s2 "the <COLOR_ORANGE>original<COLOR_WHITE> concept art for... well..")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! di-s "...for you, Jak.")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 5)
              (set! di-s "...")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! di-s "If he claims to have created you and Daxter, then")
              (set! di-s2 "this problem has just skyrocketed")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 7)
              (set! di-s "I'll have to look into this further, when you")
              (set! di-s2 "bring me <COLOR_GREEN>15 more <COLOR_PINK>dark crystals")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 8)
              (set! dialogue-select 0)
              (set! choice-max 3)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "Who are you, again?")
              (set! di-c2 "How exactly do these crystals help?")
              (set! di-c3 "What do we know about The Entity?")
              (set! di-c4 "Why can't you fight The Entity yourself?")
        )
        (when (= log-sec 9)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1338)
                )
                ((= dialogue-select 1)
                    (set! log-id 1339)
                )
                ((= dialogue-select 2)
                    (set! log-id 1340)
                )
                ((= dialogue-select 3)
                    (set! log-id 1341)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )


    ;;;;;;;;;;;;;;;;;;;;;section 2;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (when (and (= in-dialogue? #t) (= log-id 1345) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "Okay... This is weird")
            (set! di-s2 "These crystals contain huge amounts of code in them")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "There's something in them containing the creation")
              (set! di-s2 "of <COLOR_YELLOW>Hero and Sidekick<COLOR_WHITE>.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "...I think it's safe to say that these crystals are used for")
              (set! di-s2 "<COLOR_RED>much<COLOR_WHITE> more than just simple dark eco storage.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! di-s "I am pretty sure that these contain an essence of his")
              (set! di-s2 "<COLOR_PINK>powers<COLOR_WHITE>")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 5)
              (set! di-s "H-his creation powers...")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! di-s "...we cannot let him get any more of these")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 7)
              (set! di-s "I fear he has already become too powerful.")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 8)
              (set! dialogue-select 0)
              (set! choice-max 1)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "Why would The Entity be keeping his own power crystals stashed away?")
              (set! di-c2 "So what you're saying is its hopeless (strike a mean thumbs up)")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 9)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1346)
                )
                ((= dialogue-select 1)
                    (set! log-id 1347)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1346) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "I... I don't think he's found these..")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "That must be why there are scouts everywhere!")
              (set! di-s2 "He's constantly looking for more..")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "...but why?")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! di-s "There's no reason to collect an unreasonable")
              (set! di-s2 "amount of dark eco unless he plans to destroy.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 5)
              (set! di-s "But he has to be smarter than this, surely")
              (set! di-s2 "he couldn't miss the fact that you shouldn't")
              (set! di-s3 "<COLOR_RED>ever<COLOR_WHITE> be destroyed.")
              (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! dialogue-select 0)
              (set! choice-max 0)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "What if he really is built to inevitably destroy?")
              (set! di-c2 "")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 7)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1348)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1347) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "Well certainly with that attitude.")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "If you've already lost hope, then there is really")
              (set! di-s2 "none at all, and we should...")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "...")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! di-s "No, Jak.")
              (set! di-s2 "It's not <COLOR_YELLOW>completely<COLOR_WHITE> hopeless...")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 5)
              (set! di-s "I don't think he's found these crystals yet.")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! di-s "But if he's keen on finding these, he must have a plan")
              (set! di-s2 "to destroy, right? But that doesn't make any sort of sense.")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 7)
              (set! di-s "He knows destroying you means ending all of reality")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 8)
              (set! dialogue-select 0)
              (set! choice-max 0)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "What if he really is built to inevitably destroy?")
              (set! di-c2 "")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 9)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1348)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1348) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "No... all AI has a self-preservation method.")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "He cannot compute a reality without himself.. So he must")
              (set! di-s2 "be planning something else...")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "I just don't know what The Entity plans to do")
              (set! di-s2 "with all of this dark eco")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! dialogue-select 0)
              (set! choice-max 3)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "He contacted me again")
              (set! di-c2 "It might be Gol and Mia")
              (set! di-c3 "So the dark ships are scouts of The Entity?")
              (set! di-c4 "Didn't you say The Entity is just like you at one point?")
        )
        (when (= log-sec 5)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1349)
                )
                ((= dialogue-select 1)
                    (set! log-id 1350)
                )
                ((= dialogue-select 2)
                    (set! log-id 1351)
                )
                ((= dialogue-select 3)
                    (set! log-id 1352)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1349) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "YOU'RE KILLING ME!")
            (set! di-s2 "You didn't lead with this??")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "What did he say this time?")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! dialogue-select 0)
              (set! choice-max 0)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "The Entity spoke about communicating with his caretakers")
              (set! di-c2 "")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 4)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1353)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )
    (when (and (= in-dialogue? #t) (= log-id 1353) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "Right, <COLOR_PINK>Jason <COLOR_WHITE>and <COLOR_ORANGE>Andy<COLOR_WHITE>...")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! dialogue-select 0)
              (set! choice-max 0)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "What")
              (set! di-c2 "")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 3)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1753)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1753) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
              (set! di-s "I'm... not sure how I know about all of this...")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 2)
              (set! di-s "I... oh my god..")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! di-s "I think I have a corruption in my memory...")
              (set! di-s2 "")
              (set! di-s3 "")
              (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! dialogue-select 0)
              (set! choice-max 1)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "How do you know the caretaker's names?")
              (set! di-c2 "That sounds really suspicious...")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 5)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1354)
                )
                ((= dialogue-select 1)
                    (set! log-id 1355)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1354) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "...I.. Don't know..")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
            (set! di-s "Those names just sound really familiar.")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 3)
            (set! di-s "They helped with the first form of the precursors,")
            (set! di-s2 "and thus, the world.")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 4)
              (set! dialogue-select 0)
              (set! choice-max 0)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "It's suspicious that you know all of this...")
              (set! di-c2 "")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 5)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1355)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1355) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "I swear, I'm not all coy and secretly playing as <COLOR_RED>The Entity<COLOR_WHITE>.")
            (set! di-s2 "<COLOR_WHITE>All of my actions have been for good.")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
            (set! di-s "It kind of does sound suspicious...")
            (set! di-s2 "But <COLOR_YELLOW>seriously<COLOR_WHITE>, you have to trust me on this.")
            (set! di-s3 "I'm here for the powers of good")
            (set! di-s4 "")
        )
        (when (= log-sec 3)
              (set! dialogue-select 0)
              (set! choice-max 3)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "He contacted me again")
              (set! di-c2 "It might be Gol and Mia")
              (set! di-c3 "So the dark ships are scouts of The Entity?")
              (set! di-c4 "Didn't you say The Entity is just like you at one point?")
        )
        (when (= log-sec 4)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1349)
                )
                ((= dialogue-select 1)
                    (set! log-id 1350)
                )
                ((= dialogue-select 2)
                    (set! log-id 1351)
                )
                ((= dialogue-select 3)
                    (set! log-id 1352)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1350) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "...")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
            (set! di-s "No.")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 3)
            (set! di-s "They got destroyed by <COLOR_PINK>dark eco")
            (set! di-s2 "<COLOR_WHITE>a long time ago.")
            (set! di-s3 "What kind of statement is this?")
            (set! di-s4 "")
        )
        (when (= log-sec 4)
            (set! di-s "It's like you don't remember your own life.")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 5)
            (set! di-s "Please refrain from talking out of your rear")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! dialogue-select 0)
              (set! choice-max 3)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "He contacted me again")
              (set! di-c2 "It might be Gol and Mia")
              (set! di-c3 "So the dark ships are scouts of The Entity?")
              (set! di-c4 "Didn't you say The Entity is just like you at one point?")
        )
        (when (= log-sec 7)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1349)
                )
                ((= dialogue-select 1)
                    (set! log-id 1350)
                )
                ((= dialogue-select 2)
                    (set! log-id 1351)
                )
                ((= dialogue-select 3)
                    (set! log-id 1352)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1351) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "The <COLOR_PINK>dark ships<COLOR_WHITE> seem to be a type that")
            (set! di-s2 "<COLOR_RED>The Entity<COLOR_WHITE> put in as a mission.")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
            (set! di-s "They appear at random, in random areas.")
            (set! di-s2 "He has to be searching for the crystals with these")
            (set! di-s3 "ships as his eyes")
            (set! di-s4 "")
        )
        (when (= log-sec 3)
            (set! di-s "If you see any <COLOR_PINK>dark ships<COLOR_WHITE>, try your best to")
            (set! di-s2 "hinder their offense.")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 4)
            (set! di-s "It would make sense that they would be carrying")
            (set! di-s2 "tons of those crystals, too.")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 5)
              (set! dialogue-select 0)
              (set! choice-max 3)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "He contacted me again")
              (set! di-c2 "Gol and Mia might have something to do with this...")
              (set! di-c3 "So the dark ships are scouts of The Entity?")
              (set! di-c4 "Didn't you say The Entity is just like you at one point?")
        )
        (when (= log-sec 6)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1349)
                )
                ((= dialogue-select 1)
                    (set! log-id 1350)
                )
                ((= dialogue-select 2)
                    (set! log-id 1351)
                )
                ((= dialogue-select 3)
                    (set! log-id 1352)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1352) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "...")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
            (set! di-s "I did, didn't I?")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 3)
            (set! di-s "(sigh)")
            (set! di-s2 "I suppose it's time to come clean.")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 4)
            (set! di-s "I know not how I understand our caretaker's names,")
            (set! di-s2 "But I do somehow remember being conscious before the dawn of the world.")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 5)
            (set! di-s "But all of it is really fuzzy, there's tons of jumbled code in here.")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! dialogue-select 0)
              (set! choice-max 1)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "You're not really Vin?")
              (set! di-c2 "Clearly you're having a cyber-heart-attack")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 7)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1356)
                )
                ((= dialogue-select 1)
                    (set! log-id 1357)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (when (and (= in-dialogue? #t) (= log-id 1357) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "Not funny, Guys!")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
            (set! di-s "Daxter, I see you chuckling!")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 3)
            (set! di-s "You two suck")
            (set! di-s2 "I don't need one more thing to worry about in here!")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 4)
            (set! di-s "I just don't know how I could recall such a memory..")
            (set! di-s2 "I'm so confused and scared and reality is tossed up!")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 5)
            (set! di-s "...")
            (set! di-s2 "...I gotta cyber-breathe...")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! dialogue-select 0)
              (set! choice-max 0)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "You're not really Vin?")
              (set! di-c2 "")
              (set! di-c3 "")
              (set! di-c4 "")
        )
        (when (= log-sec 7)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1356)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )
    
    (when (and (= in-dialogue? #t) (= log-id 1356) (cpad-pressed? 0 x))
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "Oh I am Vin, I have all of my memories and data.")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
            (set! di-s "M-Maybe merging with the system must've overwritten some stuff.")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 3)
            (set! di-s "I do recall that <COLOR_RED>The Entity<COLOR_WHITE>'s caretakers are")
            (set! di-s2 "the original developers of the game itself.")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 4)
            (set! di-s "It would seem that they created this AI to do the building for them")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 5)
            (set! di-s "Again, it's all really fuzzy...")
            (set! di-s2 "")
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 6)
              (set! dialogue-select 0)
              (set! choice-max 3)
              (set! dialogue-choice #t)
              (set! choice-given? #t)
              (set! di-c1 "He contacted me again")
              (set! di-c2 "It might be Gol and Mia")
              (set! di-c3 "So the dark ships are scouts of The Entity?")
              (set! di-c4 "Didn't you say The Entity is just like you at one point?")
        )
        (when (= log-sec 7)
            (cond  
                ((= dialogue-select 0)
                    (set! log-id 1349)
                )
                ((= dialogue-select 1)
                    (set! log-id 1350)
                )
                ((= dialogue-select 2)
                    (set! log-id 1351)
                )
                ((= dialogue-select 3)
                    (set! log-id 1352)
                )
            )
            (set! choice-given? #f)
            (set! log-sec 0)
        )
    )

    (none)
)